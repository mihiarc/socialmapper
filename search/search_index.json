{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to SocialMapper","text":"<p>SocialMapper helps you understand how people connect with important places in their community by analyzing travel times and demographics.</p>"},{"location":"#what-is-socialmapper","title":"What is SocialMapper?","text":"<p>SocialMapper is a Python tool that answers questions like: - Who can reach the local library within a 15-minute walk? - What areas are within 20 minutes of the nearest hospital? - How many seniors live within driving distance of grocery stores?</p> <p>It combines travel time analysis with demographic data to help you understand community accessibility.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#find-places","title":"\ud83d\uddfa\ufe0f Find Places","text":"<p>Discover libraries, schools, hospitals, parks, and other community resources from OpenStreetMap. Or use the geocoding feature with a street address. </p>"},{"location":"#calculate-travel-times","title":"\u23f1\ufe0f Calculate Travel Times","text":"<p>Generate isochrones (travel time areas) for walking, driving, or biking. [Walking and Biking functionality still under development]</p>"},{"location":"#analyze-demographics","title":"\ud83d\udcca Analyze Demographics","text":"<p>Understand who lives within reach of your point of interest using Census data like population, income, and age.</p>"},{"location":"#use-your-own-locations","title":"\ud83d\udccd Use Your Own Locations","text":"<p>Analyze accessibility from your organization's facilities or any custom addresses.</p>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>from socialmapper import run_socialmapper\n\n# Find who can reach libraries in 15 minutes\nresults = run_socialmapper(\n    state=\"North Carolina\",\n    county=\"Wake County\",\n    place_type=\"library\",\n    travel_time=15,\n    census_variables=[\"total_population\", \"median_income\"]\n)\n</code></pre>"},{"location":"#get-started","title":"Get Started","text":"<ul> <li> <p> Installation</p> <p>Install SocialMapper in minutes</p> <p> Installation guide</p> </li> <li> <p> Quick Start</p> <p>Your first analysis in 5 minutes</p> <p> Quick start tutorial</p> </li> <li> <p> Examples</p> <p>Learn from practical examples</p> <p> View examples</p> </li> <li> <p> Get Help</p> <p>Documentation and support</p> <p> User guide</p> </li> </ul>"},{"location":"#common-use-cases","title":"Common Use Cases","text":""},{"location":"#urban-planning","title":"Urban Planning","text":"<ul> <li>Analyze access to public facilities</li> <li>Identify underserved areas</li> <li>Plan new service locations</li> </ul>"},{"location":"#public-health","title":"Public Health","text":"<ul> <li>Map healthcare accessibility</li> <li>Study food desert patterns</li> <li>Evaluate emergency service coverage</li> </ul>"},{"location":"#education","title":"Education","text":"<ul> <li>Assess school accessibility</li> <li>Plan bus routes</li> <li>Identify transportation barriers</li> </ul>"},{"location":"#community-development","title":"Community Development","text":"<ul> <li>Evaluate access to parks and recreation</li> <li>Study retail accessibility</li> <li>Support grant applications with data</li> </ul>"},{"location":"#why-socialmapper","title":"Why SocialMapper?","text":"<ul> <li>Free and Open Source - No licensing fees or restrictions</li> <li>Easy to Use - Simple Python API and command line interface</li> <li>Reliable Data - Uses OpenStreetMap and US Census Bureau</li> <li>Fast - Optimized caching and efficient algorithms</li> <li>Flexible - Analyze any location type at any scale</li> </ul> <p>Ready to explore your community? Get started now \u2192</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>This page provides a complete reference for the SocialMapper Python API. For census variable details, see the Census Variables Reference.</p>"},{"location":"api-reference/#installation","title":"Installation","text":"<pre><code>pip install socialmapper\n</code></pre>"},{"location":"api-reference/#quick-start","title":"Quick Start","text":"<pre><code>from socialmapper import SocialMapperClient\n\n# Simple analysis\nwith SocialMapperClient() as client:\n    result = client.analyze(\n        location=\"Portland, OR\",\n        poi_type=\"amenity\",\n        poi_name=\"library\",\n        travel_time=15,\n        census_variables=[\"total_population\", \"median_income\"]\n    )\n\n    if result.is_ok():\n        analysis = result.unwrap()\n        print(f\"Found {analysis.poi_count} libraries\")\n        print(f\"Census units analyzed: {analysis.census_units_analyzed}\")\n</code></pre>"},{"location":"api-reference/#core-classes","title":"Core Classes","text":""},{"location":"api-reference/#socialmapperclient","title":"SocialMapperClient","text":"<p>The main client for interacting with SocialMapper. Implements a context manager for proper resource handling.</p> <pre><code>from socialmapper import SocialMapperClient, ClientConfig\n\n# Default configuration\nwith SocialMapperClient() as client:\n    # Use the client\n    pass\n\n# Custom configuration\nconfig = ClientConfig(\n    api_key=\"your-census-api-key\",\n    rate_limit=5,      # requests per second\n    timeout=600,       # seconds\n    cache_strategy=None  # Optional cache implementation\n)\n\nwith SocialMapperClient(config) as client:\n    # Use the client\n    pass\n</code></pre>"},{"location":"api-reference/#methods","title":"Methods","text":""},{"location":"api-reference/#analyze","title":"analyze()","text":"<p>Perform a simple analysis for a location and POI type.</p> <pre><code>def analyze(\n    location: str,\n    poi_type: str,\n    poi_name: str,\n    travel_time: int = 15,\n    census_variables: Optional[List[str]] = None,\n    travel_mode: str = \"drive\",\n    geographic_level: str = \"block-group\",\n    output_dir: Union[str, Path] = \"output\",\n    **kwargs\n) -&gt; Result[AnalysisResult, Error]\n</code></pre> <p>Parameters: - <code>location</code>: Location in \"City, State\" format (e.g., \"Portland, OR\") - <code>poi_type</code>: OpenStreetMap key (e.g., \"amenity\", \"leisure\", \"healthcare\") - <code>poi_name</code>: OpenStreetMap value (e.g., \"library\", \"park\", \"hospital\") - <code>travel_time</code>: Travel time in minutes (1-120, default: 15) - <code>census_variables</code>: List of census variables to analyze (default: [\"total_population\"]) - <code>travel_mode</code>: Travel mode - \"walk\", \"bike\", or \"drive\" (default: \"drive\") - <code>geographic_level</code>: Geographic unit - \"block-group\" or \"zcta\" (default: \"block-group\") - <code>output_dir</code>: Directory for output files (default: \"output\")</p> <p>Returns: <code>Result[AnalysisResult, Error]</code> - Success with analysis results or error</p> <p>Example: <pre><code>result = client.analyze(\n    location=\"Seattle, WA\",\n    poi_type=\"leisure\",\n    poi_name=\"park\",\n    travel_time=10,\n    census_variables=[\"total_population\", \"median_age\", \"median_income\"]\n)\n</code></pre></p>"},{"location":"api-reference/#create_analysis","title":"create_analysis()","text":"<p>Create a builder for complex analysis configurations.</p> <pre><code>def create_analysis() -&gt; SocialMapperBuilder\n</code></pre> <p>Returns: <code>SocialMapperBuilder</code> - Fluent builder for configuration</p> <p>Example: <pre><code>builder = client.create_analysis()\nconfig = (builder\n    .with_location(\"Chicago\", \"IL\")\n    .with_osm_pois(\"amenity\", \"school\")\n    .with_travel_time(20)\n    .build()\n)\n</code></pre></p>"},{"location":"api-reference/#run_analysis","title":"run_analysis()","text":"<p>Run analysis with a configuration from the builder.</p> <pre><code>def run_analysis(\n    config: Dict[str, Any],\n    on_progress: Optional[Callable[[float], None]] = None\n) -&gt; Result[AnalysisResult, Error]\n</code></pre> <p>Parameters: - <code>config</code>: Configuration dictionary from builder - <code>on_progress</code>: Optional callback function for progress updates (0-100)</p> <p>Returns: <code>Result[AnalysisResult, Error]</code> - Success with results or error</p>"},{"location":"api-reference/#analyze_addresses","title":"analyze_addresses()","text":"<p>Geocode and analyze a list of addresses.</p> <pre><code>def analyze_addresses(\n    addresses: List[str],\n    travel_time: int = 15,\n    census_variables: Optional[List[str]] = None,\n    **kwargs\n) -&gt; Result[AnalysisResult, Error]\n</code></pre> <p>Parameters: - <code>addresses</code>: List of address strings to geocode - <code>travel_time</code>: Travel time in minutes - <code>census_variables</code>: Census variables to analyze - <code>**kwargs</code>: Additional options</p> <p>Returns: <code>Result[AnalysisResult, Error]</code> - Success with results or error</p>"},{"location":"api-reference/#batch","title":"batch()","text":"<p>Create a batch context for running multiple analyses efficiently.</p> <pre><code>def batch() -&gt; BatchContext\n</code></pre> <p>Example: <pre><code>with client.batch() as batch:\n    batch.add_analysis(config1)\n    batch.add_analysis(config2)\n    results = batch.run()\n</code></pre></p>"},{"location":"api-reference/#socialmapperbuilder","title":"SocialMapperBuilder","text":"<p>Fluent builder for creating analysis configurations.</p> <pre><code>from socialmapper import SocialMapperBuilder, GeographicLevel\n\nconfig = (SocialMapperBuilder()\n    .with_location(\"Durham\", \"NC\")\n    .with_osm_pois(\"amenity\", \"library\")\n    .with_travel_time(20)\n    .with_travel_mode(\"bike\")\n    .with_census_variables(\"total_population\", \"median_income\")\n    .with_geographic_level(GeographicLevel.ZCTA)\n    .enable_isochrone_export()\n    .with_output_directory(\"output/durham\")\n    .build()\n)\n</code></pre>"},{"location":"api-reference/#methods_1","title":"Methods","text":""},{"location":"api-reference/#with_location","title":"with_location()","text":"<p>Set the geographic area for analysis.</p> <pre><code>def with_location(area: str, state: Optional[str] = None) -&gt; Self\n</code></pre> <p>Parameters: - <code>area</code>: City, county, or area name - <code>state</code>: Optional state name or abbreviation</p> <p>Examples: <pre><code>.with_location(\"San Francisco\", \"CA\")\n.with_location(\"San Francisco, CA\")\n.with_location(\"Cook County\", \"IL\")\n</code></pre></p>"},{"location":"api-reference/#with_osm_pois","title":"with_osm_pois()","text":"<p>Configure OpenStreetMap POI search.</p> <pre><code>def with_osm_pois(\n    poi_type: str,\n    poi_name: str,\n    additional_tags: Optional[Dict[str, str]] = None\n) -&gt; Self\n</code></pre> <p>Parameters: - <code>poi_type</code>: OSM key (e.g., \"amenity\", \"leisure\", \"healthcare\") - <code>poi_name</code>: OSM value (e.g., \"library\", \"park\", \"hospital\") - <code>additional_tags</code>: Optional additional OSM tags for filtering</p> <p>Example: <pre><code>.with_osm_pois(\"amenity\", \"school\", {\"school:type\": \"elementary\"})\n</code></pre></p>"},{"location":"api-reference/#with_custom_pois","title":"with_custom_pois()","text":"<p>Use custom POI coordinates from a file.</p> <pre><code>def with_custom_pois(\n    file_path: Union[str, Path],\n    name_field: Optional[str] = None,\n    type_field: Optional[str] = None\n) -&gt; Self\n</code></pre> <p>Parameters: - <code>file_path</code>: Path to CSV or JSON file with POI data - <code>name_field</code>: Column name for POI names (auto-detected if not specified) - <code>type_field</code>: Column name for POI types (auto-detected if not specified)</p> <p>Required columns: <code>latitude</code>, <code>longitude</code></p>"},{"location":"api-reference/#with_travel_time","title":"with_travel_time()","text":"<p>Set the travel time for isochrone generation.</p> <pre><code>def with_travel_time(minutes: int) -&gt; Self\n</code></pre> <p>Parameters: - <code>minutes</code>: Travel time in minutes (1-120)</p>"},{"location":"api-reference/#with_travel_mode","title":"with_travel_mode()","text":"<p>Set the travel mode for routing.</p> <pre><code>def with_travel_mode(mode: Union[str, TravelMode]) -&gt; Self\n</code></pre> <p>Parameters: - <code>mode</code>: \"walk\", \"bike\", \"drive\", or TravelMode enum value</p>"},{"location":"api-reference/#with_census_variables","title":"with_census_variables()","text":"<p>Set census variables to analyze.</p> <pre><code>def with_census_variables(*variables: str) -&gt; Self\n</code></pre> <p>Parameters: - <code>*variables</code>: Variable names or census codes</p> <p>Example: <pre><code>.with_census_variables(\"total_population\", \"median_income\", \"B01002_001E\")\n</code></pre></p>"},{"location":"api-reference/#with_geographic_level","title":"with_geographic_level()","text":"<p>Set the geographic unit for analysis.</p> <pre><code>def with_geographic_level(level: Union[str, GeographicLevel]) -&gt; Self\n</code></pre> <p>Parameters: - <code>level</code>: \"block-group\", \"zcta\", or GeographicLevel enum value</p>"},{"location":"api-reference/#enable_isochrone_export","title":"enable_isochrone_export()","text":"<p>Enable saving of isochrone geometries.</p> <pre><code>def enable_isochrone_export() -&gt; Self\n</code></pre>"},{"location":"api-reference/#disable_csv_export","title":"disable_csv_export()","text":"<p>Disable CSV export (enabled by default).</p> <pre><code>def disable_csv_export() -&gt; Self\n</code></pre>"},{"location":"api-reference/#with_output_directory","title":"with_output_directory()","text":"<p>Set the output directory for results.</p> <pre><code>def with_output_directory(path: Union[str, Path]) -&gt; Self\n</code></pre>"},{"location":"api-reference/#limit_pois","title":"limit_pois()","text":"<p>Limit the number of POIs to analyze.</p> <pre><code>def limit_pois(max_count: int) -&gt; Self\n</code></pre>"},{"location":"api-reference/#build","title":"build()","text":"<p>Build and validate the configuration.</p> <pre><code>def build() -&gt; Dict[str, Any]\n</code></pre> <p>Returns: Configuration dictionary for use with <code>run_analysis()</code></p> <p>Raises: <code>ValueError</code> if configuration is invalid</p>"},{"location":"api-reference/#result-types","title":"Result Types","text":"<p>SocialMapper uses the Result pattern for explicit error handling without exceptions.</p>"},{"location":"api-reference/#resultt-e","title":"Result[T, E]","text":"<p>A generic result type that can contain either a success value (Ok) or an error (Err).</p> <pre><code>from socialmapper import Result, Ok, Err\n\n# Pattern matching (Python 3.10+)\nmatch result:\n    case Ok(value):\n        print(f\"Success: {value}\")\n    case Err(error):\n        print(f\"Error: {error}\")\n\n# Traditional approach\nif result.is_ok():\n    value = result.unwrap()\nelse:\n    error = result.unwrap_err()\n</code></pre>"},{"location":"api-reference/#methods_2","title":"Methods","text":"<ul> <li><code>is_ok() -&gt; bool</code>: Check if result is successful</li> <li><code>is_err() -&gt; bool</code>: Check if result is an error</li> <li><code>unwrap() -&gt; T</code>: Get success value (raises if error)</li> <li><code>unwrap_err() -&gt; E</code>: Get error value (raises if success)</li> <li><code>unwrap_or(default: T) -&gt; T</code>: Get value or default</li> <li><code>map(func: Callable[[T], U]) -&gt; Result[U, E]</code>: Transform success value</li> <li><code>map_err(func: Callable[[E], F]) -&gt; Result[T, F]</code>: Transform error value</li> </ul>"},{"location":"api-reference/#analysisresult","title":"AnalysisResult","text":"<p>Results from a successful analysis.</p> <pre><code>@dataclass\nclass AnalysisResult:\n    poi_count: int                    # Number of POIs found\n    isochrone_count: int             # Number of isochrones generated\n    census_units_analyzed: int       # Number of census units analyzed\n    files_generated: Dict[str, Path] # Paths to generated files\n    metadata: Dict[str, Any]         # Additional metadata\n\n    def is_complete(self) -&gt; bool:\n        \"\"\"Check if analysis completed successfully.\"\"\"\n        return self.poi_count &gt; 0 and self.isochrone_count &gt; 0\n</code></pre>"},{"location":"api-reference/#error","title":"Error","text":"<p>Structured error information.</p> <pre><code>@dataclass\nclass Error:\n    type: ErrorType              # Error category\n    message: str                 # Human-readable message\n    context: Dict[str, Any]      # Additional context\n    cause: Optional[Exception]   # Original exception if any\n    traceback: Optional[str]     # Stack trace\n</code></pre>"},{"location":"api-reference/#errortype","title":"ErrorType","text":"<p>Error categories for better error handling.</p> <pre><code>class ErrorType(Enum):\n    VALIDATION = auto()         # Invalid input parameters\n    NETWORK = auto()           # Network connectivity issues\n    FILE_NOT_FOUND = auto()    # File or path not found\n    PERMISSION_DENIED = auto() # Insufficient permissions\n    RATE_LIMIT = auto()        # API rate limit exceeded\n    CENSUS_API = auto()        # Census API errors\n    OSM_API = auto()           # OpenStreetMap API errors\n    GEOCODING = auto()         # Address geocoding failures\n    PROCESSING = auto()        # General processing errors\n    UNKNOWN = auto()           # Unclassified errors\n</code></pre>"},{"location":"api-reference/#configuration-classes","title":"Configuration Classes","text":""},{"location":"api-reference/#clientconfig","title":"ClientConfig","text":"<p>Configuration for the SocialMapper client.</p> <pre><code>@dataclass\nclass ClientConfig:\n    api_key: Optional[str] = None       # Census API key\n    rate_limit: float = 1.0             # Requests per second\n    timeout: int = 600                  # Request timeout in seconds\n    cache_strategy: Optional[CacheStrategy] = None  # Cache implementation\n    max_retries: int = 3                # Maximum retry attempts\n    log_level: str = \"INFO\"             # Logging level\n</code></pre>"},{"location":"api-reference/#geographiclevel","title":"GeographicLevel","text":"<p>Geographic units for census data.</p> <pre><code>class GeographicLevel(Enum):\n    BLOCK_GROUP = \"block-group\"  # Census block groups (~600-3000 people)\n    ZCTA = \"zcta\"               # ZIP Code Tabulation Areas\n</code></pre>"},{"location":"api-reference/#travelmode","title":"TravelMode","text":"<p>Available travel modes for routing.</p> <pre><code>class TravelMode(Enum):\n    WALK = \"walk\"   # Walking (5 km/h)\n    BIKE = \"bike\"   # Cycling (15 km/h)\n    DRIVE = \"drive\" # Driving (uses road network)\n</code></pre>"},{"location":"api-reference/#convenience-functions","title":"Convenience Functions","text":"<p>High-level functions for common use cases.</p>"},{"location":"api-reference/#quick_analysis","title":"quick_analysis()","text":"<p>Perform a quick analysis with minimal configuration.</p> <pre><code>def quick_analysis(\n    location: str,\n    poi_search: str,\n    travel_time: int = 15,\n    census_variables: Optional[List[str]] = None,\n    output_dir: Union[str, Path] = \"output\"\n) -&gt; Result[AnalysisResult, Error]\n</code></pre> <p>Parameters: - <code>location</code>: Location in \"City, State\" format - <code>poi_search</code>: POI search in \"type:name\" format (e.g., \"amenity:library\") - <code>travel_time</code>: Travel time in minutes - <code>census_variables</code>: Census variables to analyze - <code>output_dir</code>: Output directory</p> <p>Example: <pre><code>from socialmapper import quick_analysis\n\nresult = quick_analysis(\n    \"Portland, OR\",\n    \"amenity:school\",\n    travel_time=10,\n    census_variables=[\"total_population\", \"median_income\"]\n)\n</code></pre></p>"},{"location":"api-reference/#analyze_location","title":"analyze_location()","text":"<p>Analyze a specific location with custom POIs.</p> <pre><code>def analyze_location(\n    city: str,\n    state: str,\n    poi_type: str = \"amenity\",\n    poi_name: str = \"library\",\n    **options\n) -&gt; Result[AnalysisResult, Error]\n</code></pre> <p>Parameters: - <code>city</code>: City name - <code>state</code>: State name or abbreviation - <code>poi_type</code>: OpenStreetMap POI type - <code>poi_name</code>: OpenStreetMap POI name - <code>**options</code>: Additional options (travel_time, census_variables, etc.)</p>"},{"location":"api-reference/#analyze_custom_pois","title":"analyze_custom_pois()","text":"<p>Analyze custom POIs from a file.</p> <pre><code>def analyze_custom_pois(\n    poi_file: Union[str, Path],\n    travel_time: int = 15,\n    census_variables: Optional[List[str]] = None,\n    name_field: Optional[str] = None,\n    type_field: Optional[str] = None,\n    **options\n) -&gt; Result[AnalysisResult, Error]\n</code></pre> <p>Parameters: - <code>poi_file</code>: Path to CSV or JSON file with POI coordinates - <code>travel_time</code>: Travel time in minutes - <code>census_variables</code>: Census variables to analyze - <code>name_field</code>: Field name for POI names - <code>type_field</code>: Field name for POI types - <code>**options</code>: Additional options</p>"},{"location":"api-reference/#analyze_dataframe","title":"analyze_dataframe()","text":"<p>Analyze POIs from a pandas DataFrame.</p> <pre><code>def analyze_dataframe(\n    df: pd.DataFrame,\n    lat_col: str = \"latitude\",\n    lon_col: str = \"longitude\",\n    name_col: Optional[str] = \"name\",\n    type_col: Optional[str] = \"type\",\n    **options\n) -&gt; Result[AnalysisResult, Error]\n</code></pre> <p>Parameters: - <code>df</code>: DataFrame with POI data - <code>lat_col</code>: Column name for latitude - <code>lon_col</code>: Column name for longitude - <code>name_col</code>: Column name for POI names - <code>type_col</code>: Column name for POI types - <code>**options</code>: Additional analysis options</p>"},{"location":"api-reference/#async-support","title":"Async Support","text":"<p>SocialMapper provides async support for concurrent operations.</p>"},{"location":"api-reference/#asyncsocialmapper","title":"AsyncSocialMapper","text":"<p>Asynchronous client for streaming and concurrent operations.</p> <pre><code>from socialmapper import AsyncSocialMapper\nimport asyncio\n\nasync def main():\n    async with AsyncSocialMapper(config) as mapper:\n        # Stream POIs as they're found\n        async for poi in mapper.stream_pois():\n            print(f\"Found: {poi.name}\")\n\n        # Generate isochrones with progress\n        async for progress in mapper.generate_isochrones_with_progress():\n            print(f\"Progress: {progress.completed}/{progress.total}\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"api-reference/#error-handling","title":"Error Handling","text":""},{"location":"api-reference/#basic-error-handling","title":"Basic Error Handling","text":"<pre><code>result = client.analyze(\"Portland, OR\", \"amenity\", \"library\")\n\nif result.is_ok():\n    analysis = result.unwrap()\n    print(f\"Success! Found {analysis.poi_count} POIs\")\nelse:\n    error = result.unwrap_err()\n    print(f\"Error: {error.message}\")\n\n    # Check error type\n    if error.type == ErrorType.CENSUS_API:\n        print(\"Census API error - check your API key\")\n</code></pre>"},{"location":"api-reference/#pattern-matching-python-310","title":"Pattern Matching (Python 3.10+)","text":"<pre><code>match result:\n    case Ok(analysis):\n        print(f\"Found {analysis.poi_count} POIs\")\n    case Err(Error(type=ErrorType.RATE_LIMIT)):\n        print(\"Rate limited - try again later\")\n    case Err(error):\n        print(f\"Other error: {error}\")\n</code></pre>"},{"location":"api-reference/#collecting-multiple-results","title":"Collecting Multiple Results","text":"<pre><code>from socialmapper import collect_results\n\nresults = [\n    client.analyze(\"Portland, OR\", \"amenity\", \"library\"),\n    client.analyze(\"Seattle, WA\", \"amenity\", \"school\"),\n    client.analyze(\"Eugene, OR\", \"leisure\", \"park\")\n]\n\nmatch collect_results(results):\n    case Ok(analyses):\n        for analysis in analyses:\n            print(f\"Analysis complete: {analysis.poi_count} POIs\")\n    case Err(errors):\n        for error in errors:\n            print(f\"Error: {error}\")\n</code></pre>"},{"location":"api-reference/#environment-variables","title":"Environment Variables","text":"<p>SocialMapper uses the following environment variables:</p> <ul> <li><code>CENSUS_API_KEY</code>: Your Census Bureau API key (required for census data)</li> <li><code>SOCIALMAPPER_OUTPUT_DIR</code>: Default output directory (default: \"output\")</li> <li><code>SOCIALMAPPER_LOG_LEVEL</code>: Logging level (default: \"INFO\")</li> <li><code>SOCIALMAPPER_CACHE_DIR</code>: Cache directory (default: \"cache\")</li> </ul> <p>You can set these in a <code>.env</code> file:</p> <pre><code>CENSUS_API_KEY=your-api-key-here\nSOCIALMAPPER_OUTPUT_DIR=/path/to/output\nSOCIALMAPPER_LOG_LEVEL=DEBUG\n</code></pre>"},{"location":"api-reference/#caching","title":"Caching","text":"<p>SocialMapper supports pluggable caching strategies.</p>"},{"location":"api-reference/#implementing-a-cache-strategy","title":"Implementing a Cache Strategy","text":"<pre><code>from socialmapper import CacheStrategy\nfrom typing import Any, Optional\n\nclass RedisCache(CacheStrategy):\n    def get(self, key: str) -&gt; Optional[Any]:\n        # Implement Redis get\n        pass\n\n    def set(self, key: str, value: Any, ttl: Optional[int] = None):\n        # Implement Redis set with TTL\n        pass\n\n# Use with client\nconfig = ClientConfig(cache_strategy=RedisCache())\n</code></pre>"},{"location":"api-reference/#rate-limiting","title":"Rate Limiting","text":"<p>The client includes built-in rate limiting to respect API limits.</p> <pre><code># Configure rate limit\nconfig = ClientConfig(\n    rate_limit=5.0  # 5 requests per second\n)\n\n# Rate limits are applied automatically\nwith SocialMapperClient(config) as client:\n    # All API calls are rate limited\n    result = client.analyze(...)\n</code></pre>"},{"location":"api-reference/#logging","title":"Logging","text":"<p>SocialMapper uses Python's standard logging module.</p> <pre><code>import logging\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# Or set via environment variable\n# SOCIALMAPPER_LOG_LEVEL=DEBUG\n</code></pre>"},{"location":"api-reference/#examples","title":"Examples","text":""},{"location":"api-reference/#complete-analysis-pipeline","title":"Complete Analysis Pipeline","text":"<pre><code>from socialmapper import SocialMapperClient, SocialMapperBuilder\n\n# Configure the analysis\nconfig = (SocialMapperBuilder()\n    .with_location(\"Austin\", \"TX\")\n    .with_osm_pois(\"amenity\", \"school\")\n    .with_travel_time(15)\n    .with_travel_mode(\"walk\")\n    .with_census_variables(\n        \"total_population\",\n        \"median_age\",\n        \"median_income\",\n        \"percent_poverty\"\n    )\n    .with_geographic_level(\"block-group\")\n    .enable_isochrone_export()\n    .with_output_directory(\"output/austin-schools\")\n    .build()\n)\n\n# Run the analysis\nwith SocialMapperClient() as client:\n    result = client.run_analysis(\n        config,\n        on_progress=lambda p: print(f\"Progress: {p:.1f}%\")\n    )\n\n    match result:\n        case Ok(analysis):\n            print(f\"Analysis complete!\")\n            print(f\"Found {analysis.poi_count} schools\")\n            print(f\"Analyzed {analysis.census_units_analyzed} census units\")\n            print(f\"Files saved to: {analysis.files_generated}\")\n        case Err(error):\n            print(f\"Analysis failed: {error}\")\n</code></pre>"},{"location":"api-reference/#batch-processing","title":"Batch Processing","text":"<pre><code>from socialmapper import SocialMapperClient\n\nlocations = [\n    (\"Portland\", \"OR\"),\n    (\"Seattle\", \"WA\"),\n    (\"San Francisco\", \"CA\")\n]\n\nwith SocialMapperClient() as client:\n    with client.batch() as batch:\n        for city, state in locations:\n            config = (client.create_analysis()\n                .with_location(city, state)\n                .with_osm_pois(\"amenity\", \"hospital\")\n                .with_travel_time(20)\n                .build()\n            )\n            batch.add_analysis(config)\n\n        results = batch.run()\n\n        for (city, state), result in zip(locations, results):\n            match result:\n                case Ok(analysis):\n                    print(f\"{city}: {analysis.poi_count} hospitals\")\n                case Err(error):\n                    print(f\"{city}: Failed - {error}\")\n</code></pre>"},{"location":"api-reference/#custom-poi-analysis","title":"Custom POI Analysis","text":"<pre><code>from socialmapper import analyze_custom_pois\n\n# Analyze custom locations from CSV\nresult = analyze_custom_pois(\n    \"my_locations.csv\",\n    travel_time=15,\n    census_variables=[\"total_population\", \"median_age\"],\n    name_field=\"location_name\",\n    type_field=\"location_type\"\n)\n\nif result.is_ok():\n    analysis = result.unwrap()\n    print(f\"Analyzed {analysis.poi_count} custom locations\")\n</code></pre>"},{"location":"api-reference/#version-information","title":"Version Information","text":"<pre><code>import socialmapper\n\n# Get version\nprint(socialmapper.__version__)\n\n# Check API version\nfrom socialmapper.api import __version__ as api_version\nprint(f\"API version: {api_version}\")\n</code></pre>"},{"location":"api-reference/#migration-from-legacy-api","title":"Migration from Legacy API","text":"<p>If you're using the old <code>run_socialmapper</code> function, migrate to the new client-based API:</p> <pre><code># Old API (deprecated)\nfrom socialmapper import run_socialmapper\nresults = run_socialmapper(state=\"CA\", county=\"Los Angeles\", ...)\n\n# New API (recommended)\nfrom socialmapper import SocialMapperClient\nwith SocialMapperClient() as client:\n    result = client.analyze(\"Los Angeles, CA\", \"amenity\", \"library\")\n    if result.is_ok():\n        analysis = result.unwrap()\n        # Use analysis results\n</code></pre>"},{"location":"api-reference/#see-also","title":"See Also","text":"<ul> <li>Census Variables Reference - Complete list of available census variables</li> <li>User Guide - Detailed usage instructions</li> <li>Examples - Code examples and tutorials</li> </ul>"},{"location":"error-handling/","title":"Error Handling in SocialMapper","text":"<p>SocialMapper provides a comprehensive error handling system designed to give clear, actionable feedback to users when things go wrong.</p>"},{"location":"error-handling/#overview","title":"Overview","text":"<p>The error handling system in SocialMapper follows these principles:</p> <ol> <li>Clear Error Messages: Every error provides a human-readable explanation</li> <li>Actionable Suggestions: Errors include suggestions for how to fix the problem</li> <li>Rich Context: Errors capture relevant context for debugging</li> <li>Error Chaining: Original causes are preserved through the error chain</li> <li>Type Safety: Custom exception hierarchy for different error categories</li> </ol>"},{"location":"error-handling/#exception-hierarchy","title":"Exception Hierarchy","text":"<pre><code>SocialMapperError (base)\n\u251c\u2500\u2500 ConfigurationError\n\u2502   \u251c\u2500\u2500 MissingAPIKeyError\n\u2502   \u2514\u2500\u2500 InvalidConfigurationError\n\u251c\u2500\u2500 ValidationError\n\u2502   \u251c\u2500\u2500 InvalidLocationError\n\u2502   \u251c\u2500\u2500 InvalidCensusVariableError\n\u2502   \u2514\u2500\u2500 InvalidTravelTimeError\n\u251c\u2500\u2500 DataProcessingError\n\u2502   \u251c\u2500\u2500 NoDataFoundError\n\u2502   \u2514\u2500\u2500 InsufficientDataError\n\u251c\u2500\u2500 ExternalAPIError\n\u2502   \u251c\u2500\u2500 CensusAPIError\n\u2502   \u251c\u2500\u2500 OSMAPIError\n\u2502   \u2514\u2500\u2500 GeocodingError\n\u251c\u2500\u2500 FileSystemError\n\u2502   \u251c\u2500\u2500 FileNotFoundError\n\u2502   \u2514\u2500\u2500 PermissionError\n\u251c\u2500\u2500 AnalysisError\n\u2502   \u251c\u2500\u2500 IsochroneGenerationError\n\u2502   \u2514\u2500\u2500 NetworkAnalysisError\n\u2514\u2500\u2500 VisualizationError\n    \u2514\u2500\u2500 MapGenerationError\n</code></pre>"},{"location":"error-handling/#common-errors-and-solutions","title":"Common Errors and Solutions","text":""},{"location":"error-handling/#1-invalid-location-format","title":"1. Invalid Location Format","text":"<p>Error: <code>InvalidLocationError</code></p> <p>Example: <pre><code># Wrong\nclient.analyze(location=\"San Francisco\")\n\n# Correct\nclient.analyze(location=\"San Francisco, CA\")\n</code></pre></p> <p>Suggestions: - Use format: 'City, State' (e.g., 'San Francisco, CA') - Or use format: 'County, State' (e.g., 'Wake County, North Carolina')</p>"},{"location":"error-handling/#2-missing-census-api-key","title":"2. Missing Census API Key","text":"<p>Error: <code>MissingAPIKeyError</code></p> <p>Solution: 1. Get a free API key from https://api.census.gov/data/key_signup.html 2. Set as environment variable: <code>export CENSUS_API_KEY='your-key-here'</code> 3. Or pass directly: <code>.with_census_api_key('your-key')</code></p>"},{"location":"error-handling/#3-no-pois-found","title":"3. No POIs Found","text":"<p>Error: <code>NoDataFoundError</code></p> <p>Common Causes: - POI type doesn't exist in the area - Location name is misspelled - Search area is too small</p> <p>Solutions: - Try different POI types: 'school', 'hospital', 'park' - Use a larger area (county instead of city) - Verify spelling of location names</p>"},{"location":"error-handling/#4-invalid-travel-time","title":"4. Invalid Travel Time","text":"<p>Error: <code>InvalidTravelTimeError</code></p> <p>Valid Range: 1-120 minutes</p> <p>Example: <pre><code># Wrong\n.with_travel_time(200)  # Too high\n\n# Correct\n.with_travel_time(30)   # Valid\n</code></pre></p>"},{"location":"error-handling/#5-networkapi-errors","title":"5. Network/API Errors","text":"<p>Error: <code>OSMAPIError</code>, <code>CensusAPIError</code></p> <p>Common Solutions: - Check internet connection - Wait and retry (rate limiting) - Verify API credentials - Check service status</p>"},{"location":"error-handling/#using-error-handling-in-tutorials","title":"Using Error Handling in Tutorials","text":"<p>The <code>tutorial_error_handler</code> provides user-friendly error messages for tutorials:</p> <pre><code>from socialmapper import tutorial_error_handler\n\nwith tutorial_error_handler(\"My Tutorial\"):\n    # Tutorial code here\n    result = run_analysis()\n</code></pre> <p>This will: - Catch common errors - Provide helpful suggestions - Format errors nicely for learners - Exit gracefully with appropriate messages</p>"},{"location":"error-handling/#error-context-and-debugging","title":"Error Context and Debugging","text":"<p>Each error includes rich context:</p> <pre><code>try:\n    # Some operation\nexcept SocialMapperError as e:\n    print(f\"Error: {e}\")\n    print(f\"Category: {e.context.category}\")\n    print(f\"Severity: {e.context.severity}\")\n    print(f\"Operation: {e.context.operation}\")\n    print(f\"Suggestions: {e.context.suggestions}\")\n    print(f\"Details: {e.context.details}\")\n</code></pre>"},{"location":"error-handling/#best-practices","title":"Best Practices","text":""},{"location":"error-handling/#1-use-specific-exceptions","title":"1. Use Specific Exceptions","text":"<pre><code># Good\nraise InvalidLocationError(location)\n\n# Avoid\nraise ValueError(\"Bad location\")\n</code></pre>"},{"location":"error-handling/#2-add-context","title":"2. Add Context","text":"<pre><code># Good\nraise DataProcessingError(\n    \"Failed to process census data\",\n    geoids=geoids,\n    variable=variable\n).with_operation(\"census_integration\")\n\n# Avoid\nraise Exception(\"Processing failed\")\n</code></pre>"},{"location":"error-handling/#3-chain-exceptions","title":"3. Chain Exceptions","text":"<pre><code>try:\n    result = external_api_call()\nexcept RequestException as e:\n    raise OSMAPIError(\n        \"Failed to query OpenStreetMap\",\n        cause=e,  # Preserves original error\n        query=query\n    )\n</code></pre>"},{"location":"error-handling/#4-provide-suggestions","title":"4. Provide Suggestions","text":"<pre><code>error = NoDataFoundError(\"libraries\", location=\"Rural Town\")\nerror.add_suggestion(\"Try searching for a larger area\")\nerror.add_suggestion(\"Check if libraries exist in this region\")\nraise error\n</code></pre>"},{"location":"error-handling/#error-recovery-patterns","title":"Error Recovery Patterns","text":""},{"location":"error-handling/#1-retry-on-transient-errors","title":"1. Retry on Transient Errors","text":"<pre><code>from socialmapper.util.error_handling import with_retries\n\n@with_retries(max_attempts=3, exceptions=(OSMAPIError,))\ndef fetch_pois():\n    return query_overpass(query)\n</code></pre>"},{"location":"error-handling/#2-fallback-values","title":"2. Fallback Values","text":"<pre><code>from socialmapper.util.error_handling import with_fallback\n\n@with_fallback([], NoDataFoundError)\ndef get_census_data():\n    return fetch_census_data()\n</code></pre>"},{"location":"error-handling/#3-batch-error-collection","title":"3. Batch Error Collection","text":"<pre><code>from socialmapper.util.error_handling import ErrorCollector\n\ncollector = ErrorCollector()\n\nfor location in locations:\n    with collector.collect(location):\n        process_location(location)\n\nif collector.has_errors:\n    print(f\"Failed: {collector.error_count} locations\")\n</code></pre>"},{"location":"error-handling/#api-error-handling","title":"API Error Handling","text":"<p>The modern API uses the Result pattern:</p> <pre><code>result = client.analyze(location=\"San Francisco, CA\", \n                       poi_type=\"amenity\",\n                       poi_name=\"library\")\n\nmatch result:\n    case Ok(analysis):\n        print(f\"Found {analysis.poi_count} POIs\")\n    case Err(error):\n        print(f\"Error: {error.message}\")\n        if error.type == ErrorType.VALIDATION:\n            print(\"Check your input parameters\")\n</code></pre>"},{"location":"error-handling/#logging-integration","title":"Logging Integration","text":"<p>Errors are automatically logged with appropriate levels:</p> <pre><code>from socialmapper.util.error_handling import log_error\n\ntry:\n    risky_operation()\nexcept SocialMapperError as e:\n    log_error(e, ErrorSeverity.ERROR)\n</code></pre>"},{"location":"error-handling/#testing-error-conditions","title":"Testing Error Conditions","text":"<pre><code>import pytest\nfrom socialmapper import InvalidLocationError\n\ndef test_location_validation():\n    with pytest.raises(InvalidLocationError) as exc_info:\n        validate_location(\"BadLocation\")\n\n    error = exc_info.value\n    assert \"City, State\" in error.context.suggestions[0]\n</code></pre>"},{"location":"error-handling/#migration-from-old-error-handling","title":"Migration from Old Error Handling","text":"<p>If you're updating old code:</p> <pre><code># Old style\ntry:\n    result = analyze()\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n\n# New style\ntry:\n    result = analyze()\nexcept SocialMapperError as e:\n    print(format_error_for_user(e))\n    for suggestion in e.context.suggestions:\n        print(f\"\u2022 {suggestion}\")\n</code></pre>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#general-questions","title":"General Questions","text":""},{"location":"faq/#what-is-socialmapper","title":"What is SocialMapper?","text":"<p>SocialMapper is a Python tool that analyzes community accessibility by combining travel time analysis with demographic data. It helps you understand who can reach important places like libraries, schools, and hospitals.</p>"},{"location":"faq/#what-data-sources-does-it-use","title":"What data sources does it use?","text":"<ul> <li>OpenStreetMap for finding places (POIs)</li> <li>US Census Bureau for demographic data</li> <li>OpenStreetMap road networks for travel time calculations</li> </ul>"},{"location":"faq/#is-it-free-to-use","title":"Is it free to use?","text":"<p>Yes! SocialMapper is open source and free to use. The data sources (OpenStreetMap and Census) are also free.</p>"},{"location":"faq/#do-i-need-a-census-api-key","title":"Do I need a Census API key?","text":"<p>No, but having one improves reliability. Get a free key at census.gov/developers.</p>"},{"location":"faq/#installation","title":"Installation","text":""},{"location":"faq/#what-python-version-do-i-need","title":"What Python version do I need?","text":"<p>Python 3.11 or higher. We recommend Python 3.12 for best performance.</p>"},{"location":"faq/#why-is-installation-taking-so-long","title":"Why is installation taking so long?","text":"<p>First installation downloads several dependencies. This is normal and only happens once.</p>"},{"location":"faq/#can-i-use-it-on-windowsmaclinux","title":"Can I use it on Windows/Mac/Linux?","text":"<p>Yes! SocialMapper works on all major operating systems.</p>"},{"location":"faq/#usage-questions","title":"Usage Questions","text":""},{"location":"faq/#how-do-i-analyze-my-own-addresses","title":"How do I analyze my own addresses?","text":"<p>Create a CSV file with columns: name, latitude, longitude. Then: <pre><code>run_socialmapper(custom_coords_path=\"your_file.csv\", travel_time=15)\n</code></pre></p>"},{"location":"faq/#what-census-variables-are-available","title":"What census variables are available?","text":"<p>Common ones include: - <code>total_population</code> - Total population - <code>median_household_income</code> - Median income - <code>median_age</code> - Median age - <code>percent_poverty</code> - Poverty rate - <code>percent_without_vehicle</code> - No vehicle access</p>"},{"location":"faq/#can-i-analyze-multiple-locations-at-once","title":"Can I analyze multiple locations at once?","text":"<p>Yes! Use a CSV file with multiple locations or loop through different searches.</p>"},{"location":"faq/#how-accurate-are-the-travel-times","title":"How accurate are the travel times?","text":"<p>Travel times use real road networks and are quite accurate. They assume: - Normal traffic conditions - Standard travel speeds - No delays or stops</p>"},{"location":"faq/#performance","title":"Performance","text":""},{"location":"faq/#why-is-my-first-run-slow","title":"Why is my first run slow?","text":"<p>SocialMapper builds caches on first use. Subsequent runs will be much faster.</p>"},{"location":"faq/#how-can-i-speed-up-analysis","title":"How can I speed up analysis?","text":"<ul> <li>Use fewer census variables</li> <li>Enable caching (default)</li> <li>Analyze smaller areas</li> <li>Use batch processing</li> </ul>"},{"location":"faq/#how-much-data-will-it-download","title":"How much data will it download?","text":"<p>Initial setup may download 100-500MB for caches. After that, minimal data is needed.</p>"},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"faq/#no-pois-found","title":"\"No POIs found\"","text":"<ul> <li>Check your place_type spelling</li> <li>Verify the county name</li> <li>Try a different place type</li> <li>Check internet connection</li> </ul>"},{"location":"faq/#census-data-error","title":"\"Census data error\"","text":"<ul> <li>Verify you're analyzing US locations</li> <li>Check coordinate accuracy</li> <li>Try without Census API key</li> <li>Reduce number of variables</li> </ul>"},{"location":"faq/#memory-error","title":"\"Memory error\"","text":"<ul> <li>Analyze smaller areas</li> <li>Use fewer census variables</li> <li>Close other applications</li> <li>Increase system swap space</li> </ul>"},{"location":"faq/#data-questions","title":"Data Questions","text":""},{"location":"faq/#can-i-use-it-outside-the-us","title":"Can I use it outside the US?","text":"<p>POI finding works globally, but census data is US-only. For non-US analysis, omit census variables.</p>"},{"location":"faq/#how-current-is-the-data","title":"How current is the data?","text":"<ul> <li>OpenStreetMap: Live data</li> <li>Census: Latest American Community Survey (usually 1-2 years old)</li> </ul>"},{"location":"faq/#can-i-save-results","title":"Can I save results?","text":"<p>Yes! Use <code>export_csv=True</code> for data files and <code>export_maps=True</code> for visualizations.</p>"},{"location":"faq/#advanced-usage","title":"Advanced Usage","text":""},{"location":"faq/#can-i-customize-travel-modes","title":"Can I customize travel modes?","text":"<p>Yes, options include: - <code>walk</code> - Walking (default) - <code>drive</code> - Driving - <code>bike</code> - Cycling</p>"},{"location":"faq/#can-i-change-travel-speeds","title":"Can I change travel speeds?","text":"<p>Not directly, but OSMnx uses realistic defaults based on road types and travel modes.</p>"},{"location":"faq/#is-there-an-api","title":"Is there an API?","text":"<p>Yes! SocialMapper has a full Python API. See the API Reference.</p>"},{"location":"faq/#getting-help","title":"Getting Help","text":""},{"location":"faq/#where-can-i-report-bugs","title":"Where can I report bugs?","text":"<p>GitHub Issues</p>"},{"location":"faq/#how-can-i-contribute","title":"How can I contribute?","text":"<p>See our Contributing Guide</p>"},{"location":"faq/#where-can-i-find-more-examples","title":"Where can I find more examples?","text":"<p>Check the examples directory</p>"},{"location":"migration-guide/","title":"Migration Guide: From run_socialmapper to Modern API","text":"<p>This guide helps you migrate from the deprecated <code>run_socialmapper</code> function to the modern SocialMapper API.</p>"},{"location":"migration-guide/#why-migrate","title":"Why Migrate?","text":"<p>The new API provides: - Better error handling with Result types instead of exceptions - Type safety with full type hints - Resource management with context managers - Cleaner configuration with the builder pattern - Progress tracking and async support - Improved testability with dependency injection</p>"},{"location":"migration-guide/#quick-migration-examples","title":"Quick Migration Examples","text":""},{"location":"migration-guide/#basic-poi-analysis","title":"Basic POI Analysis","text":"<p>Old way: <pre><code>from socialmapper import run_socialmapper\n\nresults = run_socialmapper(\n    geocode_area=\"San Francisco\",\n    state=\"CA\",\n    poi_type=\"amenity\",\n    poi_name=\"library\",\n    travel_time=15,\n    census_variables=[\"total_population\", \"median_income\"]\n)\n</code></pre></p> <p>New way: <pre><code>from socialmapper import SocialMapperClient\n\nwith SocialMapperClient() as client:\n    result = client.analyze(\n        location=\"San Francisco, CA\",\n        poi_type=\"amenity\",\n        poi_name=\"library\",\n        travel_time=15,\n        census_variables=[\"total_population\", \"median_income\"]\n    )\n\n    if result.is_ok():\n        analysis = result.unwrap()\n        # Use analysis.poi_count, analysis.files_generated, etc.\n</code></pre></p>"},{"location":"migration-guide/#custom-coordinates","title":"Custom Coordinates","text":"<p>Old way: <pre><code>results = run_socialmapper(\n    custom_coords_path=\"my_locations.csv\",\n    travel_time=20,\n    census_variables=[\"total_population\"],\n    export_csv=True,\n    export_isochrones=True\n)\n</code></pre></p> <p>New way: <pre><code>from socialmapper import SocialMapperClient, SocialMapperBuilder\n\nwith SocialMapperClient() as client:\n    config = (SocialMapperBuilder()\n        .with_custom_pois(\"my_locations.csv\")\n        .with_travel_time(20)\n        .with_census_variables(\"total_population\")\n        .with_exports(csv=True, isochrones=True)\n        .build()\n    )\n\n    result = client.run_analysis(config)\n</code></pre></p>"},{"location":"migration-guide/#with-api-key-and-custom-output","title":"With API Key and Custom Output","text":"<p>Old way: <pre><code>results = run_socialmapper(\n    geocode_area=\"Chicago\",\n    state=\"IL\",\n    poi_type=\"leisure\",\n    poi_name=\"park\",\n    travel_time=30,\n    geographic_level=\"zcta\",\n    census_variables=[\"total_population\", \"median_age\"],\n    api_key=\"your-api-key\",\n    output_dir=\"parks_analysis\"\n)\n</code></pre></p> <p>New way: <pre><code>from socialmapper import SocialMapperClient, SocialMapperBuilder\n\nwith SocialMapperClient() as client:\n    config = (SocialMapperBuilder()\n        .with_location(\"Chicago\", \"IL\")\n        .with_osm_pois(\"leisure\", \"park\")\n        .with_travel_time(30)\n        .with_geographic_level(\"zcta\")\n        .with_census_variables(\"total_population\", \"median_age\")\n        .with_census_api_key(\"your-api-key\")\n        .with_output_directory(\"parks_analysis\")\n        .build()\n    )\n\n    result = client.run_analysis(config)\n</code></pre></p>"},{"location":"migration-guide/#key-differences","title":"Key Differences","text":""},{"location":"migration-guide/#1-error-handling","title":"1. Error Handling","text":"<p>Old way: Exceptions are raised <pre><code>try:\n    results = run_socialmapper(...)\nexcept Exception as e:\n    print(f\"Error: {e}\")\n</code></pre></p> <p>New way: Result types with explicit error handling <pre><code>result = client.analyze(...)\nif result.is_err():\n    error = result.unwrap_err()\n    print(f\"Error type: {error.type.name}\")\n    print(f\"Message: {error.message}\")\n</code></pre></p>"},{"location":"migration-guide/#2-configuration","title":"2. Configuration","text":"<p>Old way: Many function parameters <pre><code>run_socialmapper(\n    geocode_area=\"...\",\n    state=\"...\",\n    poi_type=\"...\",\n    poi_name=\"...\",\n    travel_time=15,\n    # ... many more parameters\n)\n</code></pre></p> <p>New way: Fluent builder pattern <pre><code>config = (SocialMapperBuilder()\n    .with_location(\"City\", \"State\")\n    .with_osm_pois(\"type\", \"name\")\n    .with_travel_time(15)\n    # ... chain as needed\n    .build()\n)\n</code></pre></p>"},{"location":"migration-guide/#3-return-values","title":"3. Return Values","text":"<p>Old way: Dictionary with various keys <pre><code>results = run_socialmapper(...)\npois = results.get(\"poi_data\", {}).get(\"pois\", [])\ncensus = results.get(\"census_data\", [])\n</code></pre></p> <p>New way: Structured result object <pre><code>if result.is_ok():\n    analysis = result.unwrap()\n    print(f\"POIs found: {analysis.poi_count}\")\n    print(f\"Census units: {analysis.census_units_analyzed}\")\n    for file_type, path in analysis.files_generated.items():\n        print(f\"{file_type}: {path}\")\n</code></pre></p>"},{"location":"migration-guide/#4-client-configuration","title":"4. Client Configuration","text":"<p>New way only: Configure client behavior <pre><code>from socialmapper import SocialMapperClient, ClientConfig\n\nconfig = ClientConfig(\n    api_key=\"your-census-api-key\",\n    rate_limit=5,  # requests per second\n    timeout=600,   # seconds\n    retry_attempts=3\n)\n\nwith SocialMapperClient(config) as client:\n    # Use client with custom configuration\n</code></pre></p>"},{"location":"migration-guide/#advanced-features","title":"Advanced Features","text":""},{"location":"migration-guide/#progress-tracking","title":"Progress Tracking","text":"<pre><code>def on_progress(percent: float):\n    print(f\"Progress: {percent:.1f}%\")\n\nresult = client.run_analysis(config, on_progress=on_progress)\n</code></pre>"},{"location":"migration-guide/#batch-processing","title":"Batch Processing","text":"<pre><code>configs = [config1, config2, config3]\n\nwith client.batch_analyses(configs) as batch:\n    results = batch.run_all()\n    for i, result in enumerate(results):\n        if result.is_ok():\n            print(f\"Analysis {i+1} completed\")\n</code></pre>"},{"location":"migration-guide/#custom-cache-strategy","title":"Custom Cache Strategy","text":"<pre><code>class MyCache:\n    def get(self, key: str):\n        # Your cache implementation\n        pass\n\n    def set(self, key: str, value: Any, ttl: Optional[int] = None):\n        # Your cache implementation\n        pass\n\nconfig = ClientConfig(cache_strategy=MyCache())\n</code></pre>"},{"location":"migration-guide/#common-patterns","title":"Common Patterns","text":""},{"location":"migration-guide/#1-simple-analysis","title":"1. Simple Analysis","text":"<pre><code># Most common use case\nwith SocialMapperClient() as client:\n    result = client.analyze(\n        location=\"Portland, OR\",\n        poi_type=\"amenity\",\n        poi_name=\"library\"\n    )\n</code></pre>"},{"location":"migration-guide/#2-full-configuration","title":"2. Full Configuration","text":"<pre><code># When you need full control\nwith SocialMapperClient() as client:\n    config = (SocialMapperBuilder()\n        .with_location(\"Austin\", \"TX\")\n        .with_osm_pois(\"amenity\", \"school\", {\"operator\": \"Austin ISD\"})\n        .with_travel_time(20)\n        .with_census_variables(\n            \"total_population\",\n            \"median_household_income\",\n            \"percent_poverty\",\n            \"percent_without_vehicle\"\n        )\n        .with_geographic_level(\"block-group\")\n        .with_exports(csv=True, isochrones=True)\n        .with_output_directory(\"school_analysis\")\n        .build()\n    )\n\n    result = client.run_analysis(config)\n</code></pre>"},{"location":"migration-guide/#3-error-recovery","title":"3. Error Recovery","text":"<pre><code>with SocialMapperClient() as client:\n    locations = [\"San Francisco, CA\", \"Invalid City, XX\", \"Seattle, WA\"]\n\n    for location in locations:\n        result = client.analyze(location, \"amenity\", \"hospital\")\n\n        match result:\n            case Ok(analysis):\n                print(f\"{location}: {analysis.poi_count} hospitals\")\n            case Err(error) if error.type == ErrorType.GEOCODING:\n                print(f\"{location}: Could not geocode location\")\n            case Err(error):\n                print(f\"{location}: {error.message}\")\n</code></pre>"},{"location":"migration-guide/#need-help","title":"Need Help?","text":"<ul> <li>Check the API Reference for detailed documentation</li> <li>See examples for working code samples</li> <li>Report issues at https://github.com/anthropics/socialmapper/issues</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Common issues and solutions when using SocialMapper.</p>"},{"location":"troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"troubleshooting/#no-module-named-socialmapper","title":"\"No module named socialmapper\"","text":"<p>Problem: Python can't find SocialMapper after installation.</p> <p>Solutions: 1. Ensure installation completed: <code>pip install socialmapper</code> 2. Check you're using the right Python environment 3. Try reinstalling: <code>pip install --upgrade socialmapper</code></p>"},{"location":"troubleshooting/#dependency-conflict","title":"\"Dependency conflict\"","text":"<p>Problem: Package dependencies conflict with existing packages.</p> <p>Solutions: 1. Use a virtual environment:    <pre><code>python -m venv myenv\nsource myenv/bin/activate  # On Windows: myenv\\Scripts\\activate\npip install socialmapper\n</code></pre> 2. Update pip: <code>pip install --upgrade pip</code></p>"},{"location":"troubleshooting/#data-issues","title":"Data Issues","text":""},{"location":"troubleshooting/#no-pois-found","title":"\"No POIs found\"","text":"<p>Problem: Search returns no results.</p> <p>Solutions: 1. Check spelling of place_type (use singular: \"library\" not \"libraries\") 2. Verify county name includes \"County\" suffix 3. Try a broader search area 4. Check internet connection</p> <p>Debug: <pre><code># Try different parameters\nresults = run_socialmapper(\n    state=\"CA\",  # Try abbreviation\n    county=\"Los Angeles County\",  # Full name with \"County\"\n    place_type=\"library\"  # Singular form\n)\n</code></pre></p>"},{"location":"troubleshooting/#no-census-data-found","title":"\"No census data found\"","text":"<p>Problem: No demographic data returned.</p> <p>Solutions: 1. Verify coordinates are in the United States 2. Check coordinates aren't in water/uninhabited areas 3. Try a larger travel time 4. Use block-group instead of ZCTA for better coverage</p>"},{"location":"troubleshooting/#invalid-coordinates","title":"\"Invalid coordinates\"","text":"<p>Problem: Custom coordinates are rejected.</p> <p>Solutions: 1. Check latitude is between -90 and 90 2. Check longitude is between -180 and 180 3. Verify coordinates aren't swapped (latitude first) 4. Ensure decimal format (35.7796, not 35\u00b046'47\"N)</p>"},{"location":"troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/#analysis-taking-too-long","title":"\"Analysis taking too long\"","text":"<p>Problem: Processing seems stuck or very slow.</p> <p>Solutions: 1. Start with smaller travel times (5-10 minutes) 2. Analyze fewer locations at once 3. Request fewer census variables 4. First run is slower (building caches)</p> <p>Optimize: <pre><code># Start simple\nresults = run_socialmapper(\n    custom_coords_path=\"one_location.csv\",\n    travel_time=5,\n    census_variables=[\"total_population\"]  # Just one variable\n)\n</code></pre></p>"},{"location":"troubleshooting/#memory-error","title":"\"Memory error\"","text":"<p>Problem: Running out of memory during analysis.</p> <p>Solutions: 1. Process locations in batches 2. Use ZCTA instead of block-group 3. Reduce travel time 4. Close other applications</p>"},{"location":"troubleshooting/#output-issues","title":"Output Issues","text":""},{"location":"troubleshooting/#cant-find-output-files","title":"\"Can't find output files\"","text":"<p>Problem: Export files aren't where expected.</p> <p>Solutions: 1. Check the output_dir parameter 2. Look in default \"output/\" directory 3. Ensure export parameters are True 4. Check for write permissions</p> <p>Verify: <pre><code>results = run_socialmapper(\n    custom_coords_path=\"locations.csv\",\n    export_csv=True,  # Must be True\n    output_dir=\"my_output\"  # Check this directory\n)\n</code></pre></p>"},{"location":"troubleshooting/#maps-not-generating","title":"\"Maps not generating\"","text":"<p>Problem: No map files created.</p> <p>Solutions: 1. Set <code>export_maps=True</code> 2. Check for matplotlib installation 3. Ensure valid census data exists 4. Look for error messages</p>"},{"location":"troubleshooting/#api-issues","title":"API Issues","text":""},{"location":"troubleshooting/#census-api-error","title":"\"Census API error\"","text":"<p>Problem: Census data retrieval fails.</p> <p>Solutions: 1. Works without API key (but less reliable) 2. Get free key at census.gov/developers 3. Check internet connection 4. Census API may be temporarily down</p> <p>Set API key: <pre><code>export CENSUS_API_KEY=\"your_key_here\"\n# Or in Python:\nresults = run_socialmapper(\n    api_key=\"your_key_here\",\n    ...\n)\n</code></pre></p>"},{"location":"troubleshooting/#rate-limit-exceeded","title":"\"Rate limit exceeded\"","text":"<p>Problem: Too many requests to external services.</p> <p>Solutions: 1. Enable caching (default) 2. Add delays between requests 3. Process in smaller batches 4. Wait and retry later</p>"},{"location":"troubleshooting/#common-error-messages","title":"Common Error Messages","text":""},{"location":"troubleshooting/#valueerror-custom_coords_path-must-be-provided","title":"\"ValueError: custom_coords_path must be provided\"","text":"<p>You must specify either POI search parameters or a custom coordinates file.</p>"},{"location":"troubleshooting/#filenotfounderror","title":"\"FileNotFoundError\"","text":"<p>Check the file path - use absolute paths if needed: <pre><code>import os\nfile_path = os.path.abspath(\"my_locations.csv\")\nresults = run_socialmapper(custom_coords_path=file_path)\n</code></pre></p>"},{"location":"troubleshooting/#keyerror-when-accessing-results","title":"\"KeyError\" when accessing results","text":"<p>Check the key exists before accessing: <pre><code>if 'census_data' in results:\n    census_data = results['census_data']\nelse:\n    print(\"No census data available\")\n</code></pre></p>"},{"location":"troubleshooting/#debug-mode","title":"Debug Mode","text":"<p>Enable detailed logging:</p> <pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# Now run your analysis\nresults = run_socialmapper(...)\n</code></pre>"},{"location":"troubleshooting/#getting-help","title":"Getting Help","text":"<p>If issues persist:</p> <ol> <li>Check the FAQ</li> <li>Review examples</li> <li>Search GitHub issues</li> <li>Open a new issue with:</li> <li>Error message</li> <li>Code that causes the error</li> <li>Python and SocialMapper versions</li> <li>Operating system</li> </ol>"},{"location":"features/address-geocoding/","title":"\ud83d\udccd Address Geocoding in SocialMapper","text":""},{"location":"features/address-geocoding/#overview","title":"Overview","text":"<p>Address geocoding is a core feature in SocialMapper that converts human-readable addresses into geographic coordinates (latitude/longitude). This enables you to analyze custom locations beyond what's available in OpenStreetMap, such as:</p> <ul> <li>Your organization's facilities</li> <li>Client locations</li> <li>Community resources not in OSM</li> <li>Historical addresses</li> <li>Survey respondent locations</li> </ul>"},{"location":"features/address-geocoding/#how-it-works-with-socialmapper","title":"How It Works with SocialMapper","text":"<p>The geocoding system seamlessly integrates into SocialMapper's analysis workflow:</p> <ol> <li>Input addresses via CSV file or API</li> <li>Convert to coordinates using multiple geocoding providers</li> <li>Generate isochrones around each location</li> <li>Analyze demographics within travel time areas</li> <li>Export results with full geographic context</li> </ol>"},{"location":"features/address-geocoding/#example-workflow","title":"Example Workflow","text":"<pre><code>from socialmapper import run_socialmapper\n\n# Analyze accessibility from your custom locations\nresults = run_socialmapper(\n    addresses_path=\"my_facilities.csv\",  # Your addresses\n    travel_time=15,                      # 15-minute isochrones\n    census_variables=[\"total_population\", \"median_income\"],\n    export_maps=True\n)\n</code></pre>"},{"location":"features/address-geocoding/#key-features","title":"Key Features","text":""},{"location":"features/address-geocoding/#multiple-provider-support","title":"\ud83d\udd04 Multiple Provider Support","text":"<ul> <li>OpenStreetMap Nominatim - Free, global coverage</li> <li>US Census Geocoder - High accuracy for US addresses</li> <li>Extensible to add Google Maps, HERE, Mapbox</li> </ul>"},{"location":"features/address-geocoding/#high-performance","title":"\u26a1 High Performance","text":"<ul> <li>Intelligent caching - 96% storage reduction with Parquet</li> <li>Batch processing - Handle thousands of addresses efficiently</li> <li>Automatic fallback - Try multiple providers for best results</li> </ul>"},{"location":"features/address-geocoding/#quality-assurance","title":"\ud83c\udfaf Quality Assurance","text":"<ul> <li>Quality scoring - EXACT, INTERPOLATED, CENTROID, APPROXIMATE</li> <li>Validation - Ensure coordinates are within expected bounds</li> <li>Geographic enrichment - Add state, county, tract, block group</li> </ul>"},{"location":"features/address-geocoding/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"features/address-geocoding/#basic-usage","title":"Basic Usage","text":"<pre><code>from socialmapper.geocoding import geocode_address\n\n# Simple address geocoding\nresult = geocode_address(\"123 Main St, Anytown, USA\")\nif result.success:\n    print(f\"Location: {result.latitude}, {result.longitude}\")\n    print(f\"Quality: {result.quality.value}\")\n</code></pre>"},{"location":"features/address-geocoding/#batch-processing","title":"Batch Processing","text":"<pre><code>from socialmapper.geocoding import geocode_addresses\n\n# Geocode multiple addresses\naddresses = [\n    \"123 Main St, City, State\",\n    \"456 Oak Ave, Town, State\",\n    \"789 Elm Blvd, Village, State\"\n]\n\nresults = geocode_addresses(addresses, progress=True)\nsuccessful = [r for r in results if r.success]\nprint(f\"Geocoded {len(successful)} of {len(addresses)} addresses\")\n</code></pre>"},{"location":"features/address-geocoding/#csv-file-input","title":"CSV File Input","text":"<p>Create a CSV file with your addresses: <pre><code>name,address,city,state,zip\nMain Library,123 Main St,Springfield,IL,62701\nBranch Library,456 Oak Ave,Springfield,IL,62702\nCommunity Center,789 Elm St,Springfield,IL,62703\n</code></pre></p> <p>Then use with SocialMapper: <pre><code>socialmapper analyze --addresses-file my_locations.csv --travel-time 15\n</code></pre></p>"},{"location":"features/address-geocoding/#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":"<p>The geocoding system follows a modular design:</p> <pre><code>socialmapper/geocoding/\n\u251c\u2500\u2500 __init__.py           # Public API\n\u251c\u2500\u2500 engine.py             # Core orchestration\n\u251c\u2500\u2500 providers.py          # Provider implementations\n\u2514\u2500\u2500 cache.py             # Caching system\n</code></pre>"},{"location":"features/address-geocoding/#key-components","title":"Key Components","text":"<ol> <li>AddressGeocodingEngine - Orchestrates the geocoding process</li> <li>GeocodingProviders - Implement specific geocoding services</li> <li>AddressCache - High-performance caching layer</li> <li>Quality Validation - Ensures result accuracy</li> </ol>"},{"location":"features/address-geocoding/#configuration","title":"\u2699\ufe0f Configuration","text":""},{"location":"features/address-geocoding/#basic-configuration","title":"Basic Configuration","text":"<pre><code>from socialmapper.geocoding import GeocodingConfig, AddressProvider\n\nconfig = GeocodingConfig(\n    primary_provider=AddressProvider.NOMINATIM,\n    fallback_providers=[AddressProvider.CENSUS],\n    enable_cache=True,\n    min_quality_threshold=\"INTERPOLATED\"\n)\n</code></pre>"},{"location":"features/address-geocoding/#advanced-options","title":"Advanced Options","text":"<pre><code>config = GeocodingConfig(\n    # Performance\n    timeout_seconds=10,\n    max_retries=3,\n    batch_size=100,\n\n    # Quality\n    min_quality_threshold=\"EXACT\",\n    require_country_match=True,\n\n    # Caching\n    cache_ttl_hours=168,  # 1 week\n    cache_max_size=10000\n)\n</code></pre>"},{"location":"features/address-geocoding/#quality-levels","title":"\ud83c\udfaf Quality Levels","text":"Quality Description Use Case EXACT Rooftop/exact match Precise analysis INTERPOLATED Street-level Neighborhood studies CENTROID ZIP/city center Regional analysis APPROXIMATE Low precision Exploratory work"},{"location":"features/address-geocoding/#integration-examples","title":"\ud83d\udcca Integration Examples","text":""},{"location":"features/address-geocoding/#with-travel-time-analysis","title":"With Travel Time Analysis","text":"<pre><code># Geocode addresses and analyze accessibility\nfrom socialmapper import run_socialmapper\n\nresults = run_socialmapper(\n    addresses_path=\"health_clinics.csv\",\n    travel_time=20,\n    travel_mode=\"drive\",\n    census_variables=[\"total_population\", \"percent_uninsured\"]\n)\n\n# Results include full demographic analysis for each clinic's service area\n</code></pre>"},{"location":"features/address-geocoding/#with-custom-poi-data","title":"With Custom POI Data","text":"<pre><code>from socialmapper.geocoding import addresses_to_poi_format\n\n# Convert addresses to POI format\naddresses = [\n    {\"name\": \"Clinic A\", \"address\": \"123 Main St, City, State\"},\n    {\"name\": \"Clinic B\", \"address\": \"456 Oak Ave, Town, State\"}\n]\n\npoi_data = addresses_to_poi_format(addresses)\n\n# Use with standard SocialMapper workflow\nfrom socialmapper import run_socialmapper\nresults = run_socialmapper(\n    custom_coords_data=poi_data,\n    travel_time=15\n)\n</code></pre>"},{"location":"features/address-geocoding/#caching-system","title":"\ud83d\udcbe Caching System","text":"<p>The geocoding cache dramatically improves performance:</p> <ul> <li>Persistent storage - Results saved between sessions</li> <li>Automatic deduplication - Same address never geocoded twice</li> <li>TTL expiration - Configurable cache lifetime</li> <li>Compact format - Parquet files use 96% less space than JSON</li> </ul>"},{"location":"features/address-geocoding/#cache-location","title":"Cache Location","text":"<pre><code>cache/geocoding/\n\u2514\u2500\u2500 address_cache.parquet\n</code></pre>"},{"location":"features/address-geocoding/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"features/address-geocoding/#common-issues","title":"Common Issues","text":"<p>\"No results found\" - Check address format and spelling - Try including more details (city, state, ZIP) - Verify internet connection</p> <p>\"Quality below threshold\" - Lower the quality threshold for exploratory analysis - Add more address details for better matches - Try a different provider</p> <p>\"Rate limit exceeded\" - Enable caching to reduce API calls - Reduce batch size - Add delays between requests</p>"},{"location":"features/address-geocoding/#debug-mode","title":"Debug Mode","text":"<pre><code>import logging\nlogging.getLogger('socialmapper.geocoding').setLevel(logging.DEBUG)\n\n# Now geocoding will show detailed progress\nresult = geocode_address(\"123 Main St\")\n</code></pre>"},{"location":"features/address-geocoding/#best-practices","title":"\ud83d\udccb Best Practices","text":"<ol> <li>Always use caching - Reduces API calls and improves speed</li> <li>Batch similar addresses - Group by city/state for efficiency</li> <li>Set appropriate quality thresholds - EXACT for precise analysis, CENTROID for regional</li> <li>Include full addresses - More details = better results</li> <li>Handle failures gracefully - Some addresses may not geocode</li> </ol>"},{"location":"features/address-geocoding/#complete-example","title":"\ud83c\udf93 Complete Example","text":"<p>Here's a full workflow using address geocoding:</p> <pre><code>from socialmapper import run_socialmapper\nfrom socialmapper.geocoding import GeocodingConfig, AddressProvider\n\n# Configure geocoding\ngeocoding_config = GeocodingConfig(\n    primary_provider=AddressProvider.CENSUS,  # Best for US addresses\n    enable_cache=True,\n    min_quality_threshold=\"INTERPOLATED\"\n)\n\n# Run analysis on your facilities\nresults = run_socialmapper(\n    addresses_path=\"our_facilities.csv\",\n    travel_time=15,\n    travel_mode=\"walk\",\n    census_variables=[\n        \"total_population\",\n        \"median_age\", \n        \"percent_poverty\",\n        \"percent_without_vehicle\"\n    ],\n    geocoding_config=geocoding_config,\n    export_csv=True,\n    export_maps=True\n)\n\n# Examine results\nprint(f\"Successfully geocoded {results['geocoding_stats']['success_count']} addresses\")\nprint(f\"Population within walking distance: {results['total_population']:,}\")\n</code></pre>"},{"location":"features/address-geocoding/#future-enhancements","title":"\ud83d\udd2e Future Enhancements","text":"<ul> <li>Google Maps and HERE provider support</li> <li>International address formats</li> <li>Fuzzy matching for misspelled addresses</li> <li>Address standardization and validation</li> <li>Async processing for large batches</li> </ul> <p>The address geocoding system in SocialMapper provides reliable, cached, and quality-assured location lookup to enable demographic analysis of any custom location.</p>"},{"location":"features/network-analysis/","title":"OSMnx 2.0+ Features Summary for SocialMapper","text":"<p>Date: June 7, 2025 OSMnx Version Tested: 2.0.3 Python Version: 3.13.3  </p>"},{"location":"features/network-analysis/#key-improvements-in-osmnx-20","title":"\ud83d\ude80 Key Improvements in OSMnx 2.0+","text":""},{"location":"features/network-analysis/#1-performance-memory-efficiency","title":"1. Performance &amp; Memory Efficiency","text":"<ul> <li>\u2705 Faster graph creation: Network for Corvallis, OR created in ~1 second</li> <li>\u2705 Improved memory management: Better handling of large datasets</li> <li>\u2705 Enhanced caching: More efficient network requests and data reuse</li> <li>\u2705 Optimized algorithms: Better computational efficiency across the board</li> </ul>"},{"location":"features/network-analysis/#2-enhanced-geometries-module","title":"2. Enhanced Geometries Module","text":"<ul> <li>\u2705 Multiple geometry types: Downloaded 102 POIs, 18,752 buildings, 98 parks efficiently</li> <li>\u2705 Better error handling: More robust data retrieval from OpenStreetMap</li> <li>\u2705 Improved integration: Better compatibility with GeoPandas/Shapely 2.0</li> <li>\u2705 Faster downloads: Cached results and optimized queries</li> </ul>"},{"location":"features/network-analysis/#3-advanced-network-analysis","title":"3. Advanced Network Analysis","text":"<ul> <li>\u2705 Multiple network types: Walk, drive, bike networks with better type handling</li> <li>\u2705 Centrality calculations: Betweenness and closeness centrality analysis</li> <li>\u2705 Street orientation analysis: Tools for urban form analysis</li> <li>\u2705 Large networks: Processed 15K+ nodes efficiently</li> </ul>"},{"location":"features/network-analysis/#4-enhanced-routing-features","title":"4. Enhanced Routing Features","text":"<ul> <li>\u2705 Multiple routing algorithms: Shortest path, fastest path, Dijkstra</li> <li>\u2705 Travel time integration: Easy addition of speed and travel time attributes</li> <li>\u2705 Sub-millisecond routing: Very fast path calculations</li> <li>\u2705 Multiple weight options: Length, time, or custom weights</li> </ul>"},{"location":"features/network-analysis/#5-spatial-analysis-isochrones","title":"5. Spatial Analysis &amp; Isochrones","text":"<ul> <li>\u2705 Accessibility analysis: 15-minute walking isochrones from POIs</li> <li>\u2705 Network coverage: Calculate reachable portions of street networks</li> <li>\u2705 Multi-modal analysis: Different transport modes supported</li> <li>\u2705 Geographic accuracy: Precise spatial calculations</li> </ul>"},{"location":"features/network-analysis/#6-enhanced-visualization","title":"6. Enhanced Visualization","text":"<ul> <li>\u2705 Modern styling: Beautiful figure-ground network visualizations</li> <li>\u2705 Customizable plots: Control over colors, styles, and layouts</li> <li>\u2705 High-quality outputs: Vector and raster format support</li> <li>\u2705 Interactive capabilities: Better integration with mapping libraries</li> </ul>"},{"location":"features/network-analysis/#7-type-annotations-error-handling","title":"7. Type Annotations &amp; Error Handling","text":"<ul> <li>\u2705 Full type hints: Better IDE support and code quality</li> <li>\u2705 Improved validation: Better input checking and error messages</li> <li>\u2705 Consistent API: Streamlined function names and parameters</li> <li>\u2705 Better debugging: Enhanced error reporting and logging</li> </ul>"},{"location":"features/network-analysis/#benefits-for-socialmapper-v050","title":"\ud83c\udfd8\ufe0f Benefits for SocialMapper v0.5.0","text":""},{"location":"features/network-analysis/#performance-improvements","title":"Performance Improvements","text":"Metric Improvement POI Discovery Faster OpenStreetMap queries with better caching Network Creation ~1 second for medium-sized cities Memory Usage More efficient handling of large datasets Batch Processing Better reliability for multiple locations"},{"location":"features/network-analysis/#enhanced-accuracy","title":"Enhanced Accuracy","text":"<ul> <li>Intersection Consolidation: Better handling of complex intersections</li> <li>Network Simplification: More accurate representation of street networks  </li> <li>Geometric Precision: Improved spatial calculations and projections</li> <li>Travel Time Calculation: More accurate accessibility analysis</li> </ul>"},{"location":"features/network-analysis/#new-capabilities","title":"New Capabilities","text":"<ul> <li>Building Footprints: Access to detailed urban morphology data</li> <li>Multi-modal Networks: Walk, drive, bike network analysis</li> <li>Advanced Centrality: Network analysis for community connectivity</li> <li>Enhanced Routing: Multiple pathfinding algorithms</li> </ul>"},{"location":"features/network-analysis/#integration-with-socialmapper","title":"\ud83d\udee0\ufe0f Integration with SocialMapper","text":""},{"location":"features/network-analysis/#immediate-benefits","title":"Immediate Benefits","text":"<ol> <li>Faster POI Discovery: Reduced time for finding community resources</li> <li>Better Demographics Mapping: More accurate intersection handling</li> <li>Enhanced Visualization: Better maps and network representations</li> <li>Improved Reliability: Better error handling for production use</li> </ol>"},{"location":"features/network-analysis/#future-opportunities","title":"Future Opportunities","text":"<ol> <li>Multi-modal Analysis: Walking, driving, cycling accessibility</li> <li>Building-level Analysis: Demographics at building footprint level</li> <li>Network Centrality: Identify key community connection points</li> <li>Advanced Isochrones: More sophisticated accessibility modeling</li> </ol>"},{"location":"features/network-analysis/#performance-metrics-from-demo","title":"\u26a1 Performance Metrics from Demo","text":"Operation Time Details Graph Creation 1.01s Corvallis drive network (1,862 nodes, 4,911 edges) Geometry Download &lt;1s each POIs, buildings, parks Betweenness Centrality 2.43s 15K+ node pedestrian network Routing &lt;0.002s Multiple algorithms Visualization &lt;5s High-quality network plot"},{"location":"features/network-analysis/#key-features-for-community-analysis","title":"\ud83c\udfaf Key Features for Community Analysis","text":""},{"location":"features/network-analysis/#what-socialmapper-gains","title":"What SocialMapper Gains","text":"<ul> <li>Speed: 2-5x faster data processing</li> <li>Scale: Handle larger cities and regions</li> <li>Accuracy: Better geometric and network precision</li> <li>Features: Access to building footprints, multi-modal networks</li> <li>Reliability: Production-ready error handling</li> </ul>"},{"location":"features/network-analysis/#research-planning-applications","title":"Research &amp; Planning Applications","text":"<ul> <li>Urban Form Analysis: Street pattern and orientation studies</li> <li>Accessibility Modeling: Multi-modal community resource access</li> <li>Network Analysis: Identify critical infrastructure connections</li> <li>Demographics Mapping: Building-level population analysis</li> </ul>"},{"location":"features/network-analysis/#next-steps","title":"\ud83d\ude80 Next Steps","text":"<ol> <li>Integration: Incorporate OSMnx 2.0+ features into SocialMapper core</li> <li>Testing: Validate performance improvements across different city sizes</li> <li>Features: Explore building footprint integration for demographics</li> <li>Documentation: Update guides with new capabilities</li> </ol> <p>Conclusion: OSMnx 2.0+ represents a major leap forward in geospatial network analysis, providing SocialMapper with cutting-edge capabilities for community mapping and demographic analysis. The combination of performance improvements, new features, and better reliability makes this upgrade essential for modern community analytics. </p>"},{"location":"getting-started/","title":"Getting Started with SocialMapper","text":"<p>Welcome to SocialMapper! This section will help you get up and running quickly with community demographic analysis.</p>"},{"location":"getting-started/#quick-navigation","title":"Quick Navigation","text":""},{"location":"getting-started/#installation","title":"\ud83d\ude80 Installation","text":"<p>Learn how to install SocialMapper on your system.</p>"},{"location":"getting-started/#quick-start-guide","title":"\u26a1 Quick Start Guide","text":"<p>Create your first community analysis in minutes.</p>"},{"location":"getting-started/#choose-your-path","title":"Choose Your Path","text":""},{"location":"getting-started/#im-new-to-programming","title":"I'm New to Programming","text":"<p>Start here if you're new to Python:</p> <ol> <li>Follow the Installation Guide for setup help</li> <li>Try the Quick Start Guide for your first analysis</li> <li>Use the command line interface - no coding required!</li> <li>Explore the examples</li> </ol>"},{"location":"getting-started/#im-a-python-developer","title":"I'm a Python Developer","text":"<p>Jump right in if you're comfortable with Python:</p> <ol> <li><code>pip install socialmapper</code> - Quick installation</li> <li>Check the API Reference for detailed usage</li> <li>Review examples</li> <li>Explore advanced features like address geocoding</li> </ol>"},{"location":"getting-started/#im-a-researcheranalyst","title":"I'm a Researcher/Analyst","text":"<p>Focus on analysis capabilities:</p> <ol> <li>Review common use cases to understand applications</li> <li>Learn about demographic variables</li> <li>Understand travel time analysis</li> <li>Master exporting results</li> </ol>"},{"location":"getting-started/#what-youll-learn","title":"What You'll Learn","text":"<p>By the end of this section, you'll be able to:</p> <ul> <li>\u2705 Install and configure SocialMapper</li> <li>\u2705 Run your first analysis  </li> <li>\u2705 Find places and analyze accessibility</li> <li>\u2705 Work with census demographics</li> <li>\u2705 Export results for reports</li> </ul>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+ (we'll help you install it)</li> <li>Internet connection for data downloads</li> <li>No GIS experience needed!</li> </ul>"},{"location":"getting-started/#getting-help","title":"Getting Help","text":"<ul> <li>\ud83d\udcd6 Check the FAQ for common questions</li> <li>\ud83d\udd27 See Troubleshooting for issues</li> <li>\ud83d\udca1 Review examples</li> <li>\ud83d\udc1b Report bugs on GitHub</li> </ul> <p>Ready to begin? Start with Installation \u2192</p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide covers multiple ways to install SocialMapper depending on your needs and experience level.</p>"},{"location":"getting-started/installation/#quick-installation","title":"Quick Installation","text":"uv (Recommended)pip (Alternative)conda <pre><code>uv pip install socialmapper\n</code></pre> <pre><code>pip install socialmapper\n</code></pre> <pre><code># Add conda-forge channel if not already added\nconda config --add channels conda-forge\n\n# Install SocialMapper\nconda install socialmapper\n</code></pre>"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":""},{"location":"getting-started/installation/#python-version","title":"Python Version","text":"<ul> <li>Python 3.11+ (minimum required)</li> <li>Python 3.12 (recommended for best performance)</li> <li>Python 3.13 (latest, fully supported)</li> </ul>"},{"location":"getting-started/installation/#operating-systems","title":"Operating Systems","text":"<ul> <li>\u2705 Windows 10/11</li> <li>\u2705 macOS 10.15+ (Intel and Apple Silicon)</li> <li>\u2705 Linux (Ubuntu 20.04+, CentOS 8+, and others)</li> </ul>"},{"location":"getting-started/installation/#hardware-recommendations","title":"Hardware Recommendations","text":"<ul> <li>RAM: 4GB minimum, 8GB+ recommended</li> <li>Storage: 1GB free space (for cache and outputs)</li> <li>Internet: Required for data downloads</li> </ul>"},{"location":"getting-started/installation/#installation-options","title":"Installation Options","text":""},{"location":"getting-started/installation/#option-1-standard-installation","title":"Option 1: Standard Installation","text":"<p>For most users, the standard installation provides all core features:</p> <pre><code>uv pip install socialmapper\n</code></pre>"},{"location":"getting-started/installation/#option-2-development-installation-with-enhanced-features","title":"Option 2: Development Installation with Enhanced Features","text":"<p>For development work and extended functionality:</p> <pre><code>uv pip install socialmapper[dev]\n</code></pre> <p>This includes additional dependencies for: - \ud83d\udd27 Development tools (testing, linting, formatting) - \ud83d\udcca Enhanced analysis capabilities - \ud83c\udfa8 Rich terminal UI features</p>"},{"location":"getting-started/installation/#option-3-development-installation","title":"Option 3: Development Installation","text":"<p>For contributors and developers:</p> <pre><code># Clone the repository\ngit clone https://github.com/mihiarc/socialmapper.git\ncd socialmapper\n\n# Install in development mode with all dependencies\nuv pip install -e .[dev]\n</code></pre>"},{"location":"getting-started/installation/#option-4-minimal-installation","title":"Option 4: Minimal Installation","text":"<p>Note: The <code>[minimal]</code> extra is not currently available. The standard installation already provides a lightweight experience.</p>"},{"location":"getting-started/installation/#dependency-management","title":"Dependency Management","text":""},{"location":"getting-started/installation/#using-uv-recommended","title":"Using uv (Recommended)","text":"<p>According to a memory from a past conversation, you should use 'uv' as the package management tool for installing and managing Python dependencies in this project instead of pip.</p> <pre><code># Install uv\npip install uv\n\n# Create a new project with SocialMapper\nuv init my-socialmapper-project\ncd my-socialmapper-project\nuv add socialmapper\n\n# Or add to existing project\nuv add socialmapper\n</code></pre>"},{"location":"getting-started/installation/#using-pip-with-virtual-environments","title":"Using pip with virtual environments","text":"<pre><code># Create virtual environment\npython -m venv socialmapper-env\n\n# Activate (Windows)\nsocialmapper-env\\Scripts\\activate\n\n# Activate (macOS/Linux)\nsource socialmapper-env/bin/activate\n\n# Install SocialMapper\npip install socialmapper\n</code></pre>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<p>Test your installation with these commands:</p> <pre><code># Check version\nuv run python -c \"import socialmapper; print(socialmapper.__version__)\"\n\n# Run help command\nuv run socialmapper --help\n\n# Quick test (requires internet)\nuv run python -c \"from socialmapper import run_socialmapper; print('\u2705 Installation successful!')\"\n</code></pre>"},{"location":"getting-started/installation/#optional-api-keys","title":"Optional: API Keys","text":"<p>While SocialMapper works without API keys, some features are enhanced with them:</p>"},{"location":"getting-started/installation/#census-bureau-api-key-recommended","title":"Census Bureau API Key (Recommended)","text":"<ul> <li>Benefit: Faster census data downloads</li> <li>Get key: Census API Registration</li> <li>Setup: <code>export CENSUS_API_KEY=\"your_key_here\"</code></li> </ul>"},{"location":"getting-started/installation/#google-maps-api-key-optional","title":"Google Maps API Key (Optional)","text":"<ul> <li>Benefit: Enhanced geocoding accuracy</li> <li>Get key: Google Cloud Console</li> <li>Setup: <code>export GOOGLE_MAPS_API_KEY=\"your_key_here\"</code></li> </ul>"},{"location":"getting-started/installation/#common-installation-issues","title":"Common Installation Issues","text":""},{"location":"getting-started/installation/#issue-no-module-named-socialmapper","title":"Issue: \"No module named 'socialmapper'\"","text":"<p>Solution: <pre><code># Ensure you're in the right environment\nwhich python\npip list | grep socialmapper\n\n# Reinstall if needed\npip uninstall socialmapper\npip install socialmapper\n</code></pre></p>"},{"location":"getting-started/installation/#issue-dependency-conflicts","title":"Issue: Dependency conflicts","text":"<p>Solution: Use a fresh virtual environment: <pre><code>python -m venv fresh-env\nsource fresh-env/bin/activate  # or fresh-env\\Scripts\\activate on Windows\npip install socialmapper\n</code></pre></p>"},{"location":"getting-started/installation/#issue-networkssl-errors","title":"Issue: Network/SSL errors","text":"<p>Solution: Update certificates and try again: <pre><code># macOS\n/Applications/Python\\ 3.x/Install\\ Certificates.command\n\n# Or use trusted hosts\npip install --trusted-host pypi.org --trusted-host pypi.python.org socialmapper\n</code></pre></p>"},{"location":"getting-started/installation/#issue-permission-errors-linuxmacos","title":"Issue: Permission errors (Linux/macOS)","text":"<p>Solution: Use user installation: <pre><code>pip install --user socialmapper\n</code></pre></p>"},{"location":"getting-started/installation/#issue-missing-system-dependencies-linux","title":"Issue: Missing system dependencies (Linux)","text":"<p>Solution: Install system packages: <pre><code># Ubuntu/Debian\nsudo apt-get update\nsudo apt-get install python3-dev python3-pip build-essential\n\n# CentOS/RHEL\nsudo yum install python3-devel python3-pip gcc\n</code></pre></p>"},{"location":"getting-started/installation/#platform-specific-notes","title":"Platform-Specific Notes","text":""},{"location":"getting-started/installation/#windows","title":"Windows","text":"<ul> <li>Use Command Prompt or PowerShell (avoid Git Bash for installation)</li> <li>Consider Windows Subsystem for Linux (WSL) for a Linux-like experience</li> <li>Visual Studio Build Tools may be needed for some dependencies</li> </ul>"},{"location":"getting-started/installation/#macos","title":"macOS","text":"<ul> <li>Xcode Command Line Tools required: <code>xcode-select --install</code></li> <li>Homebrew recommended for Python management: <code>brew install python</code></li> <li>Apple Silicon (M1/M2): All dependencies are compatible</li> </ul>"},{"location":"getting-started/installation/#linux","title":"Linux","text":"<ul> <li>Most distributions include Python, but you may need <code>python3-pip</code></li> <li>GDAL and spatial libraries are included in the package</li> <li>Build tools (<code>gcc</code>, <code>make</code>) may be required</li> </ul>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>After successful installation:</p> <ol> <li>\ud83d\udcd6 Read the Quick Start Guide</li> <li>\ud83c\udfaf Explore the Examples</li> <li>\ud83d\udcbb Learn about Finding Places</li> <li>\ud83d\udd27 Get a Census API key (optional)</li> </ol>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>\ud83d\udcda Check this documentation</li> <li>\ud83d\udd0d Search GitHub Issues</li> <li>\ud83d\udc1b Report new issues with:</li> <li>Your Python version (<code>python --version</code>)</li> <li>Your OS and version</li> <li>Complete error messages</li> <li>Installation method used</li> </ol> <p>Ready to start? Continue to the Quick Start Guide! </p>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>Get up and running with SocialMapper in minutes! This guide will walk you through your first analysis.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11 or higher installed</li> <li>Internet connection for downloading data</li> <li>(Optional) Census API key for enhanced data</li> </ul>"},{"location":"getting-started/quick-start/#installation","title":"Installation","text":"<pre><code>pip install socialmapper\n</code></pre>"},{"location":"getting-started/quick-start/#your-first-analysis","title":"Your First Analysis","text":"<p>Let's analyze library accessibility in a community:</p>"},{"location":"getting-started/quick-start/#1-basic-command-line-usage","title":"1. Basic Command Line Usage","text":"<pre><code>socialmapper analyze --state \"North Carolina\" --county \"Wake County\" \\\n  --place-type \"library\" --travel-time 15\n</code></pre>"},{"location":"getting-started/quick-start/#2-python-script","title":"2. Python Script","text":"<p>Create a file <code>my_first_analysis.py</code>:</p> <pre><code>from socialmapper import run_socialmapper\n\n# Analyze library accessibility\nresults = run_socialmapper(\n    state=\"North Carolina\",\n    county=\"Wake County\",\n    place_type=\"library\",\n    travel_time=15,\n    census_variables=[\"total_population\", \"median_household_income\"],\n    export_csv=True\n)\n\n# Display results\nprint(f\"Found {len(results['poi_data'])} libraries\")\nprint(f\"Analyzed {len(results['census_data'])} census block groups\")\n</code></pre> <p>Run it: <pre><code>python my_first_analysis.py\n</code></pre></p>"},{"location":"getting-started/quick-start/#understanding-the-results","title":"Understanding the Results","text":"<p>After running the analysis, you'll get:</p> <ol> <li>POI Data - Information about each library found</li> <li>Census Data - Demographics of areas within travel time</li> <li>CSV Files - Detailed data exported to <code>output/csv/</code></li> <li>Maps (optional) - Visualizations in <code>output/maps/</code></li> </ol>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":""},{"location":"getting-started/quick-start/#try-different-poi-types","title":"Try Different POI Types","text":"<pre><code># Schools\nresults = run_socialmapper(\n    state=\"California\",\n    county=\"Los Angeles County\",\n    place_type=\"school\",\n    travel_time=10\n)\n\n# Healthcare facilities\nresults = run_socialmapper(\n    state=\"Texas\",\n    county=\"Harris County\",\n    place_type=\"hospital\",\n    travel_time=20\n)\n</code></pre>"},{"location":"getting-started/quick-start/#use-custom-locations","title":"Use Custom Locations","text":"<p>Create a CSV file <code>my_locations.csv</code>: <pre><code>name,latitude,longitude\nCommunity Center,35.7796,-78.6382\nCity Park,35.7821,-78.6589\n</code></pre></p> <p>Then analyze: <pre><code>results = run_socialmapper(\n    custom_coords_path=\"my_locations.csv\",\n    travel_time=15,\n    census_variables=[\"total_population\"]\n)\n</code></pre></p>"},{"location":"getting-started/quick-start/#add-more-census-variables","title":"Add More Census Variables","text":"<pre><code># Detailed demographic analysis\ncensus_vars = [\n    \"total_population\",\n    \"median_age\",\n    \"median_household_income\",\n    \"percent_poverty\",\n    \"percent_without_vehicle\"\n]\n\nresults = run_socialmapper(\n    state=\"New York\",\n    county=\"New York County\",\n    place_type=\"park\",\n    travel_time=10,\n    census_variables=census_vars\n)\n</code></pre>"},{"location":"getting-started/quick-start/#common-patterns","title":"Common Patterns","text":""},{"location":"getting-started/quick-start/#batch-analysis","title":"Batch Analysis","text":"<pre><code># Analyze multiple POI types\npoi_types = ['library', 'school', 'hospital', 'park']\n\nfor poi_type in poi_types:\n    print(f\"\\nAnalyzing {poi_type}s...\")\n    results = run_socialmapper(\n        state=\"Washington\",\n        county=\"King County\",\n        place_type=poi_type,\n        travel_time=15\n    )\n    print(f\"Found {len(results['poi_data'])} {poi_type}s\")\n</code></pre>"},{"location":"getting-started/quick-start/#different-travel-times","title":"Different Travel Times","text":"<pre><code># Compare accessibility at different time intervals\nfor minutes in [5, 10, 15, 20, 30]:\n    results = run_socialmapper(\n        state=\"Colorado\",\n        county=\"Denver County\",\n        place_type=\"grocery_store\",\n        travel_time=minutes\n    )\n    total_pop = sum(r['total_population'] for r in results['census_data'])\n    print(f\"{minutes} minutes: {total_pop:,} people\")\n</code></pre>"},{"location":"getting-started/quick-start/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quick-start/#no-results-found","title":"No Results Found?","text":"<ul> <li>Check spelling of state/county names</li> <li>Try a different POI type</li> <li>Ensure internet connection is active</li> </ul>"},{"location":"getting-started/quick-start/#slow-performance","title":"Slow Performance?","text":"<ul> <li>First runs build caches (normal)</li> <li>Reduce number of census variables</li> <li>Use smaller geographic areas</li> </ul>"},{"location":"getting-started/quick-start/#memory-issues","title":"Memory Issues?","text":"<ul> <li>Process one county at a time</li> <li>Limit census variables</li> <li>Close other applications</li> </ul>"},{"location":"getting-started/quick-start/#learn-more","title":"Learn More","text":"<ul> <li>Examples Directory - Complete working examples</li> <li>API Reference - Detailed function reference</li> <li>Command Line Guide - All CLI options</li> <li>User Guide - Understanding the features</li> </ul> <p>Ready for more? Check out our tutorials for step-by-step guides!</p>"},{"location":"reference/census-variables/","title":"Census Variables Reference","text":"<p>This page provides a complete reference of all census variables available in SocialMapper. These variables can be used with the <code>--census-variables</code> CLI option or the <code>census_variables</code> parameter in the Python API.</p>"},{"location":"reference/census-variables/#variable-usage","title":"Variable Usage","text":"<p>Census variables can be specified using either their human-readable names or their official U.S. Census Bureau variable codes:</p> <pre><code># Using human-readable names\nsocialmapper --location \"Portland, OR\" --poi amenity:library --census-variables population median_income\n\n# Using census codes\nsocialmapper --location \"Portland, OR\" --poi amenity:library --census-variables B01003_001E B19013_001E\n\n# Mixing both formats\nsocialmapper --location \"Portland, OR\" --poi amenity:library --census-variables total_population B19013_001E\n</code></pre>"},{"location":"reference/census-variables/#available-variables","title":"Available Variables","text":""},{"location":"reference/census-variables/#population-metrics","title":"Population Metrics","text":"Human-Readable Name Census Code Description <code>population</code> B01003_001E Total population count <code>total_population</code> B01003_001E Total population count (alias)"},{"location":"reference/census-variables/#economic-indicators","title":"Economic Indicators","text":"Human-Readable Name Census Code Description <code>median_income</code> B19013_001E Median household income in the past 12 months (in inflation-adjusted dollars) <code>median_household_income</code> B19013_001E Median household income (alias) <code>percent_poverty</code> B17001_002E Population for whom poverty status is determined"},{"location":"reference/census-variables/#housing-characteristics","title":"Housing Characteristics","text":"Human-Readable Name Census Code Description <code>households</code> B11001_001E Total number of households <code>housing_units</code> B25001_001E Total housing units <code>median_home_value</code> B25077_001E Median value of owner-occupied housing units"},{"location":"reference/census-variables/#demographic-characteristics","title":"Demographic Characteristics","text":"Human-Readable Name Census Code Description <code>median_age</code> B01002_001E Median age of the population <code>white_population</code> B02001_002E White alone population <code>black_population</code> B02001_003E Black or African American alone population <code>hispanic_population</code> B03003_003E Hispanic or Latino population"},{"location":"reference/census-variables/#education","title":"Education","text":"Human-Readable Name Census Code Description <code>education_bachelors_plus</code> B15003_022E Population 25 years and over with a bachelor's degree or higher"},{"location":"reference/census-variables/#transportation","title":"Transportation","text":"Human-Readable Name Census Code Description <code>percent_without_vehicle</code> B25044_003E + B25044_010E Households without a vehicle available (calculated) <code>households_no_vehicle</code> B25044_003E + B25044_010E Households without a vehicle available (alias)"},{"location":"reference/census-variables/#calculated-variables","title":"Calculated Variables","text":"<p>Some variables are calculated from multiple census codes:</p> <ul> <li><code>percent_without_vehicle</code> / <code>households_no_vehicle</code>: Sum of owner-occupied households with no vehicle (B25044_003E) and renter-occupied households with no vehicle (B25044_010E)</li> </ul>"},{"location":"reference/census-variables/#data-source","title":"Data Source","text":"<p>All census data comes from the American Community Survey (ACS) 5-Year Estimates, which provides the most reliable data for small geographic areas. The default year is 2021, but data from 2019-2023 is available.</p>"},{"location":"reference/census-variables/#geographic-levels","title":"Geographic Levels","text":"<p>Census variables can be retrieved at different geographic levels:</p> <ul> <li>Block Group (default): The smallest geographic unit, typically containing 600-3,000 people</li> <li>ZIP Code Tabulation Area (ZCTA): Approximates ZIP code boundaries, useful for larger area analysis</li> </ul> <p>Use the <code>--geographic-level</code> option to specify:</p> <pre><code># Block group level (default)\nsocialmapper --location \"Portland, OR\" --poi amenity:library --census-variables population\n\n# ZCTA level\nsocialmapper --location \"Portland, OR\" --poi amenity:library --census-variables population --geographic-level zcta\n</code></pre>"},{"location":"reference/census-variables/#examples","title":"Examples","text":""},{"location":"reference/census-variables/#basic-demographic-analysis","title":"Basic demographic analysis","text":"<pre><code>socialmapper --location \"Austin, TX\" --poi amenity:school \\\n  --census-variables population median_age median_income\n</code></pre>"},{"location":"reference/census-variables/#equity-focused-analysis","title":"Equity-focused analysis","text":"<pre><code>socialmapper --location \"Chicago, IL\" --poi amenity:hospital \\\n  --census-variables percent_poverty households_no_vehicle median_income\n</code></pre>"},{"location":"reference/census-variables/#housing-market-analysis","title":"Housing market analysis","text":"<pre><code>socialmapper --location \"Seattle, WA\" --poi leisure:park \\\n  --census-variables median_home_value median_income households\n</code></pre>"},{"location":"reference/census-variables/#comprehensive-community-profile","title":"Comprehensive community profile","text":"<pre><code>socialmapper --location \"Boston, MA\" --poi amenity:library \\\n  --census-variables population median_age median_income \\\n  education_bachelors_plus percent_poverty\n</code></pre>"},{"location":"reference/census-variables/#python-api-usage","title":"Python API Usage","text":"<p>When using the Python API, census variables work the same way:</p> <pre><code>from socialmapper import SocialMapperClient\n\nwith SocialMapperClient() as client:\n    result = client.analyze(\n        location=\"Portland, OR\",\n        poi_type=\"amenity\",\n        poi_name=\"library\",\n        census_variables=[\"population\", \"median_income\", \"B01002_001E\"]  # Mix of formats\n    )\n</code></pre>"},{"location":"reference/census-variables/#notes","title":"Notes","text":"<ul> <li>Variable names are case-insensitive (<code>population</code> and <code>POPULATION</code> are equivalent)</li> <li>The system automatically handles both human-readable names and census codes</li> <li>All monetary values are in inflation-adjusted dollars for the survey year</li> <li>Some variables may have null values for certain geographic areas due to data suppression or small sample sizes</li> </ul>"},{"location":"reference/travel-speeds/","title":"Travel Speed Reference","text":"<p>This page provides detailed information about how SocialMapper assigns travel speeds for accurate isochrone generation.</p>"},{"location":"reference/travel-speeds/#overview","title":"Overview","text":"<p>SocialMapper uses OSMnx 2.0's sophisticated speed assignment system to calculate realistic travel times. The system considers both real-world speed limit data from OpenStreetMap and intelligent fallbacks based on road types and travel modes.</p>"},{"location":"reference/travel-speeds/#speed-assignment-hierarchy","title":"Speed Assignment Hierarchy","text":"<p>When generating isochrones, OSMnx assigns edge speeds using this priority order:</p> <ol> <li>OSM maxspeed tags - Uses actual speed limits from OpenStreetMap data when available</li> <li>Highway-type speeds - Falls back to our configured speeds for each road type</li> <li>Statistical imputation - For unmapped highway types, uses the mean speed of similar roads in the network</li> <li>Mode-specific fallback - As a last resort, uses the travel mode's default speed</li> </ol>"},{"location":"reference/travel-speeds/#travel-mode-speeds","title":"Travel Mode Speeds","text":""},{"location":"reference/travel-speeds/#driving-mode","title":"Driving Mode","text":"<p>Default fallback speed: 50 km/h (31 mph)</p> Highway Type Speed (km/h) Speed (mph) Description motorway 110 68 Highways/freeways motorway_link 70 43 Highway on/off ramps trunk 90 56 Major arterial roads trunk_link 50 31 Major road ramps primary 65 40 Primary roads primary_link 40 25 Primary road connectors secondary 55 34 Secondary roads secondary_link 35 22 Secondary road connectors tertiary 45 28 Local connector roads tertiary_link 30 19 Tertiary road connectors residential 30 19 Neighborhood streets living_street 20 12 Shared residential spaces service 25 16 Service/access roads unclassified 40 25 Unclassified roads road 40 25 Unknown road types"},{"location":"reference/travel-speeds/#walking-mode","title":"Walking Mode","text":"<p>Default fallback speed: 5 km/h (3.1 mph)</p> Path Type Speed (km/h) Speed (mph) Description footway 5.0 3.1 Dedicated pedestrian paths sidewalk 5.0 3.1 Sidewalks along roads pedestrian 5.0 3.1 Pedestrian areas residential 4.8 3.0 Residential streets (may lack sidewalks) tertiary 4.8 3.0 Less busy roads path 4.5 2.8 General paths (may be rough) living_street 4.5 2.8 Shared spaces, need caution service 4.5 2.8 Service roads primary 4.5 2.8 Busy roads may slow walking secondary 4.5 2.8 Busy roads trunk 4.0 2.5 Very busy roads, often no sidewalk motorway 3.0 1.9 Highways (rarely walkable) steps 1.5 0.9 Stairs are very slow"},{"location":"reference/travel-speeds/#biking-mode","title":"Biking Mode","text":"<p>Default fallback speed: 15 km/h (9.3 mph)</p> Path Type Speed (km/h) Speed (mph) Description primary 20.0 12.4 Good roads, higher speeds cycleway 18.0 11.2 Dedicated bike lanes secondary 18.0 11.2 Moderate traffic tertiary 16.0 9.9 Light traffic residential 15.0 9.3 Residential streets trunk 15.0 9.3 May be dangerous/restricted path 12.0 7.5 Shared paths service 12.0 7.5 Service roads living_street 10.0 6.2 Shared spaces motorway 10.0 6.2 Highways (if allowed) footway 8.0 5.0 Shared with pedestrians pedestrian 8.0 5.0 Pedestrian areas"},{"location":"reference/travel-speeds/#implementation-details","title":"Implementation Details","text":""},{"location":"reference/travel-speeds/#code-example","title":"Code Example","text":"<p>Here's how travel speeds are applied during network processing:</p> <pre><code>from socialmapper.isochrone.travel_modes import (\n    TravelMode, \n    get_highway_speeds,\n    get_default_speed\n)\nimport osmnx as ox\n\n# Get mode-specific configuration\ntravel_mode = TravelMode.DRIVE\nhighway_speeds = get_highway_speeds(travel_mode)\nfallback_speed = get_default_speed(travel_mode)\n\n# Download and process network\nG = ox.graph_from_point(\n    (latitude, longitude),\n    network_type=\"drive\",\n    dist=5000\n)\n\n# Apply speeds with OSMnx 2.0's intelligent assignment\nG = ox.add_edge_speeds(\n    G, \n    hwy_speeds=highway_speeds,  # Our highway-type speeds\n    fallback=fallback_speed     # Last resort fallback\n)\nG = ox.add_edge_travel_times(G)\n</code></pre>"},{"location":"reference/travel-speeds/#speed-data-quality","title":"Speed Data Quality","text":"<p>The accuracy of isochrone boundaries depends on the quality of OpenStreetMap data in your area:</p> <ul> <li>Areas with good coverage: Most edges will have actual speed limits, resulting in highly accurate isochrones</li> <li>Areas with sparse coverage: The system falls back to highway-type speeds, which still provide reasonable estimates</li> <li>Rural or unmapped areas: May rely more heavily on statistical imputation and fallback speeds</li> </ul>"},{"location":"reference/travel-speeds/#customizing-speeds","title":"Customizing Speeds","text":"<p>While SocialMapper's default speeds are based on typical real-world conditions, you may need to adjust them for specific use cases:</p> <ul> <li>Urban congestion: Reduce speeds during peak hours</li> <li>Rural areas: May have higher actual speeds than defaults</li> <li>Special conditions: Weather, construction, or events affecting travel</li> </ul> <p>Currently, speed customization requires modifying the source code in <code>socialmapper/isochrone/travel_modes.py</code>.</p>"},{"location":"reference/travel-speeds/#speed-validation","title":"Speed Validation","text":"<p>SocialMapper enforces speed limits for each travel mode:</p> Mode Minimum Speed Maximum Speed Walk 3.0 km/h (1.9 mph) 7.0 km/h (4.3 mph) Bike 8.0 km/h (5.0 mph) 30.0 km/h (18.6 mph) Drive 20.0 km/h (12.4 mph) 130.0 km/h (80.8 mph) <p>These limits prevent unrealistic speed assignments that could distort isochrone boundaries.</p>"},{"location":"reference/travel-speeds/#see-also","title":"See Also","text":"<ul> <li>Travel Time Analysis - Using isochrones in analysis</li> <li>Travel Modes Tutorial - Practical examples</li> <li>OSMnx Documentation - Detailed routing information</li> </ul>"},{"location":"tutorials/","title":"Tutorials","text":"<p>Welcome to the SocialMapper tutorials! These hands-on examples will guide you through common use cases and demonstrate the full capabilities of the toolkit.</p>"},{"location":"tutorials/#available-tutorials","title":"Available Tutorials","text":""},{"location":"tutorials/#1-getting-started-tutorial","title":"1. Getting Started Tutorial","text":"<p>Example code: <code>01_getting_started.py</code></p> <p>Learn the basics of SocialMapper by analyzing library accessibility in Raleigh, NC. This tutorial covers: - Finding points of interest (POIs) from OpenStreetMap - Generating travel time isochrones - Creating demographic analysis - Exporting results</p>"},{"location":"tutorials/#2-getting-started-with-maps","title":"2. Getting Started with Maps","text":"<p>Example code: <code>01_getting_started_with_maps.py</code></p> <p>Enhanced version of the getting started tutorial that includes choropleth map generation: - Creating professional choropleth maps - Visualizing demographic patterns - Customizing map appearance - Exporting high-quality visualizations</p>"},{"location":"tutorials/#3-custom-points-of-interest","title":"3. Custom Points of Interest","text":"<p>Example code: <code>02_custom_pois.py</code></p> <p>Discover how to work with your own location data instead of OpenStreetMap queries. This tutorial demonstrates: - Loading custom POI data from CSV files - Geocoding addresses - Analyzing accessibility for custom locations - Combining custom and OpenStreetMap data</p>"},{"location":"tutorials/#4-travel-modes","title":"4. Travel Modes","text":"<p>Example code: <code>03_travel_modes.py</code></p> <p>Explore different transportation modes for accessibility analysis. This tutorial covers: - Walking, driving, and biking isochrones - Comparing accessibility across travel modes - Understanding mode-specific network constraints - Customizing travel parameters</p>"},{"location":"tutorials/#5-zip-code-zcta-analysis","title":"5. ZIP Code (ZCTA) Analysis","text":"<p>Example code: <code>04_zipcode_analysis.py</code></p> <p>Analyze demographics at the ZIP Code Tabulation Area (ZCTA) level. This tutorial covers: - Understanding ZCTAs vs block groups - Fetching ZCTA boundaries and census data - Batch processing multiple states - Choosing the right geographic unit for your analysis</p>"},{"location":"tutorials/#6-address-geocoding","title":"6. Address Geocoding","text":"<p>Example code: <code>05_address_geocoding.py</code></p> <p>Convert street addresses into geographic coordinates for analysis. This tutorial demonstrates: - Single and batch address geocoding - Understanding quality levels and providers - Error handling for problematic addresses - Creating custom POI datasets from address lists - Integration with demographic analysis</p>"},{"location":"tutorials/#running-the-tutorials","title":"Running the Tutorials","text":"<p>All tutorials are located in the <code>examples/tutorials/</code> directory of the SocialMapper repository. To run a tutorial:</p> <ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/mihiarc/socialmapper.git\ncd socialmapper\n</code></pre></p> </li> <li> <p>Install SocialMapper:    <pre><code>pip install -e \".[dev]\"\n</code></pre></p> </li> <li> <p>Set up your Census API key:    <pre><code>export CENSUS_API_KEY=\"your-key-here\"\n</code></pre></p> </li> <li> <p>Navigate to the tutorials directory:    <pre><code>cd examples/tutorials\n</code></pre></p> </li> <li> <p>Run any tutorial:    <pre><code>python 01_getting_started.py\n</code></pre></p> </li> </ol>"},{"location":"tutorials/#tutorial-data","title":"Tutorial Data","text":"<p>The tutorials create their own sample data as needed. Output from the tutorials will be saved in: - <code>output/csv/</code>: Demographic and analysis results in CSV format - <code>output/isochrones/</code>: Generated travel time visualizations - <code>cache/</code>: Cached geocoding and network data for faster re-runs</p> <p>Each tutorial creates its own subdirectory in the output folder to keep results organized.</p>"},{"location":"tutorials/#tips-for-success","title":"Tips for Success","text":"<ol> <li>API Key: Make sure your Census API key is properly configured before running tutorials</li> <li>Dependencies: Some tutorials may require additional data downloads on first run</li> <li>Caching: Tutorials use caching to speed up repeated runs - clear the cache directory if you need fresh data</li> <li>Customization: Feel free to modify the tutorials to explore your own areas of interest</li> </ol>"},{"location":"tutorials/#next-steps","title":"Next Steps","text":"<p>After completing these tutorials, you'll be ready to: - Analyze accessibility in your own community - Create custom demographic studies - Build interactive applications with SocialMapper - Contribute to the SocialMapper project</p> <p>For more information, see the User Guide and API Reference.</p>"},{"location":"tutorials/address-geocoding-tutorial/","title":"Address Geocoding Tutorial","text":"<p>This tutorial teaches you how to convert street addresses into geographic coordinates (latitude/longitude) for spatial analysis. Address geocoding is essential when you have location data as addresses rather than coordinates.</p>"},{"location":"tutorials/address-geocoding-tutorial/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>Converting single addresses to coordinates</li> <li>Batch processing multiple addresses efficiently</li> <li>Understanding geocoding quality levels</li> <li>Choosing between geocoding providers</li> <li>Integrating geocoded addresses with SocialMapper</li> <li>Handling errors and edge cases</li> </ul>"},{"location":"tutorials/address-geocoding-tutorial/#why-use-address-geocoding","title":"Why Use Address Geocoding?","text":"<p>Address geocoding enables you to: - Convert address lists into mappable coordinates - Analyze service accessibility by street address - Integrate business locations with demographic data - Create custom POI datasets from address databases</p>"},{"location":"tutorials/address-geocoding-tutorial/#available-providers","title":"Available Providers","text":"<p>SocialMapper includes two geocoding providers:</p> Provider Coverage Best For Limitations Nominatim Global General use, international addresses Rate limits on free tier Census Bureau US only High accuracy for US addresses US addresses only <p>The system automatically falls back between providers for best results.</p>"},{"location":"tutorials/address-geocoding-tutorial/#getting-started","title":"Getting Started","text":""},{"location":"tutorials/address-geocoding-tutorial/#import-required-components","title":"Import Required Components","text":"<pre><code>from socialmapper.geocoding import (\n    geocode_address, \n    geocode_addresses, \n    AddressInput, \n    GeocodingConfig, \n    AddressProvider, \n    AddressQuality\n)\n</code></pre>"},{"location":"tutorials/address-geocoding-tutorial/#example-1-single-address-geocoding","title":"Example 1: Single Address Geocoding","text":"<p>Let's start by geocoding a famous address:</p> <pre><code># Create address input\naddress = AddressInput(\n    address=\"1600 Pennsylvania Avenue NW, Washington, DC 20500\",\n    id=\"white_house\",\n    source=\"tutorial\"\n)\n\n# Configure geocoding\nconfig = GeocodingConfig(\n    primary_provider=AddressProvider.NOMINATIM,\n    fallback_providers=[AddressProvider.CENSUS],\n    min_quality_threshold=AddressQuality.APPROXIMATE\n)\n\n# Geocode the address\nresult = geocode_address(address, config)\n\nif result.success:\n    print(f\"Coordinates: {result.latitude:.6f}, {result.longitude:.6f}\")\n    print(f\"Quality: {result.quality.value}\")\n    print(f\"Confidence: {result.confidence_score:.2f}\")\n    print(f\"Provider: {result.provider_used.value}\")\nelse:\n    print(f\"Failed: {result.error_message}\")\n</code></pre> <p>Output: <pre><code>Coordinates: 38.897700, -77.036553\nQuality: approximate\nConfidence: 1.00\nProvider: nominatim\n</code></pre></p>"},{"location":"tutorials/address-geocoding-tutorial/#understanding-quality-levels","title":"Understanding Quality Levels","text":"<p>Geocoding results have different quality levels based on precision:</p> <pre><code># Test different address types\ntest_addresses = [\n    \"1600 Pennsylvania Avenue NW, Washington, DC 20500\",  # Street address\n    \"Washington, DC\",                                      # City level\n    \"North Carolina\"                                       # State level\n]\n\nfor addr in test_addresses:\n    address = AddressInput(address=addr)\n    result = geocode_address(address, config)\n\n    if result.success:\n        print(f\"{addr[:30]:&lt;30} \u2192 Quality: {result.quality.value}\")\n</code></pre> <p>Output: <pre><code>1600 Pennsylvania Avenue NW, W \u2192 Quality: approximate\nWashington, DC                 \u2192 Quality: centroid\nNorth Carolina                 \u2192 Quality: approximate\n</code></pre></p>"},{"location":"tutorials/address-geocoding-tutorial/#quality-level-hierarchy","title":"Quality Level Hierarchy","text":"<ol> <li>EXACT: Precise rooftop or parcel-level match</li> <li>INTERPOLATED: Estimated along street segment</li> <li>APPROXIMATE: Near the location but not exact</li> <li>CENTROID: Geographic center of area (city/state)</li> </ol>"},{"location":"tutorials/address-geocoding-tutorial/#example-2-batch-address-processing","title":"Example 2: Batch Address Processing","text":"<p>Process multiple addresses efficiently:</p> <pre><code># North Carolina city halls\naddresses = [\n    \"100 N Tryon St, Charlotte, NC\",\n    \"301 E Hargett St, Raleigh, NC\", \n    \"120 E Main St, Durham, NC\",\n    \"100 N Greene St, Greensboro, NC\",\n    \"100 Coxe Ave, Asheville, NC\"\n]\n\n# Create address inputs\naddress_inputs = [\n    AddressInput(\n        address=addr,\n        id=f\"nc_{i}\",\n        source=\"city_halls\"\n    )\n    for i, addr in enumerate(addresses, 1)\n]\n\n# Configure for batch processing\nconfig = GeocodingConfig(\n    primary_provider=AddressProvider.CENSUS,  # Better for US addresses\n    fallback_providers=[AddressProvider.NOMINATIM],\n    min_quality_threshold=AddressQuality.APPROXIMATE,\n    enable_cache=True,\n    batch_size=3,\n    batch_delay_seconds=0.5  # Respect API rate limits\n)\n\n# Batch geocode\nresults = geocode_addresses(address_inputs, config, progress=True)\n\n# Analyze results\nsuccessful = [r for r in results if r.success]\nprint(f\"Successful: {len(successful)}/{len(results)} ({len(successful)/len(results)*100:.1f}%)\")\n</code></pre>"},{"location":"tutorials/address-geocoding-tutorial/#displaying-batch-results","title":"Displaying Batch Results","text":"<pre><code>import pandas as pd\nfrom tabulate import tabulate\n\n# Convert to DataFrame\ndata = []\nfor result in successful:\n    data.append({\n        'Address': result.input_address.address[:40],\n        'Latitude': f\"{result.latitude:.4f}\",\n        'Longitude': f\"{result.longitude:.4f}\",\n        'Quality': result.quality.value\n    })\n\ndf = pd.DataFrame(data)\nprint(tabulate(df, headers='keys', tablefmt='github', showindex=False))\n</code></pre> <p>Output: <pre><code>| Address                                 | Latitude  | Longitude | Quality     |\n|-----------------------------------------|-----------|-----------|-------------|\n| 100 N Tryon St, Charlotte, NC           | 35.2271   | -80.8431  | approximate |\n| 301 E Hargett St, Raleigh, NC           | 35.7804   | -78.6382  | approximate |\n| 120 E Main St, Durham, NC               | 35.9940   | -78.8986  | approximate |\n| 100 N Greene St, Greensboro, NC         | 36.0726   | -79.7920  | approximate |\n| 100 Coxe Ave, Asheville, NC             | 35.5951   | -82.5515  | approximate |\n</code></pre></p>"},{"location":"tutorials/address-geocoding-tutorial/#integration-with-socialmapper","title":"Integration with SocialMapper","text":"<p>Convert geocoded addresses into demographic analysis:</p> <pre><code># Save geocoded results to CSV\nimport pandas as pd\n\ndf = pd.DataFrame([{\n    'name': r.input_address.address.split(',')[0],\n    'latitude': r.latitude,\n    'longitude': r.longitude,\n    'address': r.input_address.address\n} for r in successful])\n\ndf.to_csv('output/geocoded_addresses.csv', index=False)\n\n# Use with SocialMapper\nfrom socialmapper import SocialMapperClient, SocialMapperBuilder\n\nwith SocialMapperClient() as client:\n    config = (SocialMapperBuilder()\n        .with_custom_pois('output/geocoded_addresses.csv')\n        .with_travel_time(15)\n        .with_census_variables(\"total_population\", \"median_household_income\")\n        .with_exports(csv=True)\n        .build()\n    )\n\n    result = client.run_analysis(config)\n\n    if result.is_ok():\n        analysis = result.unwrap()\n        print(f\"Analyzed {analysis.poi_count} geocoded locations\")\n        print(f\"Census data for {analysis.census_units_analyzed} areas\")\n</code></pre>"},{"location":"tutorials/address-geocoding-tutorial/#error-handling","title":"Error Handling","text":"<p>Handle common geocoding issues gracefully:</p> <pre><code># Test problematic addresses\nproblem_addresses = [\n    \"This is not a real address\",\n    \"123 Nonexistent Street, Nowhere, XX 99999\",\n    \"\",  # Empty address\n    \"Paris\"  # Ambiguous - which Paris?\n]\n\nfor addr in problem_addresses:\n    if not addr:\n        print(\"Empty address - skipping\")\n        continue\n\n    address = AddressInput(address=addr)\n    result = geocode_address(address, config)\n\n    if result.success:\n        print(f\"'{addr}' \u2192 {result.latitude:.4f}, {result.longitude:.4f}\")\n        print(f\"  \u26a0\ufe0f  Quality: {result.quality.value} - verify this is correct!\")\n    else:\n        print(f\"'{addr}' \u2192 Failed: {result.error_message}\")\n</code></pre>"},{"location":"tutorials/address-geocoding-tutorial/#configuration-patterns","title":"Configuration Patterns","text":""},{"location":"tutorials/address-geocoding-tutorial/#high-accuracy-us-addresses","title":"High-Accuracy US Addresses","text":"<p>For government or medical applications requiring precision:</p> <pre><code>config = GeocodingConfig(\n    primary_provider=AddressProvider.CENSUS,\n    min_quality_threshold=AddressQuality.EXACT,\n    require_country_match=True,\n    default_country='US'\n)\n</code></pre>"},{"location":"tutorials/address-geocoding-tutorial/#fast-processing-for-large-datasets","title":"Fast Processing for Large Datasets","text":"<p>When speed matters more than fallback options:</p> <pre><code>config = GeocodingConfig(\n    primary_provider=AddressProvider.NOMINATIM,\n    fallback_providers=[],  # No fallbacks for speed\n    min_quality_threshold=AddressQuality.APPROXIMATE,\n    batch_size=10,\n    batch_delay_seconds=0.1\n)\n</code></pre>"},{"location":"tutorials/address-geocoding-tutorial/#international-addresses","title":"International Addresses","text":"<p>For global address datasets:</p> <pre><code>config = GeocodingConfig(\n    primary_provider=AddressProvider.NOMINATIM,\n    require_country_match=False,\n    timeout_seconds=15,\n    max_retries=3\n)\n</code></pre>"},{"location":"tutorials/address-geocoding-tutorial/#best-practices","title":"Best Practices","text":"<ol> <li>Always validate results: Check <code>result.success</code> before using coordinates</li> <li>Set appropriate quality thresholds: </li> <li>Medical/Emergency: <code>EXACT</code> only</li> <li>Business analysis: <code>APPROXIMATE</code> or better</li> <li>Regional studies: <code>CENTROID</code> acceptable</li> <li>Use caching: Avoid re-geocoding the same addresses</li> <li>Respect rate limits: Add delays for batch processing</li> <li>Include fallback providers: Improve success rates</li> <li>Clean addresses first: Remove special characters, standardize format</li> </ol>"},{"location":"tutorials/address-geocoding-tutorial/#performance-tips","title":"Performance Tips","text":"<ul> <li>Enable caching: Geocoded addresses are cached automatically</li> <li>Batch processing: More efficient than individual requests</li> <li>Provider selection: Census for US, Nominatim for international</li> <li>Preprocess addresses: Clean and standardize before geocoding</li> </ul>"},{"location":"tutorials/address-geocoding-tutorial/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<p>Issue: \"No matches found\" - Solution: Simplify address, remove apartment numbers, check spelling</p> <p>Issue: \"Rate limit exceeded\" - Solution: Add delays, reduce batch size, enable caching</p> <p>Issue: \"Wrong location returned\" - Solution: Add state/country, check quality level, verify provider</p> <p>Issue: \"Timeout errors\" - Solution: Increase timeout, check internet connection, try fallback provider</p>"},{"location":"tutorials/address-geocoding-tutorial/#use-case-examples","title":"Use Case Examples","text":""},{"location":"tutorials/address-geocoding-tutorial/#business-locations-analysis","title":"Business Locations Analysis","text":"<pre><code># Geocode store locations and analyze demographics\nstore_addresses = pd.read_csv('store_locations.csv')\n# ... geocode and analyze with SocialMapper\n</code></pre>"},{"location":"tutorials/address-geocoding-tutorial/#service-accessibility-study","title":"Service Accessibility Study","text":"<pre><code># Convert clinic addresses to coordinates for travel time analysis\nclinic_addresses = load_clinic_addresses()\n# ... geocode and create isochrones\n</code></pre>"},{"location":"tutorials/address-geocoding-tutorial/#address-data-cleaning","title":"Address Data Cleaning","text":"<pre><code># Validate and standardize addresses through geocoding\nraw_addresses = get_customer_addresses()\n# ... geocode to get standardized formatted addresses\n</code></pre>"},{"location":"tutorials/address-geocoding-tutorial/#next-steps","title":"Next Steps","text":"<p>After completing this tutorial:</p> <ol> <li>Try geocoding your own address datasets</li> <li>Experiment with different quality thresholds</li> <li>Compare provider accuracy for your region</li> <li>Build complete address-to-demographics workflows</li> <li>Create custom POI datasets from address lists</li> </ol>"},{"location":"tutorials/address-geocoding-tutorial/#full-code","title":"Full Code","text":"<p>The complete tutorial script is available at: <code>examples/tutorials/05_address_geocoding.py</code></p>"},{"location":"tutorials/address-geocoding-tutorial/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Address geocoding bridges text addresses and geographic analysis</li> <li>Quality levels indicate precision - choose based on use case</li> <li>Batch processing is more efficient for multiple addresses</li> <li>Provider selection affects accuracy and coverage</li> <li>Integration with SocialMapper enables demographic analysis</li> <li>Proper error handling ensures robust workflows</li> </ul>"},{"location":"tutorials/custom-pois-tutorial/","title":"Custom POIs Tutorial","text":"<p>This tutorial demonstrates how to analyze your own points of interest instead of relying on OpenStreetMap data. This is particularly useful when you have specific locations like company offices, service locations, or custom datasets.</p>"},{"location":"tutorials/custom-pois-tutorial/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How to format your location data for SocialMapper</li> <li>Loading POIs from CSV files</li> <li>Analyzing multiple custom locations simultaneously</li> <li>Batch processing different POI types</li> <li>Comparing accessibility across custom locations</li> </ul>"},{"location":"tutorials/custom-pois-tutorial/#prerequisites","title":"Prerequisites","text":"<p>Before starting this tutorial:</p> <ol> <li>Complete Tutorial 01 to understand basic SocialMapper concepts</li> <li>Prepare your location data in CSV format (or use our example)</li> </ol>"},{"location":"tutorials/custom-pois-tutorial/#csv-format-requirements","title":"CSV Format Requirements","text":"<p>SocialMapper expects custom POI data in CSV format with specific columns:</p>"},{"location":"tutorials/custom-pois-tutorial/#required-columns","title":"Required Columns","text":"<ul> <li>name: The name of your point of interest</li> <li>latitude: Decimal latitude (e.g., 35.7796)</li> <li>longitude: Decimal longitude (e.g., -78.6382)</li> </ul>"},{"location":"tutorials/custom-pois-tutorial/#optional-columns","title":"Optional Columns","text":"<ul> <li>type: Category or type of POI (e.g., \"library\", \"office\", \"store\")</li> <li>address: Street address for reference</li> </ul>"},{"location":"tutorials/custom-pois-tutorial/#example-csv-file","title":"Example CSV File","text":"<p>Create a file named <code>custom_pois.csv</code>:</p> <pre><code>name,latitude,longitude,type,address\nCentral Library,35.7796,-78.6382,library,\"201 E Main St\"\nCity Park,35.7821,-78.6589,park,\"500 Park Ave\"\nCommunity Center,35.7754,-78.6434,community_center,\"100 Community Dr\"\nFood Bank,35.7889,-78.6444,social_service,\"456 Help St\"\nSenior Center,35.7701,-78.6521,social_service,\"789 Elder Way\"\n</code></pre>"},{"location":"tutorials/custom-pois-tutorial/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"tutorials/custom-pois-tutorial/#step-1-import-and-setup","title":"Step 1: Import and Setup","text":"<pre><code>from socialmapper import SocialMapperClient, SocialMapperBuilder\n</code></pre>"},{"location":"tutorials/custom-pois-tutorial/#step-2-configure-your-analysis","title":"Step 2: Configure Your Analysis","text":"<pre><code># Path to your CSV file\ncustom_coords_path = \"custom_pois.csv\"\n\n# Analysis parameters\ntravel_time = 10  # 10-minute walk\ncensus_variables = [\n    \"total_population\",\n    \"median_age\",\n    \"percent_poverty\"\n]\n</code></pre>"},{"location":"tutorials/custom-pois-tutorial/#step-3-run-the-analysis","title":"Step 3: Run the Analysis","text":"<pre><code>with SocialMapperClient() as client:\n    # Build configuration for custom POIs\n    config = (SocialMapperBuilder()\n        .with_custom_pois(custom_coords_path)\n        .with_travel_time(travel_time)\n        .with_census_variables(*census_variables)\n        .with_exports(csv=True, isochrones=True)\n        .build()\n    )\n\n    # Run analysis\n    result = client.run_analysis(config)\n\n    if result.is_ok():\n        analysis_result = result.unwrap()\n        print(f\"Analyzed {analysis_result.poi_count} custom POIs\")\n</code></pre>"},{"location":"tutorials/custom-pois-tutorial/#understanding-the-results","title":"Understanding the Results","text":"<p>The analysis generates a CSV file with demographic data for each custom POI. Let's create a formatted comparison table:</p> <pre><code>import pandas as pd\nfrom tabulate import tabulate\n\n# Read results\ndf = pd.read_csv('output/csv/custom_pois_analysis.csv')\n\n# Create formatted comparison table\ncomparison_df = pd.DataFrame({\n    'Location': df['poi_name'],\n    'Population Reach': df['total_population'].map('{:,}'.format),\n    'Median Age': df['median_age'].round(1),\n    'Poverty Rate': df['percent_poverty'].map('{:.1f}%'.format)\n})\n\nprint(\"Accessibility Comparison:\")\nprint(tabulate(comparison_df, headers='keys', tablefmt='github', showindex=False))\n</code></pre> <p>Output: <pre><code>Accessibility Comparison:\n| Location         | Population Reach | Median Age | Poverty Rate |\n|------------------|------------------|------------|--------------|\n| Central Library  | 8,234           | 32.5       | 15.2%        |\n| City Park        | 9,156           | 34.1       | 12.8%        |\n| Community Center | 7,890           | 33.7       | 16.5%        |\n| Food Bank        | 6,543           | 35.2       | 22.1%        |\n| Senior Center    | 5,678           | 38.9       | 18.3%        |\n</code></pre></p>"},{"location":"tutorials/custom-pois-tutorial/#advanced-batch-processing-multiple-poi-types","title":"Advanced: Batch Processing Multiple POI Types","text":"<p>When you have different types of POIs, you might want to analyze them separately with different parameters:</p> <pre><code>from socialmapper import SocialMapperClient, SocialMapperBuilder\n\n# Define POI types and their analysis parameters\npoi_configs = {\n    'social_services': {\n        'file': 'social_service_pois.csv',\n        'travel_time': 15,  # Longer travel time for services\n        'variables': ['total_population', 'percent_poverty', 'percent_no_vehicle']\n    },\n    'parks': {\n        'file': 'park_pois.csv',\n        'travel_time': 10,  # Shorter walk to parks\n        'variables': ['total_population', 'median_age', 'percent_children']\n    },\n    'libraries': {\n        'file': 'library_pois.csv',\n        'travel_time': 20,  # People may travel further for libraries\n        'variables': ['total_population', 'median_household_income', 'percent_college']\n    }\n}\n\n# Process each POI type\nwith SocialMapperClient() as client:\n    for poi_type, config_params in poi_configs.items():\n        print(f\"\\nAnalyzing {poi_type}...\")\n\n        config = (SocialMapperBuilder()\n            .with_custom_pois(config_params['file'])\n            .with_travel_time(config_params['travel_time'])\n            .with_census_variables(*config_params['variables'])\n            .with_exports(csv=True)\n            .build()\n        )\n\n        result = client.run_analysis(config)\n\n        if result.is_ok():\n            analysis = result.unwrap()\n            print(f\"\u2705 Analyzed {analysis.poi_count} {poi_type}\")\n        else:\n            print(f\"\u274c Error: {result.unwrap_err().message}\")\n</code></pre>"},{"location":"tutorials/custom-pois-tutorial/#working-with-large-datasets","title":"Working with Large Datasets","text":"<p>For datasets with hundreds or thousands of POIs:</p> <ol> <li>Use chunking: Process POIs in batches of 50-100</li> <li>Enable caching: Geocoding results are cached automatically</li> <li>Skip visualization: Set <code>isochrones=False</code> for faster processing</li> <li>Use parallel processing: Run multiple analyses concurrently</li> </ol> <pre><code>import pandas as pd\nfrom pathlib import Path\n\n# Read large dataset\nall_pois = pd.read_csv('large_poi_dataset.csv')\n\n# Process in chunks\nchunk_size = 50\nfor i in range(0, len(all_pois), chunk_size):\n    chunk = all_pois.iloc[i:i+chunk_size]\n    chunk_file = f'temp_chunk_{i}.csv'\n    chunk.to_csv(chunk_file, index=False)\n\n    # Analyze this chunk\n    with SocialMapperClient() as client:\n        config = (SocialMapperBuilder()\n            .with_custom_pois(chunk_file)\n            .with_travel_time(15)\n            .with_census_variables('total_population')\n            .with_exports(csv=True, isochrones=False)  # Skip maps for speed\n            .build()\n        )\n\n        client.run_analysis(config)\n\n    # Clean up temp file\n    Path(chunk_file).unlink()\n</code></pre>"},{"location":"tutorials/custom-pois-tutorial/#tips-for-custom-poi-analysis","title":"Tips for Custom POI Analysis","text":""},{"location":"tutorials/custom-pois-tutorial/#data-preparation","title":"Data Preparation","text":"<ul> <li>Validate coordinates: Ensure latitude/longitude are in decimal degrees</li> <li>Check coordinate order: Latitude first (35.7796), then longitude (-78.6382)</li> <li>Remove duplicates: Multiple POIs at the same location can skew results</li> <li>Use descriptive names: Makes results easier to interpret</li> </ul>"},{"location":"tutorials/custom-pois-tutorial/#analysis-strategy","title":"Analysis Strategy","text":"<ul> <li>Group by type: Analyze similar POIs together for better comparisons</li> <li>Vary travel times: Different POI types may warrant different travel times</li> <li>Consider travel modes: Some POIs might be primarily accessed by car</li> <li>Select relevant variables: Match census variables to your analysis goals</li> </ul>"},{"location":"tutorials/custom-pois-tutorial/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<p>Issue: \"No census data found\" - Solution: Ensure coordinates are within the United States</p> <p>Issue: \"Invalid coordinates\" - Solution: Check that latitude is between -90 and 90, longitude between -180 and 180</p> <p>Issue: \"CSV parsing error\" - Solution: Ensure CSV has proper headers and no special characters in the header row</p>"},{"location":"tutorials/custom-pois-tutorial/#next-steps","title":"Next Steps","text":"<p>After completing this tutorial:</p> <ol> <li>Create your own dataset: Export locations from your database or GIS system</li> <li>Compare with OSM data: Run both custom and OSM analyses to see coverage gaps</li> <li>Explore travel modes: See the Travel Modes Tutorial</li> <li>Analyze by ZIP code: Learn about ZCTA Analysis</li> </ol>"},{"location":"tutorials/custom-pois-tutorial/#full-code","title":"Full Code","text":"<p>The complete tutorial script is available at: <code>examples/tutorials/02_custom_pois.py</code></p>"},{"location":"tutorials/custom-pois-tutorial/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Custom POI analysis gives you full control over location data</li> <li>CSV format is simple: just name, latitude, and longitude required</li> <li>Batch processing helps analyze different POI types efficiently</li> <li>Results can reveal service gaps and demographic patterns</li> <li>Combine with OSM data for comprehensive accessibility analysis</li> </ul>"},{"location":"tutorials/getting-started-tutorial/","title":"Getting Started Tutorial","text":"<p>This tutorial introduces the fundamental concepts of SocialMapper through a practical example analyzing library accessibility in Wake County, North Carolina.</p>"},{"location":"tutorials/getting-started-tutorial/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How to search for Points of Interest (POIs) from OpenStreetMap</li> <li>How to generate travel time isochrones</li> <li>How to analyze census demographics within reachable areas</li> <li>How to export and interpret results</li> </ul>"},{"location":"tutorials/getting-started-tutorial/#prerequisites","title":"Prerequisites","text":"<p>Before starting this tutorial, ensure you have:</p> <ol> <li> <p>SocialMapper installed:    <pre><code>pip install socialmapper\n</code></pre></p> </li> <li> <p>Census API key (optional but recommended):    <pre><code>export CENSUS_API_KEY=\"your-key-here\"\n</code></pre></p> </li> </ol> <p>!!! tip \"Getting a Census API Key\"        You can obtain a free API key from the U.S. Census Bureau. While optional, having a key prevents rate limiting.</p>"},{"location":"tutorials/getting-started-tutorial/#tutorial-overview","title":"Tutorial Overview","text":"<p>This tutorial analyzes access to public libraries in Wake County, NC, demonstrating how residents can reach these important community resources within a 15-minute walk.</p>"},{"location":"tutorials/getting-started-tutorial/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"tutorials/getting-started-tutorial/#step-1-import-required-libraries","title":"Step 1: Import Required Libraries","text":"<pre><code>from socialmapper import SocialMapperClient, SocialMapperBuilder\n</code></pre> <p>The tutorial uses SocialMapper's modern API with two key components: - <code>SocialMapperClient</code>: Manages the analysis session - <code>SocialMapperBuilder</code>: Helps construct analysis configurations</p>"},{"location":"tutorials/getting-started-tutorial/#step-2-define-search-parameters","title":"Step 2: Define Search Parameters","text":"<pre><code>geocode_area = \"Wake County\"\nstate = \"North Carolina\"\npoi_type = \"amenity\"  # OpenStreetMap category\npoi_name = \"library\"  # Specific type within category\ntravel_time = 15      # minutes\n</code></pre> <p>Key parameters explained: - geocode_area: The geographic area to analyze (county, city, or specific address) - state: Helps disambiguate location names - poi_type/poi_name: OpenStreetMap tags for finding specific place types - travel_time: Maximum walking time in minutes</p> <p>OpenStreetMap Tags</p> <p>Common POI combinations include: - <code>amenity=school</code> for schools - <code>amenity=hospital</code> for hospitals - <code>leisure=park</code> for parks - <code>shop=supermarket</code> for grocery stores</p>"},{"location":"tutorials/getting-started-tutorial/#step-3-select-census-variables","title":"Step 3: Select Census Variables","text":"<pre><code>census_variables = [\n    \"total_population\",\n    \"median_household_income\",\n    \"median_age\"\n]\n</code></pre> <p>These variables help understand the demographics of people who can access the libraries. SocialMapper supports many census variables including income, age, race, education, and housing characteristics.</p>"},{"location":"tutorials/getting-started-tutorial/#step-4-build-and-run-the-analysis","title":"Step 4: Build and Run the Analysis","text":"<pre><code>with SocialMapperClient() as client:\n    # Build configuration using fluent interface\n    config = (SocialMapperBuilder()\n        .with_location(geocode_area, state)\n        .with_osm_pois(poi_type, poi_name)\n        .with_travel_time(travel_time)\n        .with_census_variables(*census_variables)\n        .with_exports(csv=True, isochrones=False, maps=True)\n        .build()\n    )\n\n    # Run analysis\n    result = client.run_analysis(config)\n</code></pre> <p>The builder pattern makes it easy to configure analyses: - <code>.with_location()</code>: Sets the geographic area - <code>.with_osm_pois()</code>: Configures POI search - <code>.with_travel_time()</code>: Sets travel time limit - <code>.with_census_variables()</code>: Selects demographic data - <code>.with_exports()</code>: Controls output formats (CSV data, isochrone boundaries, choropleth maps)</p>"},{"location":"tutorials/getting-started-tutorial/#step-5-handle-results","title":"Step 5: Handle Results","text":"<pre><code>if result.is_err():\n    error = result.unwrap_err()\n    print(f\"Error: {error.message}\")\nelse:\n    analysis_result = result.unwrap()\n    print(f\"Found {analysis_result.poi_count} libraries\")\n    print(f\"Analyzed {analysis_result.census_units_analyzed} block groups\")\n</code></pre> <p>SocialMapper uses Result types for robust error handling. The analysis returns: - poi_count: Number of libraries found - census_units_analyzed: Number of census block groups within reach - files_generated: Dictionary of output file paths</p>"},{"location":"tutorials/getting-started-tutorial/#understanding-the-output","title":"Understanding the Output","text":"<p>The tutorial generates multiple outputs:</p>"},{"location":"tutorials/getting-started-tutorial/#1-csv-data-file","title":"1. CSV Data File","text":"<p>Located in <code>output/csv/</code>, containing: - POI Information: Name, address, and coordinates of each library - Demographics: Population characteristics within walking distance - Aggregated Statistics: Summary metrics across all reachable areas</p>"},{"location":"tutorials/getting-started-tutorial/#2-choropleth-maps","title":"2. Choropleth Maps","text":"<p>Located in <code>output/maps/</code>, visualizing: - Demographic Maps: Population density, income distribution, age patterns - Distance Map: Travel distance to nearest library by census block group - Accessibility Map: Combined view showing demographics within isochrones</p> <p>Each map includes: - Color-coded census block groups showing data intensity - Library locations marked with symbols - Legend explaining the color scale - Scale bar and north arrow for reference</p>"},{"location":"tutorials/getting-started-tutorial/#sample-output-structure","title":"Sample Output Structure","text":"<p>The CSV file contains detailed demographic data for each library. Let's first look at the raw output:</p> <pre><code>import pandas as pd\n\n# Read the generated CSV file\ndf = pd.read_csv('output/csv/wake_county_north_carolina_library_analysis.csv')\n\n# Show raw data\nprint(df.head())\n</code></pre> <p>Raw output (hard to read): <pre><code>                              poi_name     poi_lat     poi_lon  total_population  median_household_income  median_age  percent_poverty  ...\n0     Wake County Public Library - Main  35.779623  -78.638245             15420                    65000        34.5             12.3  ...\n1          Eva H. Perry Regional Library  35.723412  -78.856732             12300                    58000        36.2             15.7  ...\n2                    Green Road Library  35.903234  -78.567891             18750                    72500        32.1              8.9  ...\n3                         Apex Library  35.732156  -78.850234             22100                    85000        35.8              5.2  ...\n</code></pre></p>"},{"location":"tutorials/getting-started-tutorial/#creating-a-readable-table","title":"Creating a Readable Table","text":"<p>Now let's transform this into a clean, readable table using the <code>tabulate</code> package:</p> <pre><code>from tabulate import tabulate\n\n# Select and format key columns for display\ndisplay_df = pd.DataFrame({\n    'Library': df['poi_name'],\n    'Population Served': df['total_population'].astype(int).map('{:,}'.format),\n    'Median Income': df['median_household_income'].astype(int).map('${:,}'.format),\n    'Median Age': df['median_age'].round(1)\n})\n\n# Display using tabulate with GitHub-flavored markdown style\nprint(tabulate(display_df, headers='keys', tablefmt='github', showindex=False))\n</code></pre> <p>Clean, formatted table: <pre><code>| Library                           | Population Served | Median Income | Median Age |\n|-----------------------------------|-------------------|---------------|------------|\n| Wake County Public Library - Main | 15,420           | $65,000       | 34.5       |\n| Eva H. Perry Regional Library     | 12,300           | $58,000       | 36.2       |\n| Green Road Library                | 18,750           | $72,500       | 32.1       |\n| Apex Library                      | 22,100           | $85,000       | 35.8       |\n</code></pre></p>"},{"location":"tutorials/getting-started-tutorial/#quick-summary-statistics","title":"Quick Summary Statistics","text":"<p>You can also use pandas to calculate summary statistics and display them in a clean table:</p> <pre><code># Calculate summary statistics using pandas\nsummary_stats = pd.DataFrame({\n    'Metric': [\n        'Total Libraries',\n        'Total Population Reach',\n        'Average Population per Library',\n        'Average Median Income',\n        'Lowest Income Area',\n        'Highest Income Area',\n        'Average Age'\n    ],\n    'Value': [\n        f\"{len(df)}\",\n        f\"{df['total_population'].sum():,}\",\n        f\"{df['total_population'].mean():,.0f}\",\n        f\"${df['median_household_income'].mean():,.0f}\",\n        f\"${df['median_household_income'].min():,}\",\n        f\"${df['median_household_income'].max():,}\",\n        f\"{df['median_age'].mean():.1f} years\"\n    ]\n})\n\nprint(\"\\nSummary Statistics:\")\nprint(tabulate(summary_stats, headers='keys', tablefmt='simple', showindex=False))\n</code></pre> <p>Output: <pre><code>Summary Statistics:\nMetric                           Value\n-------------------------------  -------------\nTotal Libraries                  12\nTotal Population Reach           198,470\nAverage Population per Library   16,539\nAverage Median Income            $68,750\nLowest Income Area               $45,000\nHighest Income Area              $95,000\nAverage Age                      34.8 years\n</code></pre></p>"},{"location":"tutorials/getting-started-tutorial/#customizing-the-analysis","title":"Customizing the Analysis","text":""},{"location":"tutorials/getting-started-tutorial/#try-different-poi-types","title":"Try Different POI Types","text":"<p>Replace the library search with other community resources:</p> <pre><code># Parks\npoi_type = \"leisure\"\npoi_name = \"park\"\n\n# Schools\npoi_type = \"amenity\"\npoi_name = \"school\"\n\n# Healthcare\npoi_type = \"amenity\"\npoi_name = \"hospital\"\n</code></pre>"},{"location":"tutorials/getting-started-tutorial/#adjust-travel-parameters","title":"Adjust Travel Parameters","text":"<pre><code># Shorter walk (5 minutes)\ntravel_time = 5\n\n# Longer walk (30 minutes)\ntravel_time = 30\n\n# Different travel mode (requires mode support)\ntravel_mode = \"drive\"  # or \"bike\"\n</code></pre>"},{"location":"tutorials/getting-started-tutorial/#add-more-census-variables","title":"Add More Census Variables","text":"<pre><code>census_variables = [\n    \"total_population\",\n    \"median_household_income\",\n    \"median_age\",\n    \"percent_poverty\",\n    \"percent_no_vehicle\",\n    \"percent_seniors\"\n]\n</code></pre>"},{"location":"tutorials/getting-started-tutorial/#export-options","title":"Export Options","text":"<pre><code># Default (CSV + maps)\n.with_exports(csv=True, isochrones=False, maps=True)\n\n# All outputs\n.with_exports(csv=True, isochrones=True, maps=True)\n\n# Data only (no visualizations)\n.with_exports(csv=True, isochrones=False, maps=False)\n</code></pre>"},{"location":"tutorials/getting-started-tutorial/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"tutorials/getting-started-tutorial/#no-pois-found","title":"No POIs Found","text":"<ul> <li>Verify the location name is correct</li> <li>Try a larger geographic area</li> <li>Check POI type/name combination</li> </ul>"},{"location":"tutorials/getting-started-tutorial/#census-data-missing","title":"Census Data Missing","text":"<ul> <li>Ensure Census API key is set</li> <li>Some rural areas may have limited data</li> <li>Try different census variables</li> </ul>"},{"location":"tutorials/getting-started-tutorial/#slow-performance","title":"Slow Performance","text":"<ul> <li>First run downloads street network data (cached for future use)</li> <li>Reduce travel time for faster analysis</li> <li>Use smaller geographic areas</li> </ul>"},{"location":"tutorials/getting-started-tutorial/#next-steps","title":"Next Steps","text":"<p>After completing this tutorial, explore:</p> <ol> <li>Custom POIs Tutorial: Use your own location data</li> <li>Travel Modes Tutorial: Compare walk, bike, and drive access</li> <li>ZCTA Analysis Tutorial: Analyze by ZIP code</li> </ol>"},{"location":"tutorials/getting-started-tutorial/#full-code","title":"Full Code","text":"<p>The complete tutorial script is available at: <code>examples/tutorials/01_getting_started.py</code></p>"},{"location":"tutorials/getting-started-tutorial/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>SocialMapper makes it easy to analyze community accessibility</li> <li>The builder pattern provides a clean API for configuration</li> <li>Results include both geographic and demographic insights</li> <li>Caching speeds up repeated analyses</li> <li>Error handling helps diagnose issues</li> </ul>"},{"location":"tutorials/getting-started-with-maps/","title":"Getting Started Tutorial (with Choropleth Maps)","text":"<p>This enhanced tutorial introduces SocialMapper's visualization capabilities, showing how to create professional choropleth maps alongside the standard demographic analysis.</p>"},{"location":"tutorials/getting-started-with-maps/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How to search for Points of Interest (POIs) from OpenStreetMap</li> <li>How to generate travel time isochrones</li> <li>How to analyze census demographics within reachable areas</li> <li>How to create choropleth maps to visualize demographic patterns</li> <li>How to export results in multiple formats</li> </ul>"},{"location":"tutorials/getting-started-with-maps/#prerequisites","title":"Prerequisites","text":"<p>Before starting this tutorial, ensure you have:</p> <ol> <li> <p>SocialMapper installed:    <pre><code>pip install socialmapper\n</code></pre></p> </li> <li> <p>Census API key (optional but recommended):    <pre><code>export CENSUS_API_KEY=\"your-key-here\"\n</code></pre></p> </li> </ol> <p>!!! tip \"Getting a Census API Key\"        You can obtain a free API key from the U.S. Census Bureau. While optional, having a key prevents rate limiting.</p>"},{"location":"tutorials/getting-started-with-maps/#tutorial-overview","title":"Tutorial Overview","text":"<p>This tutorial analyzes access to public libraries in Wake County, NC, demonstrating how residents can reach these important community resources within a 15-minute walk. We'll visualize the demographic characteristics of areas with good library access using choropleth maps.</p>"},{"location":"tutorials/getting-started-with-maps/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"tutorials/getting-started-with-maps/#step-1-import-required-libraries","title":"Step 1: Import Required Libraries","text":"<pre><code>from socialmapper import SocialMapperClient, SocialMapperBuilder\nfrom socialmapper.visualization.pipeline_integration import add_visualization_to_pipeline\n</code></pre> <p>The tutorial now uses: - <code>SocialMapperClient</code>: Manages the analysis session - <code>SocialMapperBuilder</code>: Helps construct analysis configurations - <code>add_visualization_to_pipeline</code>: Creates choropleth maps from results</p>"},{"location":"tutorials/getting-started-with-maps/#step-2-define-search-parameters","title":"Step 2: Define Search Parameters","text":"<pre><code>geocode_area = \"Wake County\"\nstate = \"North Carolina\"\npoi_type = \"amenity\"  # OpenStreetMap category\npoi_name = \"library\"  # Specific type within category\ntravel_time = 15      # minutes\n</code></pre>"},{"location":"tutorials/getting-started-with-maps/#step-3-select-census-variables","title":"Step 3: Select Census Variables","text":"<pre><code>census_variables = [\n    \"total_population\",\n    \"median_household_income\",\n    \"median_age\",\n    \"percent_poverty\",\n    \"percent_no_vehicle\"\n]\n</code></pre> <p>Variables for Visualization</p> <p>When creating choropleth maps, choose variables that reveal spatial patterns. Income, poverty, and vehicle access are particularly relevant for understanding library accessibility.</p>"},{"location":"tutorials/getting-started-with-maps/#step-4-build-and-run-the-analysis","title":"Step 4: Build and Run the Analysis","text":"<pre><code>with SocialMapperClient() as client:\n    # Build configuration with map exports enabled\n    config = (SocialMapperBuilder()\n        .with_location(geocode_area, state)\n        .with_osm_pois(poi_type, poi_name)\n        .with_travel_time(travel_time)\n        .with_census_variables(*census_variables)\n        .with_exports(csv=True, isochrones=True)  # Enable both exports\n        .build()\n    )\n\n    # Run analysis\n    result = client.run_analysis(config)\n</code></pre> <p>Enable Isochrone Export</p> <p>Set <code>isochrones=True</code> in <code>.with_exports()</code> to save the intermediate data needed for creating choropleth maps.</p>"},{"location":"tutorials/getting-started-with-maps/#step-5-generate-choropleth-maps","title":"Step 5: Generate Choropleth Maps","text":"<p>After the analysis completes, create visualizations:</p> <pre><code># Find the generated data files\npipeline_data_dir = Path(\"output/pipeline_data\")\ncensus_data_path = list(pipeline_data_dir.glob(\"*census*.parquet\"))[-1]\npoi_data_path = list(pipeline_data_dir.glob(\"*pois*.parquet\"))[-1]\nisochrone_data_path = list(pipeline_data_dir.glob(\"*isochrones*.parquet\"))[-1]\n\n# Generate choropleth maps\nmap_paths = add_visualization_to_pipeline(\n    census_data_path=census_data_path,\n    output_dir=\"output/maps\",\n    poi_data_path=poi_data_path,\n    isochrone_data_path=isochrone_data_path,\n    demographic_columns=[\"total_population\", \"median_household_income\", \"percent_poverty\"],\n    create_demographic_maps=True,\n    map_format=\"png\",\n    dpi=150\n)\n</code></pre>"},{"location":"tutorials/getting-started-with-maps/#understanding-the-output","title":"Understanding the Output","text":""},{"location":"tutorials/getting-started-with-maps/#generated-files","title":"Generated Files","text":"<p>The enhanced tutorial creates multiple outputs:</p> <ol> <li>CSV Data (<code>output/csv/</code>):</li> <li>Detailed demographic data for each library</li> <li> <p>Aggregated statistics</p> </li> <li> <p>Intermediate Data (<code>output/pipeline_data/</code>):</p> </li> <li><code>*_pois.parquet</code>: Library locations</li> <li><code>*_isochrones.parquet</code>: 15-minute walk boundaries</li> <li> <p><code>*_census.parquet</code>: Census data with geometries</p> </li> <li> <p>Choropleth Maps (<code>output/maps/</code>):</p> </li> <li><code>total_population_map.png</code>: Population density patterns</li> <li><code>median_household_income_map.png</code>: Income distribution</li> <li><code>percent_poverty_map.png</code>: Poverty concentration</li> </ol>"},{"location":"tutorials/getting-started-with-maps/#interpreting-choropleth-maps","title":"Interpreting Choropleth Maps","text":"<p>The choropleth maps reveal spatial patterns in library accessibility:</p>"},{"location":"tutorials/getting-started-with-maps/#population-density-map","title":"Population Density Map","text":"<ul> <li>Dark blue areas: High population density with library access</li> <li>Light blue areas: Lower population density with library access</li> <li>Gray areas: Census blocks beyond 15-minute walk</li> </ul>"},{"location":"tutorials/getting-started-with-maps/#median-income-map","title":"Median Income Map","text":"<ul> <li>Dark green areas: Higher income neighborhoods with library access</li> <li>Light green areas: Lower income neighborhoods with library access</li> <li>Pattern analysis: Are libraries equally accessible across income levels?</li> </ul>"},{"location":"tutorials/getting-started-with-maps/#travel-distance-map","title":"Travel Distance Map","text":"<ul> <li>Dark red areas: Longer travel distance to nearest library</li> <li>Yellow areas: Moderate travel distance</li> <li>Pattern analysis: Geographic accessibility varies across the region</li> </ul>"},{"location":"tutorials/getting-started-with-maps/#map-features","title":"Map Features","text":"<p>Each choropleth map includes: - Legend: Shows data classification and color scheme - North arrow: Indicates map orientation - Scale bar: Shows distance reference - POI markers: Library locations marked with symbols - Isochrone overlay: 15-minute walk boundaries (if applicable)</p>"},{"location":"tutorials/getting-started-with-maps/#customizing-visualizations","title":"Customizing Visualizations","text":""},{"location":"tutorials/getting-started-with-maps/#change-color-schemes","title":"Change Color Schemes","text":"<p>Modify the visualization configuration:</p> <pre><code>from socialmapper.visualization import ColorScheme, MapConfig\n\n# Create custom configuration\nmap_config = MapConfig(\n    color_scheme=ColorScheme.BLUES,  # Use blue gradient\n    title=\"Custom Library Access Map\",\n    figsize=(12, 10),\n    show_legend=True,\n    show_north_arrow=True,\n    show_scale_bar=True\n)\n</code></pre>"},{"location":"tutorials/getting-started-with-maps/#select-different-variables","title":"Select Different Variables","text":"<p>Choose variables that reveal different patterns:</p> <pre><code>demographic_columns = [\n    \"percent_seniors\",      # Elderly population\n    \"percent_no_vehicle\",   # Transportation barriers\n    \"percent_college\",      # Education levels\n]\n</code></pre>"},{"location":"tutorials/getting-started-with-maps/#adjust-classification-methods","title":"Adjust Classification Methods","text":"<p>Control how data is grouped into colors:</p> <pre><code>from socialmapper.visualization import ClassificationScheme\n\nconfig = MapConfig(\n    classification_scheme=ClassificationScheme.QUANTILES,  # Equal count bins\n    n_classes=7,  # More granular classification\n)\n</code></pre>"},{"location":"tutorials/getting-started-with-maps/#common-visualization-issues","title":"Common Visualization Issues","text":""},{"location":"tutorials/getting-started-with-maps/#no-maps-generated","title":"No Maps Generated","text":"<ul> <li>Ensure <code>isochrones=True</code> is set in <code>.with_exports()</code></li> <li>Check that parquet files exist in <code>output/pipeline_data/</code></li> <li>Verify census data was successfully fetched</li> </ul>"},{"location":"tutorials/getting-started-with-maps/#poor-color-contrast","title":"Poor Color Contrast","text":"<ul> <li>Try different color schemes (VIRIDIS, PLASMA for continuous data)</li> <li>Adjust number of classes (3-7 typically work well)</li> <li>Use diverging colors (RDBU) for data with meaningful midpoint</li> </ul>"},{"location":"tutorials/getting-started-with-maps/#large-file-sizes","title":"Large File Sizes","text":"<ul> <li>Reduce DPI for web display (72-150 dpi)</li> <li>Use PNG for photos, SVG for scalable graphics</li> <li>Enable geometry simplification for large areas</li> </ul>"},{"location":"tutorials/getting-started-with-maps/#complete-example","title":"Complete Example","text":"<p>The full enhanced tutorial script is available at: <code>examples/tutorials/01_getting_started_with_maps.py</code></p>"},{"location":"tutorials/getting-started-with-maps/#next-steps","title":"Next Steps","text":"<p>After completing this tutorial, explore:</p> <ol> <li>Custom POIs Tutorial: Analyze your own locations</li> <li>Multi-Modal Analysis: Compare walk, bike, and drive access</li> <li>Address Geocoding: Work with specific addresses</li> </ol>"},{"location":"tutorials/getting-started-with-maps/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Choropleth maps reveal spatial patterns invisible in tabular data</li> <li>SocialMapper integrates demographic analysis with professional visualization</li> <li>Maps help communicate findings to stakeholders and communities</li> <li>Visualization supports equity analysis by highlighting disparities</li> <li>The pipeline seamlessly combines data processing with map generation</li> </ul>"},{"location":"tutorials/travel-modes-tutorial/","title":"Travel Modes Tutorial","text":"<p>This tutorial demonstrates how to use different travel modes (walk, bike, drive) in SocialMapper to analyze accessibility. Different modes create different isochrone shapes based on the available transportation networks.</p>"},{"location":"tutorials/travel-modes-tutorial/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>Using walk, bike, and drive travel modes</li> <li>Understanding how travel modes affect isochrone shapes</li> <li>Choosing appropriate travel times for each mode</li> <li>Comparing accessibility across different transportation options</li> <li>Combining travel modes with custom POIs</li> </ul>"},{"location":"tutorials/travel-modes-tutorial/#understanding-travel-modes","title":"Understanding Travel Modes","text":"<p>SocialMapper supports three travel modes, each using different network data:</p> Mode Network Types Typical Speed Common Use Cases Walk Sidewalks, crosswalks, pedestrian paths 3-4 mph Neighborhood services, parks, schools Bike Bike lanes, shared roads, trails 10-15 mph Recreation, commuting, local services Drive Roads accessible by cars Variable Regional services, hospitals, shopping"},{"location":"tutorials/travel-modes-tutorial/#getting-started","title":"Getting Started","text":""},{"location":"tutorials/travel-modes-tutorial/#import-required-libraries","title":"Import Required Libraries","text":"<pre><code>from socialmapper import SocialMapperBuilder, SocialMapperClient\nfrom socialmapper.isochrone import TravelMode\n</code></pre> <p>You can specify travel modes either as strings (<code>\"walk\"</code>, <code>\"bike\"</code>, <code>\"drive\"</code>) or using the <code>TravelMode</code> enum. An enum (enumeration) is a set of named constants that make code more readable - instead of remembering that 0 means walk, 1 means bike, etc., you can use descriptive names like <code>TravelMode.WALK</code>.</p>"},{"location":"tutorials/travel-modes-tutorial/#example-1-walking-to-parks","title":"Example 1: Walking to Parks","text":"<p>Let's analyze 15-minute walking access to parks:</p> <pre><code>config = (\n    SocialMapperBuilder()\n    .with_location(\"Chapel Hill\", \"NC\")\n    .with_osm_pois(\"leisure\", \"park\")\n    .with_travel_time(15)\n    .with_travel_mode(\"walk\")  # Walking mode\n    .with_census_variables(\"total_population\", \"median_age\")\n    .limit_pois(3)  # Limit for demo\n    .with_output_directory(\"output/walk_example\")\n    .build()\n)\n\nwith SocialMapperClient() as client:\n    result = client.run_analysis(config)\n\n    if result.is_ok():\n        data = result.unwrap()\n        print(f\"Found {data.poi_count} parks\")\n        print(f\"Generated {data.isochrone_count} walking isochrones\")\n        print(f\"Analyzed {data.census_units_analyzed} census units\")\n</code></pre> <p>Output: <pre><code>Found 3 parks\nGenerated 3 walking isochrones\nAnalyzed 46 census units\n</code></pre></p>"},{"location":"tutorials/travel-modes-tutorial/#understanding-walking-isochrones","title":"Understanding Walking Isochrones","text":"<p>Walking isochrones typically: - Cover 0.5-1 mile radius (15 minutes) - Follow sidewalks and pedestrian paths - Stop at major barriers (highways, rivers) - Best for neighborhood-level analysis</p>"},{"location":"tutorials/travel-modes-tutorial/#example-2-biking-to-libraries","title":"Example 2: Biking to Libraries","text":"<p>Analyze 10-minute bike access to libraries:</p> <pre><code>config = (\n    SocialMapperBuilder()\n    .with_location(\"Chapel Hill\", \"NC\")\n    .with_osm_pois(\"amenity\", \"library\")\n    .with_travel_time(10)\n    .with_travel_mode(TravelMode.BIKE)  # Using enum\n    .with_census_variables(\"total_population\", \"median_household_income\")\n    .limit_pois(3)\n    .with_output_directory(\"output/bike_example\")\n    .build()\n)\n\nwith SocialMapperClient() as client:\n    result = client.run_analysis(config)\n\n    if result.is_ok():\n        data = result.unwrap()\n        print(f\"Found {data.poi_count} libraries\")\n        print(f\"Generated {data.isochrone_count} biking isochrones\")\n        print(f\"Analyzed {data.census_units_analyzed} census units\")\n</code></pre> <p>Output: <pre><code>Found 3 libraries\nGenerated 3 biking isochrones\nAnalyzed 52 census units\n</code></pre></p>"},{"location":"tutorials/travel-modes-tutorial/#biking-considerations","title":"Biking Considerations","text":"<p>Biking isochrones: - Cover 2-3 mile radius (10 minutes) - Use bike lanes, trails, and bike-friendly roads - Avoid highways but can cross at designated points - Good for local commuting analysis</p>"},{"location":"tutorials/travel-modes-tutorial/#example-3-driving-to-hospitals","title":"Example 3: Driving to Hospitals","text":"<p>For regional services like hospitals, driving access is crucial:</p> <pre><code>config = (\n    SocialMapperBuilder()\n    .with_location(\"Chapel Hill\", \"NC\")\n    .with_osm_pois(\"amenity\", \"hospital\")\n    .with_travel_time(20)\n    .with_travel_mode(\"drive\")  # Default mode\n    .with_census_variables(\"total_population\", \"median_age\")\n    .limit_pois(2)\n    .with_output_directory(\"output/drive_example\")\n    .build()\n)\n\nwith SocialMapperClient() as client:\n    result = client.run_analysis(config)\n\n    if result.is_ok():\n        data = result.unwrap()\n        print(f\"Found {data.poi_count} hospitals\")\n        print(f\"Generated {data.isochrone_count} driving isochrones\")\n        print(f\"Analyzed {data.census_units_analyzed} census units\")\n</code></pre> <p>Output: <pre><code>Found 2 hospitals\nGenerated 2 driving isochrones\nAnalyzed 105 census units\n</code></pre></p>"},{"location":"tutorials/travel-modes-tutorial/#driving-analysis","title":"Driving Analysis","text":"<p>Driving isochrones: - Cover 10-20 mile radius (20 minutes) - Follow road networks and speed limits - Account for traffic patterns (when data available) - Essential for regional service planning</p>"},{"location":"tutorials/travel-modes-tutorial/#example-4-custom-pois-with-travel-modes","title":"Example 4: Custom POIs with Travel Modes","text":"<p>You can combine custom POIs with different travel modes:</p> <pre><code>from pathlib import Path\n\n# Create custom POI file\ncustom_poi_file = Path(\"output/custom_pois.csv\")\ncustom_poi_file.parent.mkdir(exist_ok=True)\ncustom_poi_file.write_text(\n    \"name,lat,lon\\n\"\n    \"UNC Campus,35.9049,-79.0482\\n\"\n    \"Franklin Street,35.9132,-79.0558\\n\"\n    \"Carrboro Plaza,35.9101,-79.0753\\n\"\n)\n\n# Analyze bike access to custom locations\nconfig = (\n    SocialMapperBuilder()\n    .with_custom_pois(custom_poi_file)\n    .with_travel_time(15)\n    .with_travel_mode(\"bike\")\n    .with_census_variables(\"total_population\", \"median_age\")\n    .with_output_directory(\"output/custom_bike_example\")\n    .build()\n)\n\nwith SocialMapperClient() as client:\n    result = client.run_analysis(config)\n</code></pre>"},{"location":"tutorials/travel-modes-tutorial/#comparing-travel-modes","title":"Comparing Travel Modes","text":"<p>Let's compare accessibility across modes for the same location:</p> <pre><code>import pandas as pd\nfrom tabulate import tabulate\n\n# Run analysis for each mode\nmodes_data = []\n\nfor mode in [\"walk\", \"bike\", \"drive\"]:\n    travel_time = {\"walk\": 15, \"bike\": 15, \"drive\": 15}[mode]\n\n    config = (\n        SocialMapperBuilder()\n        .with_location(\"Downtown Raleigh\", \"NC\")\n        .with_osm_pois(\"amenity\", \"library\")\n        .with_travel_time(travel_time)\n        .with_travel_mode(mode)\n        .with_census_variables(\"total_population\")\n        .build()\n    )\n\n    with SocialMapperClient() as client:\n        result = client.run_analysis(config)\n        if result.is_ok():\n            data = result.unwrap()\n            modes_data.append({\n                'Mode': mode.capitalize(),\n                'Travel Time': f\"{travel_time} min\",\n                'Population Reach': f\"{data.total_population:,}\",\n                'Census Units': data.census_units_analyzed\n            })\n\n# Display comparison\ndf = pd.DataFrame(modes_data)\nprint(\"Travel Mode Comparison (15 minutes):\")\nprint(tabulate(df, headers='keys', tablefmt='github', showindex=False))\n</code></pre> <p>Output: <pre><code>Travel Mode Comparison (15 minutes):\n| Mode  | Travel Time | Population Reach | Census Units |\n|-------|-------------|------------------|--------------|\n| Walk  | 15 min      | 12,500           | 18           |\n| Bike  | 15 min      | 45,200           | 52           |\n| Drive | 15 min      | 125,000          | 143          |\n</code></pre></p>"},{"location":"tutorials/travel-modes-tutorial/#choosing-the-right-mode-and-time","title":"Choosing the Right Mode and Time","text":""},{"location":"tutorials/travel-modes-tutorial/#recommended-travel-times-by-mode-and-poi-type","title":"Recommended Travel Times by Mode and POI Type","text":"POI Type Walk Bike Drive Parks, Playgrounds 10-15 min 10-15 min - Schools 15-20 min 15 min 10 min Libraries 15-20 min 15-20 min 15 min Grocery Stores 10-15 min 15 min 10-15 min Hospitals - 30 min 20-30 min Regional Services - - 30-45 min"},{"location":"tutorials/travel-modes-tutorial/#mode-selection-guidelines","title":"Mode Selection Guidelines","text":"<p>Use Walking when analyzing: - Neighborhood walkability - Local community services - Environmental justice (car-free populations) - Urban planning initiatives</p> <p>Use Biking when analyzing: - Active transportation infrastructure - Recreation access - University/campus areas - Bike-share service areas</p> <p>Use Driving when analyzing: - Regional services (hospitals, airports) - Suburban accessibility - Emergency service coverage - Retail catchment areas</p>"},{"location":"tutorials/travel-modes-tutorial/#network-considerations","title":"Network Considerations","text":"<p>Different modes use different network data:</p> <pre><code># The network type is automatically selected based on travel mode\n# You can see this in the network cache files:\n# - walk_network_[hash].pkl.gz\n# - bike_network_[hash].pkl.gz\n# - drive_network_[hash].pkl.gz\n</code></pre>"},{"location":"tutorials/travel-modes-tutorial/#network-characteristics","title":"Network Characteristics","text":"<p>Walking Networks include: - Sidewalks and footpaths - Pedestrian crossings - Parks and plazas - Stairs and ramps</p> <p>Biking Networks include: - Bike lanes and paths - Shared roadways - Multi-use trails - Low-traffic streets</p> <p>Driving Networks include: - All vehicle-accessible roads - Highways and ramps - Turn restrictions - One-way streets</p>"},{"location":"tutorials/travel-modes-tutorial/#performance-tips","title":"Performance Tips","text":"<ol> <li>Network Caching: First run downloads network data; subsequent runs are much faster</li> <li>Mode-Specific Caching: Each mode caches its own network data</li> <li>Appropriate Times: Longer travel times exponentially increase computation</li> <li>POI Limits: Use <code>.limit_pois()</code> for testing and demos</li> </ol>"},{"location":"tutorials/travel-modes-tutorial/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<p>Issue: \"No network data available\" - Solution: Ensure the area has OSM coverage; try a different location</p> <p>Issue: \"Isochrone generation timeout\" - Solution: Reduce travel time or limit POIs; check network connectivity</p> <p>Issue: \"Unexpected isochrone shapes\" - Solution: Verify the correct travel mode; check for network barriers</p>"},{"location":"tutorials/travel-modes-tutorial/#advanced-usage","title":"Advanced Usage","text":""},{"location":"tutorials/travel-modes-tutorial/#custom-speed-settings","title":"Custom Speed Settings","text":"<p>While not exposed in the current API, you can modify walking/biking speeds in the configuration for specialized analysis (e.g., elderly populations, e-bikes).</p>"},{"location":"tutorials/travel-modes-tutorial/#multi-modal-analysis","title":"Multi-Modal Analysis","text":"<p>Combine modes for comprehensive accessibility studies:</p> <pre><code># Analyze both walk and drive access to hospitals\n# Useful for equity analysis\nfor mode in [\"walk\", \"drive\"]:\n    # Run analysis for each mode\n    # Compare populations with/without car access\n</code></pre>"},{"location":"tutorials/travel-modes-tutorial/#next-steps","title":"Next Steps","text":"<p>After completing this tutorial:</p> <ol> <li>Compare isochrone shapes between modes for your area</li> <li>Analyze equity by comparing walk vs drive accessibility</li> <li>Study bike infrastructure gaps using bike mode</li> <li>Combine with demographic analysis for transportation planning</li> </ol>"},{"location":"tutorials/travel-modes-tutorial/#full-code","title":"Full Code","text":"<p>The complete tutorial script is available at: <code>examples/tutorials/03_travel_modes.py</code></p>"},{"location":"tutorials/travel-modes-tutorial/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Travel modes dramatically affect accessibility analysis</li> <li>Walking: neighborhood scale, environmental justice</li> <li>Biking: active transportation, medium-range access</li> <li>Driving: regional services, suburban analysis</li> <li>Always consider your population when choosing modes</li> <li>Network data quality affects results</li> </ul>"},{"location":"tutorials/zcta-analysis-tutorial/","title":"ZIP Code Analysis Tutorial","text":"<p>This tutorial introduces ZIP Code Tabulation Area (ZCTA) analysis, a powerful alternative to block group analysis for regional demographic studies. ZCTAs are statistical areas that approximate ZIP code boundaries, making them familiar and useful for business and marketing analysis.</p>"},{"location":"tutorials/zcta-analysis-tutorial/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>Understanding ZCTAs and their advantages</li> <li>Fetching ZCTA boundaries and census data</li> <li>Comparing ZCTA vs block group analysis</li> <li>Batch processing multiple states</li> <li>Creating choropleth maps at the ZCTA level</li> <li>Choosing the right geographic unit for your analysis</li> </ul>"},{"location":"tutorials/zcta-analysis-tutorial/#what-are-zctas","title":"What are ZCTAs?","text":"<p>ZIP Code Tabulation Areas (ZCTAs) are statistical geographic units created by the U.S. Census Bureau that approximate the geographic areas covered by USPS ZIP codes. While not exactly the same as ZIP codes, they're close enough for most analytical purposes.</p>"},{"location":"tutorials/zcta-analysis-tutorial/#why-use-zctas","title":"Why Use ZCTAs?","text":"<p>Advantages: - Familiar: Everyone knows ZIP codes - Larger areas: Cover 5,000-50,000 people vs 600-3,000 for block groups - Faster processing: Fewer units to analyze - Business-friendly: Perfect for market analysis and service planning</p> <p>Best Use Cases: - Regional demographic trends - Business market analysis - Service area planning - Mail-based outreach campaigns</p>"},{"location":"tutorials/zcta-analysis-tutorial/#getting-started","title":"Getting Started","text":""},{"location":"tutorials/zcta-analysis-tutorial/#step-1-import-and-initialize","title":"Step 1: Import and Initialize","text":"<pre><code>from socialmapper import get_census_system\nimport pandas as pd\nimport geopandas as gpd\n\n# Initialize the census system\ncensus_system = get_census_system()\n</code></pre>"},{"location":"tutorials/zcta-analysis-tutorial/#step-2-fetch-zcta-boundaries","title":"Step 2: Fetch ZCTA Boundaries","text":"<p>Let's get all ZCTAs for North Carolina:</p> <pre><code># North Carolina FIPS code is 37\nnc_zctas = census_system.get_zctas_for_state(\"37\")\nprint(f\"Found {len(nc_zctas)} ZCTAs in North Carolina\")\n\n# View available columns\nprint(f\"Columns: {list(nc_zctas.columns)}\")\n# Sample ZCTAs\nprint(f\"Sample ZCTAs: {', '.join(nc_zctas.head(3)['GEOID'].astype(str))}\")\n</code></pre> <p>Output: <pre><code>Found 373 ZCTAs in North Carolina\nColumns: ['geometry', 'GEOID', 'ZCTA5', 'NAME', 'POP100', 'HU100', 'AREALAND', 'AREAWATER', 'CENTLAT', 'CENTLON', 'ZCTA5CE', 'STATEFP']\nSample ZCTAs: 27048, 27051, 27053\n</code></pre></p>"},{"location":"tutorials/zcta-analysis-tutorial/#step-3-find-zcta-for-a-specific-location","title":"Step 3: Find ZCTA for a Specific Location","text":"<pre><code># Find which ZCTA contains a specific point\nlat, lon = 35.7796, -78.6382  # Downtown Raleigh\nzcta_code = census_system.get_zcta_for_point(lat, lon)\nprint(f\"Location ({lat}, {lon}) is in ZCTA: {zcta_code}\")\n</code></pre>"},{"location":"tutorials/zcta-analysis-tutorial/#analyzing-zcta-demographics","title":"Analyzing ZCTA Demographics","text":"<p>Let's analyze demographics for several ZCTAs across North Carolina:</p> <pre><code># Define ZCTAs to analyze\nexample_zctas = [\n    \"27601\",  # Raleigh downtown\n    \"27605\",  # Raleigh suburbs  \n    \"27609\",  # North Raleigh\n    \"28202\",  # Charlotte uptown\n    \"28204\",  # South Charlotte\n]\n\n# Census variables\nvariables = [\n    \"B01003_001E\",  # Total population\n    \"B19013_001E\",  # Median household income\n    \"B25003_002E\",  # Owner-occupied housing units\n    \"B25003_003E\",  # Renter-occupied housing units\n]\n\n# Fetch census data\ncensus_data = census_system.get_zcta_census_data(\n    geoids=example_zctas,\n    variables=variables\n)\n\nprint(f\"Retrieved {len(census_data)} data points\")\n</code></pre>"},{"location":"tutorials/zcta-analysis-tutorial/#processing-and-displaying-results","title":"Processing and Displaying Results","text":"<pre><code>from tabulate import tabulate\n\n# Transform data for analysis\nanalysis_data = []\nfor zcta in example_zctas:\n    zcta_data = census_data[census_data['GEOID'] == zcta]\n\n    if not zcta_data.empty:\n        # Extract values for each variable\n        data_dict = {'ZCTA': zcta}\n\n        for _, row in zcta_data.iterrows():\n            var_code = row['variable_code']\n            value = row['value']\n\n            if var_code == 'B01003_001E':\n                data_dict['Population'] = f\"{int(value):,}\" if value else \"N/A\"\n            elif var_code == 'B19013_001E':\n                data_dict['Median Income'] = f\"${int(value):,}\" if value else \"N/A\"\n            elif var_code == 'B25003_002E':\n                owner = int(value) if value else 0\n                data_dict['_owner'] = owner\n            elif var_code == 'B25003_003E':\n                renter = int(value) if value else 0\n                data_dict['_renter'] = renter\n\n        # Calculate owner occupancy percentage\n        total = data_dict.get('_owner', 0) + data_dict.get('_renter', 0)\n        if total &gt; 0:\n            data_dict['% Owner Occupied'] = f\"{(data_dict['_owner'] / total) * 100:.1f}%\"\n        else:\n            data_dict['% Owner Occupied'] = \"N/A\"\n\n        # Remove temporary fields\n        data_dict.pop('_owner', None)\n        data_dict.pop('_renter', None)\n\n        analysis_data.append(data_dict)\n\n# Display results\ndf = pd.DataFrame(analysis_data)\nprint(\"\\nZCTA Demographics Summary:\")\nprint(tabulate(df, headers='keys', tablefmt='github', showindex=False))\n</code></pre> <p>Output: <pre><code>ZCTA Demographics Summary:\n| ZCTA  | Population | Median Income | % Owner Occupied |\n|-------|------------|---------------|------------------|\n| 27601 | 9,702      | $70,433       | 27.7%            |\n| 27605 | 6,121      | $63,267       | 31.8%            |\n| 27609 | 35,548     | $81,538       | 51.1%            |\n| 28202 | 16,855     | $101,711      | 26.7%            |\n| 28204 | 9,744      | $89,207       | 25.9%            |\n</code></pre></p>"},{"location":"tutorials/zcta-analysis-tutorial/#batch-processing-multiple-states","title":"Batch Processing Multiple States","text":"<p>For large-scale analysis across multiple states:</p> <pre><code># Define states to analyze\nstates = {\n    \"37\": \"North Carolina\",\n    \"45\": \"South Carolina\", \n    \"13\": \"Georgia\"\n}\n\nprint(f\"Processing ZCTAs for {len(states)} states:\")\nfor fips, name in states.items():\n    print(f\"   \u2022 {name} (FIPS: {fips})\")\n\n# Batch fetch ZCTAs\nstate_fips_list = list(states.keys())\nall_zctas = census_system.batch_get_zctas(\n    state_fips_list=state_fips_list,\n    batch_size=2  # Process 2 states at a time\n)\n\nprint(f\"\\nSuccessfully processed {len(all_zctas)} total ZCTAs\")\n\n# Show state-by-state breakdown\nprint(\"\\nZCTAs by State:\")\nfor fips, name in states.items():\n    state_zctas = all_zctas[all_zctas['STATEFP'] == fips]\n    print(f\"   \u2022 {name}: {len(state_zctas)} ZCTAs\")\n</code></pre> <p>Output: <pre><code>Processing ZCTAs for 3 states:\n   \u2022 North Carolina (FIPS: 37)\n   \u2022 South Carolina (FIPS: 45)\n   \u2022 Georgia (FIPS: 13)\n\nSuccessfully processed 1517 total ZCTAs\n\nZCTAs by State:\n   \u2022 North Carolina: 373 ZCTAs\n   \u2022 South Carolina: 424 ZCTAs\n   \u2022 Georgia: 720 ZCTAs\n</code></pre></p>"},{"location":"tutorials/zcta-analysis-tutorial/#zcta-vs-block-group-comparison","title":"ZCTA vs Block Group Comparison","text":"<p>Understanding when to use ZCTAs versus block groups is crucial:</p> Aspect Block Groups ZCTAs Size ~600-3,000 people ~5,000-50,000 Precision Very High Moderate Processing Slower Faster Familiarity Technical Everyone knows Use Case Local analysis Regional trends"},{"location":"tutorials/zcta-analysis-tutorial/#when-to-use-block-groups","title":"When to Use Block Groups","text":"<ul> <li>Walking distance analysis</li> <li>Neighborhood-level demographics</li> <li>Urban planning studies</li> <li>Environmental justice analysis</li> </ul>"},{"location":"tutorials/zcta-analysis-tutorial/#when-to-use-zctas","title":"When to Use ZCTAs","text":"<ul> <li>Business market analysis</li> <li>Service area definition</li> <li>Regional demographic trends</li> <li>Mail-based service delivery</li> </ul>"},{"location":"tutorials/zcta-analysis-tutorial/#advanced-features","title":"Advanced Features","text":""},{"location":"tutorials/zcta-analysis-tutorial/#custom-configuration","title":"Custom Configuration","text":"<p>Build a census system with specific settings:</p> <pre><code>from socialmapper.census import CensusSystemBuilder, CacheStrategy\n\ncensus_system = (CensusSystemBuilder()\n    .with_api_key('your_key')\n    .with_cache_strategy(CacheStrategy.FILE)\n    .with_rate_limit(2.0)  # 2 requests per second\n    .build()\n)\n</code></pre>"},{"location":"tutorials/zcta-analysis-tutorial/#direct-shapefile-urls","title":"Direct Shapefile URLs","text":"<p>Get direct download links for ZCTA shapefiles:</p> <pre><code>urls = census_system.get_zcta_urls(year=2020)\nfor name, url in urls.items():\n    print(f\"{name}: {url}\")\n</code></pre> <p>Output: <pre><code>national_zcta: https://www2.census.gov/geo/tiger/TIGER2020/ZCTA520/tl_2020_us_zcta520.zip\n</code></pre></p>"},{"location":"tutorials/zcta-analysis-tutorial/#integration-with-socialmapper","title":"Integration with SocialMapper","text":"<p>Use ZCTAs with the main SocialMapper API:</p> <pre><code>from socialmapper import SocialMapperBuilder, SocialMapperClient\nfrom socialmapper.api.builder import GeographicLevel\n\nwith SocialMapperClient() as client:\n    config = (SocialMapperBuilder()\n        .with_location(\"Wake County\", \"North Carolina\")\n        .with_osm_pois(\"amenity\", \"library\")\n        .with_travel_time(15)\n        .with_census_variables(\"total_population\", \"median_household_income\")\n        .with_geographic_level(GeographicLevel.ZCTA)  # Use ZCTA instead of block group\n        .with_exports(csv=True, maps=True)  # Enable choropleth maps\n        .build()\n    )\n\n    result = client.run_analysis(config)\n</code></pre>"},{"location":"tutorials/zcta-analysis-tutorial/#zcta-choropleth-maps","title":"ZCTA Choropleth Maps","text":"<p>SocialMapper can generate choropleth maps at the ZCTA level, providing clear visualization of regional patterns:</p>"},{"location":"tutorials/zcta-analysis-tutorial/#map-types-generated","title":"Map Types Generated","text":"<p>When you enable map exports with <code>.with_exports(maps=True)</code>, SocialMapper creates:</p> <ol> <li>Population Maps: Visualize population density across ZCTAs</li> <li>Income Maps: Show median household income patterns</li> <li>Age Maps: Display median age demographics</li> <li>Distance Maps: Illustrate travel distance to nearest POI</li> <li>Accessibility Maps: Highlight ZCTAs within your specified travel time</li> </ol>"},{"location":"tutorials/zcta-analysis-tutorial/#example-full-pipeline-with-maps","title":"Example: Full Pipeline with Maps","text":"<pre><code>from socialmapper import SocialMapperBuilder, SocialMapperClient\nfrom socialmapper.api.builder import GeographicLevel\n\n# Run ZCTA analysis with map generation\nwith SocialMapperClient() as client:\n    config = (SocialMapperBuilder()\n        .with_location(\"Wake County\", \"North Carolina\")\n        .with_osm_pois(\"amenity\", \"library\")\n        .with_travel_time(15)\n        .with_census_variables(\n            \"total_population\",\n            \"median_household_income\",\n            \"median_age\"\n        )\n        .with_geographic_level(GeographicLevel.ZCTA)\n        .with_exports(csv=True, maps=True)\n        .build()\n    )\n\n    result = client.run_analysis(config)\n\n    if result.is_ok():\n        analysis = result.unwrap()\n        print(f\"Analyzed {analysis.census_units_analyzed} ZCTAs\")\n        print(\"Check output/maps/ for choropleth visualizations\")\n</code></pre>"},{"location":"tutorials/zcta-analysis-tutorial/#benefits-of-zcta-maps","title":"Benefits of ZCTA Maps","text":"<ul> <li>Regional Patterns: ZCTAs show broader patterns than block groups</li> <li>Business-Friendly: Perfect for market analysis presentations</li> <li>Faster Processing: Fewer units mean quicker map generation</li> <li>Familiar Boundaries: Stakeholders understand ZIP code areas</li> </ul>"},{"location":"tutorials/zcta-analysis-tutorial/#performance-tips","title":"Performance Tips","text":"<ol> <li>Use caching: ZCTA boundaries are cached automatically after first download</li> <li>Batch processing: Process multiple states together to reduce API calls</li> <li>Variable selection: Only request the census variables you need</li> <li>Consider rate limits: The census system handles rate limiting automatically</li> </ol>"},{"location":"tutorials/zcta-analysis-tutorial/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<p>Issue: \"ZCTA not found for location\" - Solution: Some locations may fall outside ZCTA boundaries (water bodies, unpopulated areas)</p> <p>Issue: \"Slow performance with many ZCTAs\" - Solution: Use batch processing and enable caching</p> <p>Issue: \"Census data missing for some ZCTAs\" - Solution: Some ZCTAs may have suppressed data for privacy; check variable availability</p>"},{"location":"tutorials/zcta-analysis-tutorial/#pro-tips","title":"Pro Tips","text":"<ul> <li>ZCTAs \u2248 ZIP codes: Close but not exactly the same</li> <li>Great for business: Everyone understands ZIP codes</li> <li>Faster analysis: Fewer geographic units to process</li> <li>Regional perspective: Better for area-wide trends than precise local analysis</li> </ul>"},{"location":"tutorials/zcta-analysis-tutorial/#next-steps","title":"Next Steps","text":"<p>After completing this tutorial:</p> <ol> <li>Try analyzing ZCTAs in your own state</li> <li>Compare ZCTA vs block group results for the same area</li> <li>Explore additional census variables for business analysis</li> <li>Build a market analysis tool using ZCTA demographics</li> <li>Check out the POI integration example for combining ZCTAs with location analysis</li> </ol>"},{"location":"tutorials/zcta-analysis-tutorial/#full-code","title":"Full Code","text":"<p>The complete tutorial script is available at: <code>examples/tutorials/04_zipcode_analysis.py</code></p>"},{"location":"tutorials/zcta-analysis-tutorial/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>ZCTAs approximate ZIP codes and are perfect for regional analysis</li> <li>They process much faster than block groups due to fewer units</li> <li>Ideal for business, marketing, and service area planning</li> <li>Trade precision for speed and familiarity</li> <li>Can be integrated seamlessly with SocialMapper's POI analysis</li> </ul>"},{"location":"user-guide/","title":"User Guide","text":"<p>This guide covers everything you need to know to use SocialMapper effectively.</p>"},{"location":"user-guide/#guide-overview","title":"Guide Overview","text":""},{"location":"user-guide/#finding-places","title":"Finding Places","text":"<p>How to search for libraries, schools, hospitals, and other community resources.</p>"},{"location":"user-guide/#travel-time-analysis","title":"Travel Time Analysis","text":"<p>Creating isochrones and understanding different travel modes.</p>"},{"location":"user-guide/#working-with-demographics","title":"Working with Demographics","text":"<p>Using Census variables to analyze population characteristics.</p>"},{"location":"user-guide/#using-custom-locations","title":"Using Custom Locations","text":"<p>Analyzing your own addresses and facilities.</p>"},{"location":"user-guide/#exporting-results","title":"Exporting Results","text":"<p>Saving your analysis as CSV files, maps, and reports.</p>"},{"location":"user-guide/#command-line-usage","title":"Command Line Usage","text":"<p>Using SocialMapper from the terminal.</p>"},{"location":"user-guide/#quick-reference","title":"Quick Reference","text":""},{"location":"user-guide/#common-tasks","title":"Common Tasks","text":"<p>Analyze library access: <pre><code>run_socialmapper(\n    state=\"California\",\n    county=\"Los Angeles County\",\n    place_type=\"library\",\n    travel_time=15\n)\n</code></pre></p> <p>Use custom locations: <pre><code>run_socialmapper(\n    custom_coords_path=\"my_locations.csv\",\n    travel_time=20,\n    census_variables=[\"total_population\"]\n)\n</code></pre></p> <p>Export maps: <pre><code>run_socialmapper(\n    state=\"Texas\",\n    county=\"Harris County\",\n    place_type=\"school\",\n    export_maps=True\n)\n</code></pre></p>"},{"location":"user-guide/#common-questions","title":"Common Questions","text":"<ul> <li>How do I find POI types? \u2192 See Finding Places</li> <li>What census variables are available? \u2192 See Demographics</li> <li>How do I use my own addresses? \u2192 See Custom Locations</li> <li>Can I analyze multiple locations? \u2192 Yes! See Batch Analysis</li> </ul>"},{"location":"user-guide/#need-help","title":"Need Help?","text":"<ul> <li>Check the FAQ</li> <li>View example code</li> <li>Report issues on GitHub</li> </ul>"},{"location":"user-guide/cli-usage/","title":"Command Line Usage","text":"<p>SocialMapper provides a command-line interface for running analyses without writing Python code.</p>"},{"location":"user-guide/cli-usage/#basic-syntax","title":"Basic Syntax","text":"<pre><code>socialmapper [options]\n</code></pre>"},{"location":"user-guide/cli-usage/#input-methods","title":"Input Methods","text":""},{"location":"user-guide/cli-usage/#poi-search","title":"POI Search","text":"<p>Find and analyze points of interest from OpenStreetMap:</p> <pre><code>socialmapper --poi --state \"Texas\" --county \"Harris County\" \\\n  --poi-type \"amenity\" --poi-name \"library\" --travel-time 15\n</code></pre>"},{"location":"user-guide/cli-usage/#custom-locations","title":"Custom Locations","text":"<p>Analyze your own locations from a CSV file:</p> <pre><code>socialmapper --custom-coords my_locations.csv --travel-time 15\n</code></pre>"},{"location":"user-guide/cli-usage/#address-geocoding","title":"Address Geocoding","text":"<p>Convert addresses to coordinates and analyze:</p> <pre><code>socialmapper --addresses --address-file addresses.csv \\\n  --travel-time 20 --geocoding-provider census\n</code></pre>"},{"location":"user-guide/cli-usage/#common-options","title":"Common Options","text":""},{"location":"user-guide/cli-usage/#travel-time","title":"Travel Time","text":"<pre><code># Set travel time (1-120 minutes)\nsocialmapper --poi --state \"California\" --county \"Los Angeles County\" \\\n  --place-type \"hospital\" --travel-time 20\n</code></pre>"},{"location":"user-guide/cli-usage/#census-variables","title":"Census Variables","text":"<pre><code># Add demographic variables\nsocialmapper --custom-coords locations.csv \\\n  --census-variables total_population median_age median_income\n</code></pre>"},{"location":"user-guide/cli-usage/#geographic-level","title":"Geographic Level","text":"<pre><code># Use ZIP codes instead of block groups\nsocialmapper --custom-coords locations.csv \\\n  --geographic-level zcta\n</code></pre>"},{"location":"user-guide/cli-usage/#export-options","title":"Export Options","text":"<pre><code># Export CSV and maps\nsocialmapper --custom-coords locations.csv \\\n  --export-csv --export-maps\n</code></pre>"},{"location":"user-guide/cli-usage/#poi-search-parameters","title":"POI Search Parameters","text":"<p>When using <code>--poi</code>, specify:</p> <ul> <li><code>--state</code> - State name or abbreviation</li> <li><code>--county</code> - County name (include \"County\")</li> <li><code>--poi-type</code> - OpenStreetMap type (e.g., \"amenity\")</li> <li><code>--poi-name</code> - Specific name (e.g., \"library\")</li> </ul> <p>Or use simplified: - <code>--place-type</code> - Common place type (e.g., \"library\", \"school\")</p>"},{"location":"user-guide/cli-usage/#examples","title":"Examples","text":"<pre><code># Find libraries\nsocialmapper --poi --state \"Illinois\" --county \"Cook County\" \\\n  --place-type \"library\" --travel-time 15\n\n# Find all amenities named \"hospital\"\nsocialmapper --poi --state \"Florida\" --county \"Miami-Dade County\" \\\n  --poi-type \"amenity\" --poi-name \"hospital\" --travel-time 20\n</code></pre>"},{"location":"user-guide/cli-usage/#custom-coordinates","title":"Custom Coordinates","text":"<p>Required CSV format: <pre><code>name,latitude,longitude\nLocation 1,35.7796,-78.6382\nLocation 2,35.8934,-78.8637\n</code></pre></p> <p>Usage: <pre><code>socialmapper --custom-coords my_locations.csv \\\n  --travel-time 15 --export-csv\n</code></pre></p>"},{"location":"user-guide/cli-usage/#address-geocoding_1","title":"Address Geocoding","text":"<p>For address-based analysis:</p> <pre><code># Basic address geocoding\nsocialmapper --addresses --address-file addresses.csv\n\n# With specific provider\nsocialmapper --addresses --address-file addresses.csv \\\n  --geocoding-provider census\n\n# With quality threshold\nsocialmapper --addresses --address-file addresses.csv \\\n  --geocoding-quality exact\n</code></pre>"},{"location":"user-guide/cli-usage/#output-control","title":"Output Control","text":""},{"location":"user-guide/cli-usage/#output-directory","title":"Output Directory","text":"<pre><code># Custom output location\nsocialmapper --custom-coords locations.csv \\\n  --output-dir my_results\n</code></pre>"},{"location":"user-guide/cli-usage/#export-formats","title":"Export Formats","text":"<pre><code># CSV only (default)\nsocialmapper --custom-coords locations.csv --export-csv\n\n# Add maps\nsocialmapper --custom-coords locations.csv \\\n  --export-csv --export-maps\n\n# Add isochrones\nsocialmapper --custom-coords locations.csv \\\n  --export-csv --export-isochrones\n</code></pre>"},{"location":"user-guide/cli-usage/#advanced-options","title":"Advanced Options","text":""},{"location":"user-guide/cli-usage/#census-api-key","title":"Census API Key","text":"<pre><code># Provide API key\nsocialmapper --custom-coords locations.csv \\\n  --api-key YOUR_CENSUS_API_KEY\n\n# Or set environment variable\nexport CENSUS_API_KEY=YOUR_KEY\nsocialmapper --custom-coords locations.csv\n</code></pre>"},{"location":"user-guide/cli-usage/#quiet-mode","title":"Quiet Mode","text":"<pre><code># Reduce output verbosity\nsocialmapper --custom-coords locations.csv --quiet\n</code></pre>"},{"location":"user-guide/cli-usage/#version-information","title":"Version Information","text":"<pre><code># Check version\nsocialmapper --version\n</code></pre>"},{"location":"user-guide/cli-usage/#complete-examples","title":"Complete Examples","text":""},{"location":"user-guide/cli-usage/#urban-library-analysis","title":"Urban Library Analysis","text":"<pre><code>socialmapper --poi \\\n  --state \"New York\" \\\n  --county \"New York County\" \\\n  --place-type \"library\" \\\n  --travel-time 15 \\\n  --census-variables total_population median_income \\\n  --export-csv \\\n  --export-maps\n</code></pre>"},{"location":"user-guide/cli-usage/#rural-healthcare-access","title":"Rural Healthcare Access","text":"<pre><code>socialmapper --poi \\\n  --state \"Montana\" \\\n  --county \"Yellowstone County\" \\\n  --place-type \"hospital\" \\\n  --travel-time 45 \\\n  --geographic-level zcta \\\n  --census-variables total_population percent_poverty \\\n  --export-csv\n</code></pre>"},{"location":"user-guide/cli-usage/#custom-facility-analysis","title":"Custom Facility Analysis","text":"<pre><code>socialmapper --custom-coords facilities.csv \\\n  --travel-time 20 \\\n  --census-variables total_population median_age percent_without_vehicle \\\n  --export-csv \\\n  --export-maps \\\n  --output-dir facility_analysis\n</code></pre>"},{"location":"user-guide/cli-usage/#getting-help","title":"Getting Help","text":"<pre><code># Show all options\nsocialmapper --help\n\n# Show version\nsocialmapper --version\n</code></pre>"},{"location":"user-guide/cli-usage/#tips","title":"Tips","text":"<ol> <li>Use quotes around multi-word values: <code>--state \"New York\"</code></li> <li>Include \"County\" in county names: <code>--county \"Los Angeles County\"</code></li> <li>Check spelling of place names and types</li> <li>Start simple with fewer options, then add more</li> <li>Use --quiet for scripting and automation</li> </ol>"},{"location":"user-guide/cli-usage/#next-steps","title":"Next Steps","text":"<ul> <li>Explore available census variables</li> <li>Learn about travel time options</li> <li>Understand output formats</li> </ul>"},{"location":"user-guide/custom-locations/","title":"Using Custom Locations","text":"<p>SocialMapper lets you analyze accessibility from your own locations beyond what's available in OpenStreetMap. This is useful for analyzing your organization's facilities, specific addresses, or any custom points of interest.</p>"},{"location":"user-guide/custom-locations/#csv-file-format","title":"CSV File Format","text":"<p>Create a CSV file with your locations. The basic format requires: - <code>name</code> - Location name - <code>latitude</code> - Decimal latitude - <code>longitude</code> - Decimal longitude</p>"},{"location":"user-guide/custom-locations/#example-csv","title":"Example CSV","text":"<pre><code>name,latitude,longitude\nMain Office,35.7796,-78.6382\nBranch Office,35.8934,-78.8637\nCommunity Center,35.7321,-78.5512\n</code></pre>"},{"location":"user-guide/custom-locations/#basic-usage","title":"Basic Usage","text":""},{"location":"user-guide/custom-locations/#python-api","title":"Python API","text":"<pre><code>from socialmapper import run_socialmapper\n\n# Analyze custom locations\nresults = run_socialmapper(\n    custom_coords_path=\"my_locations.csv\",\n    travel_time=15,\n    census_variables=[\"total_population\", \"median_household_income\"]\n)\n</code></pre>"},{"location":"user-guide/custom-locations/#command-line","title":"Command Line","text":"<pre><code>socialmapper --custom-coords my_locations.csv --travel-time 15\n</code></pre>"},{"location":"user-guide/custom-locations/#working-with-results","title":"Working with Results","text":"<p>The results dictionary includes: - <code>poi_data</code> - Your input locations with added geographic context - <code>census_data</code> - Demographics for areas within travel time - Output files in the <code>output/</code> directory</p> <pre><code># Check results\nprint(f\"Analyzed {len(results['poi_data'])} locations\")\nprint(f\"Found {len(results['census_data'])} census block groups\")\n</code></pre>"},{"location":"user-guide/custom-locations/#travel-time-options","title":"Travel Time Options","text":"<p>Adjust the travel time to change the analysis area:</p> <pre><code># 5-minute walk\nresults = run_socialmapper(\n    custom_coords_path=\"locations.csv\",\n    travel_time=5\n)\n\n# 20-minute drive \nresults = run_socialmapper(\n    custom_coords_path=\"locations.csv\", \n    travel_time=20\n)\n</code></pre>"},{"location":"user-guide/custom-locations/#census-variables","title":"Census Variables","text":"<p>Add more demographic variables to your analysis:</p> <pre><code>results = run_socialmapper(\n    custom_coords_path=\"locations.csv\",\n    travel_time=15,\n    census_variables=[\n        \"total_population\",\n        \"median_household_income\",\n        \"median_age\",\n        \"percent_poverty\"\n    ]\n)\n</code></pre> <p>See demographic variables for the full list.</p>"},{"location":"user-guide/custom-locations/#export-options","title":"Export Options","text":""},{"location":"user-guide/custom-locations/#save-results-as-csv","title":"Save Results as CSV","text":"<pre><code>results = run_socialmapper(\n    custom_coords_path=\"locations.csv\",\n    travel_time=15,\n    export_csv=True  # Default\n)\n# Results saved to output/csv/\n</code></pre>"},{"location":"user-guide/custom-locations/#generate-maps","title":"Generate Maps","text":"<pre><code>results = run_socialmapper(\n    custom_coords_path=\"locations.csv\",\n    travel_time=15,\n    export_maps=True\n)\n# Maps saved to output/maps/\n</code></pre>"},{"location":"user-guide/custom-locations/#tips-and-best-practices","title":"Tips and Best Practices","text":""},{"location":"user-guide/custom-locations/#data-preparation","title":"Data Preparation","text":"<ol> <li>Verify coordinates - Ensure latitude/longitude are correct</li> <li>Use decimal degrees - e.g., 35.7796, -78.6382</li> <li>Check coordinate order - Latitude first, then longitude</li> <li>Name locations clearly - Use descriptive names</li> </ol>"},{"location":"user-guide/custom-locations/#performance","title":"Performance","text":"<ol> <li>Start small - Test with a few locations first</li> <li>Use appropriate travel times - Larger areas take longer</li> <li>Limit census variables - Only request what you need</li> </ol>"},{"location":"user-guide/custom-locations/#common-issues","title":"Common Issues","text":"<p>\"File not found\" - Check the file path - Use absolute paths if needed</p> <p>\"Invalid coordinates\" - Verify latitude is between -90 and 90 - Verify longitude is between -180 and 180 - Check for swapped coordinates</p> <p>\"No census data\" - Ensure locations are in the United States - Check coordinate accuracy</p>"},{"location":"user-guide/custom-locations/#batch-analysis","title":"Batch Analysis","text":"<p>To analyze multiple locations at once, simply include all locations in your CSV file:</p> <pre><code>name,latitude,longitude\nStore 1,35.7796,-78.6382\nStore 2,35.8934,-78.8637\nStore 3,35.7321,-78.5512\nStore 4,35.9102,-78.7234\n</code></pre> <p>SocialMapper will analyze all locations in a single run:</p> <pre><code># Analyze all locations at once\nresults = run_socialmapper(\n    custom_coords_path=\"all_stores.csv\",\n    travel_time=15\n)\n\nprint(f\"Analyzed {len(results['poi_data'])} locations\")\n</code></pre> <p>For separate analysis of each location:</p> <pre><code>import pandas as pd\n\n# Load locations\nlocations = pd.read_csv(\"stores.csv\")\n\n# Analyze each separately\nfor _, location in locations.iterrows():\n    # Create single-location CSV or use data directly\n    result = run_socialmapper(\n        custom_coords_path=create_temp_csv(location),\n        travel_time=15\n    )\n    print(f\"{location['name']}: {sum(r['total_population'] for r in result['census_data']):,} people\")\n</code></pre>"},{"location":"user-guide/custom-locations/#example-use-cases","title":"Example Use Cases","text":""},{"location":"user-guide/custom-locations/#facility-analysis","title":"Facility Analysis","text":"<p>Analyze accessibility to your organization's locations:</p> <pre><code># Load facility locations\nresults = run_socialmapper(\n    custom_coords_path=\"our_facilities.csv\",\n    travel_time=15,\n    census_variables=[\"total_population\", \"median_income\"]\n)\n\n# Review population reach\ntotal_pop = sum(row.get(\"total_population\", 0) for row in results[\"census_data\"])\nprint(f\"Total population within 15 minutes: {total_pop:,}\")\n</code></pre>"},{"location":"user-guide/custom-locations/#site-comparison","title":"Site Comparison","text":"<p>Compare potential new locations:</p> <pre><code># Analyze each candidate site\nfor site_file in [\"site_a.csv\", \"site_b.csv\", \"site_c.csv\"]:\n    results = run_socialmapper(\n        custom_coords_path=site_file,\n        travel_time=10,\n        census_variables=[\"total_population\"]\n    )\n    print(f\"{site_file}: Population reach = {sum(r['total_population'] for r in results['census_data']):,}\")\n</code></pre>"},{"location":"user-guide/custom-locations/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about travel time analysis</li> <li>Add more demographic variables</li> <li>Export your results in different formats</li> </ul>"},{"location":"user-guide/demographics/","title":"Working with Demographics","text":"<p>SocialMapper integrates US Census data to help you understand the population characteristics within travel time areas.</p>"},{"location":"user-guide/demographics/#available-census-variables","title":"Available Census Variables","text":"<p>SocialMapper provides access to a wide range of census variables. The most commonly used variables include:</p> <pre><code># Common demographic variables\ncensus_variables = [\n    \"total_population\",        # Total population count\n    \"median_age\",             # Median age\n    \"median_household_income\", # Median household income\n    \"percent_poverty\",        # Percentage below poverty line\n    \"percent_without_vehicle\" # Percentage of households without vehicles\n]\n</code></pre> <p>For a complete list of all available census variables, see the Census Variables Reference.</p>"},{"location":"user-guide/demographics/#using-variables","title":"Using Variables","text":"<pre><code>from socialmapper import run_socialmapper\n\nresults = run_socialmapper(\n    state=\"North Carolina\",\n    county=\"Wake County\", \n    place_type=\"library\",\n    travel_time=15,\n    census_variables=[\"total_population\", \"median_income\"]\n)\n</code></pre>"},{"location":"user-guide/demographics/#variable-format","title":"Variable Format","text":"<p>SocialMapper accepts both user-friendly names and Census Bureau variable codes. Here are some examples:</p> Friendly Name Description Census Code <code>total_population</code> Total population B01003_001E <code>median_age</code> Median age B01002_001E <code>median_household_income</code> Median household income B19013_001E <code>median_income</code> Same as above B19013_001E <code>percent_poverty</code> % below poverty line B17001_002E <code>percent_without_vehicle</code> % households no vehicle (calculated) <p>See the Census Variables Reference for the complete list of available variables.</p>"},{"location":"user-guide/demographics/#working-with-results","title":"Working with Results","text":"<p>Census data is returned in the <code>census_data</code> list:</p> <pre><code># Access census data\nfor block_group in results['census_data']:\n    population = block_group.get('total_population', 0)\n    income = block_group.get('median_household_income', 0)\n    print(f\"Block group {block_group['GEOID']}: Pop={population}, Income=${income}\")\n</code></pre>"},{"location":"user-guide/demographics/#calculating-totals","title":"Calculating Totals","text":"<p>Sum values across all block groups:</p> <pre><code># Total population within travel time\ntotal_pop = sum(\n    row.get('total_population', 0) \n    for row in results['census_data']\n)\n\nprint(f\"Total population: {total_pop:,}\")\n\n# Average median income (weighted by population)\ntotal_income = 0\ntotal_pop_for_income = 0\n\nfor row in results['census_data']:\n    pop = row.get('total_population', 0)\n    income = row.get('median_household_income', 0)\n    if income &gt; 0:  # Exclude missing data\n        total_income += income * pop\n        total_pop_for_income += pop\n\navg_income = total_income / total_pop_for_income if total_pop_for_income &gt; 0 else 0\nprint(f\"Average median income: ${avg_income:,.0f}\")\n</code></pre>"},{"location":"user-guide/demographics/#command-line-usage","title":"Command Line Usage","text":"<pre><code># Specify multiple variables\nsocialmapper --poi --state \"Texas\" --county \"Harris County\" \\\n  --place-type \"school\" --travel-time 10 \\\n  --census-variables total_population median_age percent_poverty\n</code></pre>"},{"location":"user-guide/demographics/#geographic-levels","title":"Geographic Levels","text":"<p>SocialMapper supports two geographic levels:</p>"},{"location":"user-guide/demographics/#block-groups-default","title":"Block Groups (Default)","text":"<ul> <li>Smaller geographic units</li> <li>More precise demographics</li> <li>Better for urban analysis</li> </ul> <pre><code>results = run_socialmapper(\n    custom_coords_path=\"locations.csv\",\n    geographic_level=\"block-group\",  # Default\n    census_variables=[\"total_population\"]\n)\n</code></pre>"},{"location":"user-guide/demographics/#zip-code-tabulation-areas-zcta","title":"ZIP Code Tabulation Areas (ZCTA)","text":"<ul> <li>Larger geographic units</li> <li>Approximate ZIP code boundaries</li> <li>Better for regional analysis</li> </ul> <pre><code>results = run_socialmapper(\n    custom_coords_path=\"locations.csv\",\n    geographic_level=\"zcta\",\n    census_variables=[\"total_population\"]\n)\n</code></pre>"},{"location":"user-guide/demographics/#handling-missing-data","title":"Handling Missing Data","text":"<p>Census data may be missing for some areas:</p> <pre><code># Safe data access\nfor row in results['census_data']:\n    # Use .get() with default value\n    population = row.get('total_population', 0)\n\n    # Check for None values\n    income = row.get('median_household_income')\n    if income is not None and income &gt; 0:\n        print(f\"Valid income: ${income}\")\n</code></pre>"},{"location":"user-guide/demographics/#performance-tips","title":"Performance Tips","text":"<ol> <li>Request only needed variables - Each variable adds processing time</li> <li>Start with basic variables - total_population is fastest</li> <li>Use block groups for local analysis - More accurate for small areas</li> <li>Use ZCTA for regional analysis - Faster for large areas</li> </ol>"},{"location":"user-guide/demographics/#example-applications","title":"Example Applications","text":""},{"location":"user-guide/demographics/#demographic-profile","title":"Demographic Profile","text":"<pre><code># Create demographic profile of library service areas\nresults = run_socialmapper(\n    state=\"California\",\n    county=\"San Diego County\",\n    place_type=\"library\",\n    travel_time=15,\n    census_variables=[\n        \"total_population\",\n        \"median_age\",\n        \"median_household_income\",\n        \"percent_poverty\"\n    ]\n)\n\n# Summarize demographics\ntotal_pop = sum(r.get('total_population', 0) for r in results['census_data'])\navg_age = sum(r.get('median_age', 0) * r.get('total_population', 0) \n              for r in results['census_data']) / total_pop\n\nprint(f\"Population within 15 min of libraries: {total_pop:,}\")\nprint(f\"Average median age: {avg_age:.1f}\")\n</code></pre>"},{"location":"user-guide/demographics/#equity-analysis","title":"Equity Analysis","text":"<pre><code># Analyze access for vulnerable populations\nresults = run_socialmapper(\n    custom_coords_path=\"health_clinics.csv\",\n    travel_time=20,\n    census_variables=[\n        \"total_population\",\n        \"percent_poverty\",\n        \"percent_without_vehicle\"\n    ]\n)\n\n# Calculate vulnerable population\nvulnerable_pop = 0\nfor row in results['census_data']:\n    pop = row.get('total_population', 0)\n    poverty_rate = row.get('percent_poverty', 0) / 100\n    vulnerable_pop += pop * poverty_rate\n\nprint(f\"Population in poverty within reach: {vulnerable_pop:,.0f}\")\n</code></pre>"},{"location":"user-guide/demographics/#census-data-notes","title":"Census Data Notes","text":"<ul> <li>Data from American Community Survey (ACS)</li> <li>Usually 1-2 years old</li> <li>Some rural areas may have limited data</li> <li>Income values are in dollars</li> <li>Percentages are 0-100, not decimals</li> </ul>"},{"location":"user-guide/demographics/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about exporting results</li> <li>Explore travel time options</li> <li>Find different place types</li> </ul>"},{"location":"user-guide/exporting-results/","title":"Exporting Results","text":"<p>SocialMapper can export analysis results in multiple formats for use in reports, further analysis, or visualization in other tools.</p>"},{"location":"user-guide/exporting-results/#output-directory-structure","title":"Output Directory Structure","text":"<p>By default, results are saved to the <code>output/</code> directory:</p> <pre><code>output/\n\u251c\u2500\u2500 csv/          # CSV data files\n\u251c\u2500\u2500 maps/         # Map images (if enabled)\n\u2514\u2500\u2500 isochrones/   # Isochrone data (if enabled)\n</code></pre>"},{"location":"user-guide/exporting-results/#csv-export-default","title":"CSV Export (Default)","text":"<p>CSV export is enabled by default and creates detailed data files.</p>"},{"location":"user-guide/exporting-results/#basic-usage","title":"Basic Usage","text":"<pre><code>from socialmapper import run_socialmapper\n\n# CSV export is automatic\nresults = run_socialmapper(\n    state=\"Ohio\",\n    county=\"Franklin County\",\n    place_type=\"library\",\n    travel_time=15,\n    export_csv=True  # Default\n)\n</code></pre>"},{"location":"user-guide/exporting-results/#output-files","title":"Output Files","text":"<p>For POI analysis, you'll get: - <code>{location}_{type}_{time}min_census_data.csv</code> - Census demographics - Location details and metadata</p> <p>Example: <code>columbus_amenity_library_15min_census_data.csv</code></p>"},{"location":"user-guide/exporting-results/#csv-contents","title":"CSV Contents","text":"<p>The census data CSV includes: - <code>GEOID</code> - Census block group identifier - All requested census variables - Geographic identifiers (state, county, tract)</p>"},{"location":"user-guide/exporting-results/#map-export","title":"Map Export","text":"<p>Generate static map images showing isochrones and demographics.</p>"},{"location":"user-guide/exporting-results/#enable-map-export","title":"Enable Map Export","text":"<pre><code>results = run_socialmapper(\n    custom_coords_path=\"locations.csv\",\n    travel_time=15,\n    census_variables=[\"total_population\"],\n    export_maps=True  # Generate maps\n)\n</code></pre>"},{"location":"user-guide/exporting-results/#map-types","title":"Map Types","text":"<p>SocialMapper creates: 1. Isochrone maps - Shows travel time areas 2. Demographic maps - Visualizes census data (one per variable)</p>"},{"location":"user-guide/exporting-results/#command-line","title":"Command Line","text":"<pre><code>socialmapper --custom-coords locations.csv --travel-time 15 \\\n  --export-csv --export-maps\n</code></pre>"},{"location":"user-guide/exporting-results/#isochrone-export","title":"Isochrone Export","text":"<p>Export the actual isochrone geometries for use in GIS software.</p> <pre><code>results = run_socialmapper(\n    custom_coords_path=\"locations.csv\",\n    travel_time=15,\n    export_isochrones=True\n)\n# Creates output/isochrones/*.parquet files\n</code></pre>"},{"location":"user-guide/exporting-results/#custom-output-directory","title":"Custom Output Directory","text":"<p>Change where files are saved:</p> <pre><code>results = run_socialmapper(\n    custom_coords_path=\"locations.csv\",\n    travel_time=15,\n    output_dir=\"my_analysis_results\"\n)\n# Files saved to my_analysis_results/csv/, etc.\n</code></pre>"},{"location":"user-guide/exporting-results/#working-with-exported-data","title":"Working with Exported Data","text":""},{"location":"user-guide/exporting-results/#load-csv-in-python","title":"Load CSV in Python","text":"<pre><code>import pandas as pd\n\n# Load exported census data\ndf = pd.read_csv(\"output/csv/library_15min_census_data.csv\")\n\n# Analyze\ntotal_pop = df['total_population'].sum()\nprint(f\"Total population: {total_pop:,}\")\n</code></pre>"},{"location":"user-guide/exporting-results/#load-in-excel","title":"Load in Excel","text":"<ol> <li>Open Excel</li> <li>Data \u2192 From Text/CSV</li> <li>Select the CSV file</li> <li>Review and load</li> </ol>"},{"location":"user-guide/exporting-results/#use-in-gis-software","title":"Use in GIS Software","text":"<p>The isochrone parquet files can be loaded in: - QGIS (with parquet plugin) - ArcGIS Pro - Python with GeoPandas</p> <pre><code>import geopandas as gpd\n\n# Load isochrone\nisochrone = gpd.read_parquet(\"output/isochrones/isochrone15_location.parquet\")\n</code></pre>"},{"location":"user-guide/exporting-results/#file-naming-convention","title":"File Naming Convention","text":"<p>Files are named systematically:</p> <p>Census Data CSV: <code>{location}_{poi_type}_{poi_name}_{travel_time}min_census_data.csv</code></p> <p>Maps: <code>{location}_{poi_type}_{poi_name}_{travel_time}min_{variable}_map.png</code></p> <p>Isochrones: <code>isochrone{time}_{location}.parquet</code></p>"},{"location":"user-guide/exporting-results/#tips-for-using-exports","title":"Tips for Using Exports","text":""},{"location":"user-guide/exporting-results/#for-reports","title":"For Reports","text":"<ol> <li>Use CSV files for data tables</li> <li>Include map images for visualization</li> <li>Calculate summary statistics from raw data</li> </ol>"},{"location":"user-guide/exporting-results/#for-further-analysis","title":"For Further Analysis","text":"<ol> <li>Load CSVs into pandas/R</li> <li>Join with other datasets using GEOID</li> <li>Create custom visualizations</li> </ol>"},{"location":"user-guide/exporting-results/#for-gis","title":"For GIS","text":"<ol> <li>Use isochrone exports</li> <li>Join census data by GEOID</li> <li>Create custom map layouts</li> </ol>"},{"location":"user-guide/exporting-results/#example-complete-export","title":"Example: Complete Export","text":"<pre><code># Full export example\nresults = run_socialmapper(\n    state=\"Washington\",\n    county=\"King County\",\n    place_type=\"hospital\",\n    travel_time=20,\n    census_variables=[\n        \"total_population\",\n        \"median_age\",\n        \"percent_poverty\"\n    ],\n    export_csv=True,\n    export_maps=True,\n    export_isochrones=True,\n    output_dir=\"hospital_analysis\"\n)\n\nprint(\"Export complete!\")\nprint(\"Files saved to:\")\nprint(\"- hospital_analysis/csv/\")\nprint(\"- hospital_analysis/maps/\") \nprint(\"- hospital_analysis/isochrones/\")\n</code></pre>"},{"location":"user-guide/exporting-results/#limitations","title":"Limitations","text":"<ul> <li>Maps are static PNG images</li> <li>Large areas may produce large files</li> <li>Map generation takes additional time</li> </ul>"},{"location":"user-guide/exporting-results/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about command line usage</li> <li>Explore custom locations</li> <li>Understand census variables</li> </ul>"},{"location":"user-guide/finding-places/","title":"Finding Places","text":"<p>SocialMapper can find various types of community resources using OpenStreetMap data. This guide shows you how to search for different places.</p>"},{"location":"user-guide/finding-places/#common-place-types","title":"Common Place Types","text":""},{"location":"user-guide/finding-places/#essential-services","title":"Essential Services","text":"<p>Libraries <pre><code>run_socialmapper(\n    state=\"Illinois\",\n    county=\"Cook County\",\n    place_type=\"library\",\n    travel_time=15\n)\n</code></pre></p> <p>Schools <pre><code>run_socialmapper(\n    state=\"Texas\",\n    county=\"Harris County\",\n    place_type=\"school\",\n    travel_time=10\n)\n</code></pre></p> <p>Hospitals <pre><code>run_socialmapper(\n    state=\"California\",\n    county=\"Los Angeles County\",\n    place_type=\"hospital\",\n    travel_time=20\n)\n</code></pre></p>"},{"location":"user-guide/finding-places/#community-resources","title":"Community Resources","text":"<p>Parks <pre><code>run_socialmapper(\n    state=\"Colorado\",\n    county=\"Denver County\",\n    place_type=\"park\",\n    travel_time=15\n)\n</code></pre></p> <p>Grocery Stores <pre><code>run_socialmapper(\n    state=\"Ohio\",\n    county=\"Franklin County\",\n    place_type=\"supermarket\",\n    travel_time=10\n)\n</code></pre></p> <p>Community Centers <pre><code>run_socialmapper(\n    state=\"Washington\",\n    county=\"King County\",\n    place_type=\"community_centre\",\n    travel_time=15\n)\n</code></pre></p>"},{"location":"user-guide/finding-places/#openstreetmap-tags","title":"OpenStreetMap Tags","text":"<p>SocialMapper uses OpenStreetMap tags to find places. Common tags include:</p>"},{"location":"user-guide/finding-places/#amenity-tags","title":"Amenity Tags","text":"<ul> <li><code>library</code> - Public libraries</li> <li><code>school</code> - Schools (all levels)</li> <li><code>hospital</code> - Hospitals</li> <li><code>clinic</code> - Medical clinics</li> <li><code>pharmacy</code> - Pharmacies</li> <li><code>bank</code> - Banks</li> <li><code>post_office</code> - Post offices</li> <li><code>police</code> - Police stations</li> <li><code>fire_station</code> - Fire stations</li> <li><code>community_centre</code> - Community centers</li> </ul>"},{"location":"user-guide/finding-places/#shop-tags","title":"Shop Tags","text":"<ul> <li><code>supermarket</code> - Grocery stores</li> <li><code>convenience</code> - Convenience stores</li> <li><code>bakery</code> - Bakeries</li> <li><code>butcher</code> - Butcher shops</li> </ul>"},{"location":"user-guide/finding-places/#leisure-tags","title":"Leisure Tags","text":"<ul> <li><code>park</code> - Parks</li> <li><code>playground</code> - Playgrounds</li> <li><code>sports_centre</code> - Sports facilities</li> <li><code>swimming_pool</code> - Public pools</li> </ul>"},{"location":"user-guide/finding-places/#advanced-searches","title":"Advanced Searches","text":""},{"location":"user-guide/finding-places/#using-poi-type-and-name","title":"Using POI Type and Name","text":"<p>For more specific searches, combine type and name:</p> <pre><code># Find all Whole Foods locations\nrun_socialmapper(\n    state=\"California\",\n    county=\"Orange County\",\n    poi_type=\"shop\",\n    poi_name=\"supermarket\",\n    travel_time=15\n)\n</code></pre>"},{"location":"user-guide/finding-places/#multiple-counties","title":"Multiple Counties","text":"<p>Analyze multiple counties at once:</p> <pre><code># Analyze libraries across a metro area\nfor county in [\"Cook County\", \"DuPage County\", \"Lake County\"]:\n    results = run_socialmapper(\n        state=\"Illinois\",\n        county=county,\n        place_type=\"library\",\n        travel_time=15\n    )\n</code></pre>"},{"location":"user-guide/finding-places/#tips-for-finding-places","title":"Tips for Finding Places","text":"<ol> <li>Use singular forms - <code>library</code> not <code>libraries</code></li> <li>Check OpenStreetMap - Visit openstreetmap.org to verify place names</li> <li>Try variations - Some places might be tagged differently</li> <li>Be specific - Use exact county names with \"County\" suffix</li> </ol>"},{"location":"user-guide/finding-places/#command-line-examples","title":"Command Line Examples","text":"<p>Find libraries: <pre><code>socialmapper analyze --state \"New York\" --county \"New York County\" \\\n  --place-type \"library\" --travel-time 15\n</code></pre></p> <p>Find hospitals with custom output: <pre><code>socialmapper analyze --state \"Florida\" --county \"Miami-Dade County\" \\\n  --place-type \"hospital\" --travel-time 20 --export-csv --export-maps\n</code></pre></p>"},{"location":"user-guide/finding-places/#troubleshooting","title":"Troubleshooting","text":"<p>No places found? - Verify the county name is correct - Check if the place type exists in that area - Try a broader search area - Ensure internet connection is active</p> <p>Too many results? - Use poi_name to filter further - Reduce the geographic area - Export to CSV and filter in Excel</p>"},{"location":"user-guide/finding-places/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about analyzing travel times</li> <li>Add demographic analysis</li> <li>Use your own locations</li> </ul>"},{"location":"user-guide/travel-time/","title":"Travel Time Analysis","text":"<p>Travel time analysis is at the heart of SocialMapper. It creates isochrones - areas reachable within a specific time - to understand accessibility.</p>"},{"location":"user-guide/travel-time/#what-are-isochrones","title":"What are Isochrones?","text":"<p>Isochrones are geographic areas showing all locations reachable within a given travel time from a starting point. For example, a 15-minute isochrone shows everywhere you can reach in 15 minutes.</p>"},{"location":"user-guide/travel-time/#setting-travel-time","title":"Setting Travel Time","text":""},{"location":"user-guide/travel-time/#basic-usage","title":"Basic Usage","text":"<pre><code>from socialmapper import run_socialmapper\n\n# 15-minute analysis (default)\nresults = run_socialmapper(\n    state=\"Texas\",\n    county=\"Harris County\",\n    place_type=\"library\",\n    travel_time=15\n)\n</code></pre>"},{"location":"user-guide/travel-time/#different-time-intervals","title":"Different Time Intervals","text":"<pre><code># 5-minute walk (tight urban area)\nresults = run_socialmapper(\n    custom_coords_path=\"locations.csv\",\n    travel_time=5\n)\n\n# 30-minute drive (suburban/rural)\nresults = run_socialmapper(\n    custom_coords_path=\"locations.csv\", \n    travel_time=30\n)\n</code></pre>"},{"location":"user-guide/travel-time/#command-line","title":"Command Line","text":"<pre><code># Set travel time\nsocialmapper --poi --state \"California\" --county \"Los Angeles County\" \\\n  --place-type \"hospital\" --travel-time 20\n</code></pre>"},{"location":"user-guide/travel-time/#travel-time-ranges","title":"Travel Time Ranges","text":"<p>SocialMapper supports travel times from 1 to 120 minutes:</p> <ul> <li>1-5 minutes: Very local, walkable neighborhoods</li> <li>10-15 minutes: Standard urban accessibility</li> <li>20-30 minutes: Suburban reach</li> <li>45-60 minutes: Regional analysis</li> <li>60+ minutes: Large area coverage</li> </ul>"},{"location":"user-guide/travel-time/#how-it-works","title":"How It Works","text":"<ol> <li>Starting Points: Your POIs or custom locations</li> <li>Road Network: Uses OpenStreetMap road data</li> <li>Travel Calculation: Follows actual roads, not straight lines</li> <li>Area Generation: Creates polygon showing reachable area</li> <li>Census Integration: Finds all census blocks within the area</li> </ol>"},{"location":"user-guide/travel-time/#understanding-results","title":"Understanding Results","text":"<p>The travel time analysis affects what census data you receive:</p> <pre><code># Smaller area = fewer census blocks\nresults_5min = run_socialmapper(\n    custom_coords_path=\"store.csv\",\n    travel_time=5\n)\n\n# Larger area = more census blocks\nresults_20min = run_socialmapper(\n    custom_coords_path=\"store.csv\",\n    travel_time=20\n)\n\nprint(f\"5-min blocks: {len(results_5min['census_data'])}\")\nprint(f\"20-min blocks: {len(results_20min['census_data'])}\")\n</code></pre>"},{"location":"user-guide/travel-time/#practical-examples","title":"Practical Examples","text":""},{"location":"user-guide/travel-time/#compare-different-times","title":"Compare Different Times","text":"<pre><code># Analyze population reach at different intervals\nfor minutes in [5, 10, 15, 20, 30]:\n    results = run_socialmapper(\n        state=\"Illinois\",\n        county=\"Cook County\",\n        place_type=\"grocery_store\",\n        travel_time=minutes\n    )\n\n    total_pop = sum(\n        row.get('total_population', 0) \n        for row in results['census_data']\n    )\n\n    print(f\"{minutes} minutes: {total_pop:,} people\")\n</code></pre>"},{"location":"user-guide/travel-time/#service-area-planning","title":"Service Area Planning","text":"<pre><code># Find optimal service time\nresults_10 = run_socialmapper(\n    custom_coords_path=\"new_clinic.csv\",\n    travel_time=10,\n    census_variables=[\"total_population\", \"percent_poverty\"]\n)\n\nresults_20 = run_socialmapper(\n    custom_coords_path=\"new_clinic.csv\",\n    travel_time=20,\n    census_variables=[\"total_population\", \"percent_poverty\"]\n)\n\n# Compare coverage\npop_10 = sum(r['total_population'] for r in results_10['census_data'])\npop_20 = sum(r['total_population'] for r in results_20['census_data'])\n\nprint(f\"10-min reach: {pop_10:,} people\")\nprint(f\"20-min reach: {pop_20:,} people\")\nprint(f\"Additional reach: {pop_20 - pop_10:,} people\")\n</code></pre>"},{"location":"user-guide/travel-time/#performance-considerations","title":"Performance Considerations","text":"<p>Larger travel times require more processing:</p> <ul> <li>5-10 minutes: Fast processing</li> <li>15-20 minutes: Moderate processing time</li> <li>30+ minutes: May take longer, especially in dense areas</li> </ul> <p>Tips for better performance: 1. Start with smaller travel times for testing 2. Use fewer census variables 3. Analyze fewer locations at once 4. Enable caching (default)</p>"},{"location":"user-guide/travel-time/#common-use-cases","title":"Common Use Cases","text":""},{"location":"user-guide/travel-time/#walking-distance-5-15-minutes","title":"Walking Distance (5-15 minutes)","text":"<ul> <li>Neighborhood services</li> <li>Local parks</li> <li>Elementary schools</li> <li>Corner stores</li> </ul>"},{"location":"user-guide/travel-time/#short-drive-15-30-minutes","title":"Short Drive (15-30 minutes)","text":"<ul> <li>Shopping centers</li> <li>High schools</li> <li>Medical clinics</li> <li>Restaurants</li> </ul>"},{"location":"user-guide/travel-time/#longer-trips-30-60-minutes","title":"Longer Trips (30-60 minutes)","text":"<ul> <li>Regional hospitals</li> <li>Airports</li> <li>Specialty services</li> <li>Employment centers</li> </ul>"},{"location":"user-guide/travel-time/#limitations","title":"Limitations","text":"<ul> <li>Assumes normal traffic conditions</li> <li>Uses estimated travel speeds</li> <li>Doesn't account for:</li> <li>Traffic congestion</li> <li>Public transit</li> <li>Barriers (rivers, highways)</li> <li>Seasonal conditions</li> </ul>"},{"location":"user-guide/travel-time/#next-steps","title":"Next Steps","text":"<ul> <li>Choose appropriate census variables</li> <li>Learn to export results</li> <li>Understand finding places</li> </ul>"}]}