{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to SocialMapper","text":"<p>SocialMapper helps you understand how people connect with important places in their community by analyzing travel times and demographics.</p>"},{"location":"#what-is-socialmapper","title":"What is SocialMapper?","text":"<p>SocialMapper is a Python tool that answers questions like: - Who can reach the local library within a 15-minute walk? - What areas are within 20 minutes of the nearest hospital? - How many seniors live within driving distance of grocery stores?</p> <p>It combines travel time analysis with demographic data to help you understand community accessibility.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#find-places","title":"\ud83d\uddfa\ufe0f Find Places","text":"<p>Discover libraries, schools, hospitals, parks, and other community resources from OpenStreetMap. Or use the geocoding feature with a street address. </p>"},{"location":"#calculate-travel-times","title":"\u23f1\ufe0f Calculate Travel Times","text":"<p>Generate isochrones (travel time areas) for walking, driving, or biking. [Walking and Biking functionality still under development]</p>"},{"location":"#analyze-demographics","title":"\ud83d\udcca Analyze Demographics","text":"<p>Understand who lives within reach of your point of interest using Census data like population, income, and age.</p>"},{"location":"#use-your-own-locations","title":"\ud83d\udccd Use Your Own Locations","text":"<p>Analyze accessibility from your organization's facilities or any custom addresses.</p>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>from socialmapper import run_socialmapper\n\n# Find who can reach libraries in 15 minutes\nresults = run_socialmapper(\n    state=\"North Carolina\",\n    county=\"Wake County\",\n    place_type=\"library\",\n    travel_time=15,\n    census_variables=[\"total_population\", \"median_income\"]\n)\n</code></pre>"},{"location":"#get-started","title":"Get Started","text":"<ul> <li> <p> Installation</p> <p>Install SocialMapper in minutes</p> <p> Installation guide</p> </li> <li> <p> Quick Start</p> <p>Your first analysis in 5 minutes</p> <p> Quick start tutorial</p> </li> <li> <p> Examples</p> <p>Learn from practical examples</p> <p> View examples</p> </li> <li> <p> Get Help</p> <p>Documentation and support</p> <p> User guide</p> </li> </ul>"},{"location":"#common-use-cases","title":"Common Use Cases","text":""},{"location":"#urban-planning","title":"Urban Planning","text":"<ul> <li>Analyze access to public facilities</li> <li>Identify underserved areas</li> <li>Plan new service locations</li> </ul>"},{"location":"#public-health","title":"Public Health","text":"<ul> <li>Map healthcare accessibility</li> <li>Study food desert patterns</li> <li>Evaluate emergency service coverage</li> </ul>"},{"location":"#education","title":"Education","text":"<ul> <li>Assess school accessibility</li> <li>Plan bus routes</li> <li>Identify transportation barriers</li> </ul>"},{"location":"#community-development","title":"Community Development","text":"<ul> <li>Evaluate access to parks and recreation</li> <li>Study retail accessibility</li> <li>Support grant applications with data</li> </ul>"},{"location":"#why-socialmapper","title":"Why SocialMapper?","text":"<ul> <li>Free and Open Source - No licensing fees or restrictions</li> <li>Easy to Use - Simple Python API and command line interface</li> <li>Reliable Data - Uses OpenStreetMap and US Census Bureau</li> <li>Fast - Optimized caching and efficient algorithms</li> <li>Flexible - Analyze any location type at any scale</li> </ul> <p>Ready to explore your community? Get started now \u2192</p>"},{"location":"api-reference/","title":"API Reference","text":""},{"location":"api-reference/#core-function","title":"Core Function","text":""},{"location":"api-reference/#run_socialmapper","title":"<code>run_socialmapper()</code>","text":"<p>The main function for running SocialMapper analyses.</p> <pre><code>from socialmapper import run_socialmapper\n\nresults = run_socialmapper(\n    # Location parameters (choose one)\n    state=None,              # State name or abbreviation\n    county=None,             # County name\n    place_type=None,         # POI type (e.g., \"library\")\n    custom_coords_path=None, # Path to CSV with custom locations\n\n    # Analysis parameters\n    travel_time=15,          # Travel time in minutes (1-120)\n    geographic_level=\"block-group\",  # \"block-group\" or \"zcta\"\n    census_variables=None,   # List of census variables\n\n    # Output parameters\n    export_csv=True,         # Export results to CSV\n    export_maps=False,       # Generate map visualizations\n    export_isochrones=False, # Export isochrone geometries\n    output_dir=\"output\",     # Output directory\n\n    # Optional parameters\n    api_key=None,           # Census API key\n)\n</code></pre>"},{"location":"api-reference/#parameters","title":"Parameters","text":"<p>Location Parameters (mutually exclusive): - <code>state</code> (str): State name or two-letter abbreviation - <code>county</code> (str): County name (include \"County\" suffix) - <code>place_type</code> (str): OpenStreetMap place type - <code>custom_coords_path</code> (str): Path to CSV file with custom coordinates</p> <p>Analysis Parameters: - <code>travel_time</code> (int): Travel time in minutes, 1-120 (default: 15) - <code>geographic_level</code> (str): Geographic unit - \"block-group\" or \"zcta\" (default: \"block-group\") - <code>census_variables</code> (list): List of census variable names (default: [\"total_population\"])</p> <p>Output Parameters: - <code>export_csv</code> (bool): Export results to CSV files (default: True) - <code>export_maps</code> (bool): Generate static map images (default: False) - <code>export_isochrones</code> (bool): Export isochrone geometries (default: False) - <code>output_dir</code> (str): Directory for output files (default: \"output\")</p> <p>Optional Parameters: - <code>api_key</code> (str): Census API key (uses environment variable if not provided)</p>"},{"location":"api-reference/#returns","title":"Returns","text":"<p>Dictionary containing: - <code>poi_data</code> (list): Points of interest with geographic context - <code>census_data</code> (list): Census demographics for areas within travel time - Additional metadata about the analysis</p>"},{"location":"api-reference/#examples","title":"Examples","text":"<p>Basic POI Search: <pre><code>results = run_socialmapper(\n    state=\"California\",\n    county=\"San Francisco County\",\n    place_type=\"library\",\n    travel_time=15\n)\n</code></pre></p> <p>Custom Locations: <pre><code>results = run_socialmapper(\n    custom_coords_path=\"my_locations.csv\",\n    travel_time=20,\n    census_variables=[\"total_population\", \"median_income\"]\n)\n</code></pre></p> <p>Full Analysis with Exports: <pre><code>results = run_socialmapper(\n    state=\"Texas\",\n    county=\"Harris County\",\n    place_type=\"hospital\",\n    travel_time=30,\n    geographic_level=\"zcta\",\n    census_variables=[\n        \"total_population\",\n        \"median_age\",\n        \"percent_poverty\"\n    ],\n    export_csv=True,\n    export_maps=True,\n    export_isochrones=True,\n    output_dir=\"hospital_analysis\"\n)\n</code></pre></p>"},{"location":"api-reference/#census-variables","title":"Census Variables","text":""},{"location":"api-reference/#common-variable-names","title":"Common Variable Names","text":"Variable Name Description <code>total_population</code> Total population count <code>median_age</code> Median age <code>median_household_income</code> Median household income <code>median_income</code> Alias for median household income <code>percent_poverty</code> Percentage below poverty line <code>percent_without_vehicle</code> Percentage of households without vehicles"},{"location":"api-reference/#using-raw-census-codes","title":"Using Raw Census Codes","text":"<p>You can also use raw Census Bureau variable codes: <pre><code>census_variables = [\n    \"B01003_001E\",  # Total population\n    \"B19013_001E\",  # Median household income\n    \"B25044_003E\"   # No vehicle available\n]\n</code></pre></p>"},{"location":"api-reference/#error-handling","title":"Error Handling","text":"<pre><code>try:\n    results = run_socialmapper(\n        state=\"California\",\n        county=\"Invalid County\",\n        place_type=\"library\"\n    )\nexcept ValueError as e:\n    print(f\"Configuration error: {e}\")\nexcept Exception as e:\n    print(f\"Analysis error: {e}\")\n</code></pre>"},{"location":"api-reference/#working-with-results","title":"Working with Results","text":""},{"location":"api-reference/#accessing-poi-data","title":"Accessing POI Data","text":"<pre><code>for poi in results['poi_data']:\n    print(f\"Name: {poi['name']}\")\n    print(f\"Location: {poi['latitude']}, {poi['longitude']}\")\n</code></pre>"},{"location":"api-reference/#accessing-census-data","title":"Accessing Census Data","text":"<pre><code>total_population = sum(\n    block.get('total_population', 0) \n    for block in results['census_data']\n)\nprint(f\"Total population: {total_population:,}\")\n</code></pre>"},{"location":"api-reference/#checking-analysis-metadata","title":"Checking Analysis Metadata","text":"<pre><code>if 'analysis_metadata' in results:\n    print(f\"Analysis completed at: {results['analysis_metadata']['timestamp']}\")\n    print(f\"Travel time: {results['analysis_metadata']['travel_time']} minutes\")\n</code></pre>"},{"location":"api-reference/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>CENSUS_API_KEY</code>: Your Census Bureau API key</li> <li><code>SOCIALMAPPER_OUTPUT_DIR</code>: Default output directory</li> </ul>"},{"location":"api-reference/#version-information","title":"Version Information","text":"<pre><code>import socialmapper\nprint(socialmapper.__version__)\n</code></pre>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#general-questions","title":"General Questions","text":""},{"location":"faq/#what-is-socialmapper","title":"What is SocialMapper?","text":"<p>SocialMapper is a Python tool that analyzes community accessibility by combining travel time analysis with demographic data. It helps you understand who can reach important places like libraries, schools, and hospitals.</p>"},{"location":"faq/#what-data-sources-does-it-use","title":"What data sources does it use?","text":"<ul> <li>OpenStreetMap for finding places (POIs)</li> <li>US Census Bureau for demographic data</li> <li>OpenStreetMap road networks for travel time calculations</li> </ul>"},{"location":"faq/#is-it-free-to-use","title":"Is it free to use?","text":"<p>Yes! SocialMapper is open source and free to use. The data sources (OpenStreetMap and Census) are also free.</p>"},{"location":"faq/#do-i-need-a-census-api-key","title":"Do I need a Census API key?","text":"<p>No, but having one improves reliability. Get a free key at census.gov/developers.</p>"},{"location":"faq/#installation","title":"Installation","text":""},{"location":"faq/#what-python-version-do-i-need","title":"What Python version do I need?","text":"<p>Python 3.11 or higher. We recommend Python 3.12 for best performance.</p>"},{"location":"faq/#why-is-installation-taking-so-long","title":"Why is installation taking so long?","text":"<p>First installation downloads several dependencies. This is normal and only happens once.</p>"},{"location":"faq/#can-i-use-it-on-windowsmaclinux","title":"Can I use it on Windows/Mac/Linux?","text":"<p>Yes! SocialMapper works on all major operating systems.</p>"},{"location":"faq/#usage-questions","title":"Usage Questions","text":""},{"location":"faq/#how-do-i-analyze-my-own-addresses","title":"How do I analyze my own addresses?","text":"<p>Create a CSV file with columns: name, latitude, longitude. Then: <pre><code>run_socialmapper(custom_coords_path=\"your_file.csv\", travel_time=15)\n</code></pre></p>"},{"location":"faq/#what-census-variables-are-available","title":"What census variables are available?","text":"<p>Common ones include: - <code>total_population</code> - Total population - <code>median_household_income</code> - Median income - <code>median_age</code> - Median age - <code>percent_poverty</code> - Poverty rate - <code>percent_without_vehicle</code> - No vehicle access</p>"},{"location":"faq/#can-i-analyze-multiple-locations-at-once","title":"Can I analyze multiple locations at once?","text":"<p>Yes! Use a CSV file with multiple locations or loop through different searches.</p>"},{"location":"faq/#how-accurate-are-the-travel-times","title":"How accurate are the travel times?","text":"<p>Travel times use real road networks and are quite accurate. They assume: - Normal traffic conditions - Standard travel speeds - No delays or stops</p>"},{"location":"faq/#performance","title":"Performance","text":""},{"location":"faq/#why-is-my-first-run-slow","title":"Why is my first run slow?","text":"<p>SocialMapper builds caches on first use. Subsequent runs will be much faster.</p>"},{"location":"faq/#how-can-i-speed-up-analysis","title":"How can I speed up analysis?","text":"<ul> <li>Use fewer census variables</li> <li>Enable caching (default)</li> <li>Analyze smaller areas</li> <li>Use batch processing</li> </ul>"},{"location":"faq/#how-much-data-will-it-download","title":"How much data will it download?","text":"<p>Initial setup may download 100-500MB for caches. After that, minimal data is needed.</p>"},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"faq/#no-pois-found","title":"\"No POIs found\"","text":"<ul> <li>Check your place_type spelling</li> <li>Verify the county name</li> <li>Try a different place type</li> <li>Check internet connection</li> </ul>"},{"location":"faq/#census-data-error","title":"\"Census data error\"","text":"<ul> <li>Verify you're analyzing US locations</li> <li>Check coordinate accuracy</li> <li>Try without Census API key</li> <li>Reduce number of variables</li> </ul>"},{"location":"faq/#memory-error","title":"\"Memory error\"","text":"<ul> <li>Analyze smaller areas</li> <li>Use fewer census variables</li> <li>Close other applications</li> <li>Increase system swap space</li> </ul>"},{"location":"faq/#data-questions","title":"Data Questions","text":""},{"location":"faq/#can-i-use-it-outside-the-us","title":"Can I use it outside the US?","text":"<p>POI finding works globally, but census data is US-only. For non-US analysis, omit census variables.</p>"},{"location":"faq/#how-current-is-the-data","title":"How current is the data?","text":"<ul> <li>OpenStreetMap: Live data</li> <li>Census: Latest American Community Survey (usually 1-2 years old)</li> </ul>"},{"location":"faq/#can-i-save-results","title":"Can I save results?","text":"<p>Yes! Use <code>export_csv=True</code> for data files and <code>export_maps=True</code> for visualizations.</p>"},{"location":"faq/#advanced-usage","title":"Advanced Usage","text":""},{"location":"faq/#can-i-customize-travel-modes","title":"Can I customize travel modes?","text":"<p>Yes, options include: - <code>walk</code> - Walking (default) - <code>drive</code> - Driving - <code>bike</code> - Cycling</p>"},{"location":"faq/#can-i-change-travel-speeds","title":"Can I change travel speeds?","text":"<p>Not directly, but OSMnx uses realistic defaults based on road types and travel modes.</p>"},{"location":"faq/#is-there-an-api","title":"Is there an API?","text":"<p>Yes! SocialMapper has a full Python API. See the API Reference.</p>"},{"location":"faq/#getting-help","title":"Getting Help","text":""},{"location":"faq/#where-can-i-report-bugs","title":"Where can I report bugs?","text":"<p>GitHub Issues</p>"},{"location":"faq/#how-can-i-contribute","title":"How can I contribute?","text":"<p>See our Contributing Guide</p>"},{"location":"faq/#where-can-i-find-more-examples","title":"Where can I find more examples?","text":"<p>Check the examples directory</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Common issues and solutions when using SocialMapper.</p>"},{"location":"troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"troubleshooting/#no-module-named-socialmapper","title":"\"No module named socialmapper\"","text":"<p>Problem: Python can't find SocialMapper after installation.</p> <p>Solutions: 1. Ensure installation completed: <code>pip install socialmapper</code> 2. Check you're using the right Python environment 3. Try reinstalling: <code>pip install --upgrade socialmapper</code></p>"},{"location":"troubleshooting/#dependency-conflict","title":"\"Dependency conflict\"","text":"<p>Problem: Package dependencies conflict with existing packages.</p> <p>Solutions: 1. Use a virtual environment:    <pre><code>python -m venv myenv\nsource myenv/bin/activate  # On Windows: myenv\\Scripts\\activate\npip install socialmapper\n</code></pre> 2. Update pip: <code>pip install --upgrade pip</code></p>"},{"location":"troubleshooting/#data-issues","title":"Data Issues","text":""},{"location":"troubleshooting/#no-pois-found","title":"\"No POIs found\"","text":"<p>Problem: Search returns no results.</p> <p>Solutions: 1. Check spelling of place_type (use singular: \"library\" not \"libraries\") 2. Verify county name includes \"County\" suffix 3. Try a broader search area 4. Check internet connection</p> <p>Debug: <pre><code># Try different parameters\nresults = run_socialmapper(\n    state=\"CA\",  # Try abbreviation\n    county=\"Los Angeles County\",  # Full name with \"County\"\n    place_type=\"library\"  # Singular form\n)\n</code></pre></p>"},{"location":"troubleshooting/#no-census-data-found","title":"\"No census data found\"","text":"<p>Problem: No demographic data returned.</p> <p>Solutions: 1. Verify coordinates are in the United States 2. Check coordinates aren't in water/uninhabited areas 3. Try a larger travel time 4. Use block-group instead of ZCTA for better coverage</p>"},{"location":"troubleshooting/#invalid-coordinates","title":"\"Invalid coordinates\"","text":"<p>Problem: Custom coordinates are rejected.</p> <p>Solutions: 1. Check latitude is between -90 and 90 2. Check longitude is between -180 and 180 3. Verify coordinates aren't swapped (latitude first) 4. Ensure decimal format (35.7796, not 35\u00b046'47\"N)</p>"},{"location":"troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/#analysis-taking-too-long","title":"\"Analysis taking too long\"","text":"<p>Problem: Processing seems stuck or very slow.</p> <p>Solutions: 1. Start with smaller travel times (5-10 minutes) 2. Analyze fewer locations at once 3. Request fewer census variables 4. First run is slower (building caches)</p> <p>Optimize: <pre><code># Start simple\nresults = run_socialmapper(\n    custom_coords_path=\"one_location.csv\",\n    travel_time=5,\n    census_variables=[\"total_population\"]  # Just one variable\n)\n</code></pre></p>"},{"location":"troubleshooting/#memory-error","title":"\"Memory error\"","text":"<p>Problem: Running out of memory during analysis.</p> <p>Solutions: 1. Process locations in batches 2. Use ZCTA instead of block-group 3. Reduce travel time 4. Close other applications</p>"},{"location":"troubleshooting/#output-issues","title":"Output Issues","text":""},{"location":"troubleshooting/#cant-find-output-files","title":"\"Can't find output files\"","text":"<p>Problem: Export files aren't where expected.</p> <p>Solutions: 1. Check the output_dir parameter 2. Look in default \"output/\" directory 3. Ensure export parameters are True 4. Check for write permissions</p> <p>Verify: <pre><code>results = run_socialmapper(\n    custom_coords_path=\"locations.csv\",\n    export_csv=True,  # Must be True\n    output_dir=\"my_output\"  # Check this directory\n)\n</code></pre></p>"},{"location":"troubleshooting/#maps-not-generating","title":"\"Maps not generating\"","text":"<p>Problem: No map files created.</p> <p>Solutions: 1. Set <code>export_maps=True</code> 2. Check for matplotlib installation 3. Ensure valid census data exists 4. Look for error messages</p>"},{"location":"troubleshooting/#api-issues","title":"API Issues","text":""},{"location":"troubleshooting/#census-api-error","title":"\"Census API error\"","text":"<p>Problem: Census data retrieval fails.</p> <p>Solutions: 1. Works without API key (but less reliable) 2. Get free key at census.gov/developers 3. Check internet connection 4. Census API may be temporarily down</p> <p>Set API key: <pre><code>export CENSUS_API_KEY=\"your_key_here\"\n# Or in Python:\nresults = run_socialmapper(\n    api_key=\"your_key_here\",\n    ...\n)\n</code></pre></p>"},{"location":"troubleshooting/#rate-limit-exceeded","title":"\"Rate limit exceeded\"","text":"<p>Problem: Too many requests to external services.</p> <p>Solutions: 1. Enable caching (default) 2. Add delays between requests 3. Process in smaller batches 4. Wait and retry later</p>"},{"location":"troubleshooting/#common-error-messages","title":"Common Error Messages","text":""},{"location":"troubleshooting/#valueerror-custom_coords_path-must-be-provided","title":"\"ValueError: custom_coords_path must be provided\"","text":"<p>You must specify either POI search parameters or a custom coordinates file.</p>"},{"location":"troubleshooting/#filenotfounderror","title":"\"FileNotFoundError\"","text":"<p>Check the file path - use absolute paths if needed: <pre><code>import os\nfile_path = os.path.abspath(\"my_locations.csv\")\nresults = run_socialmapper(custom_coords_path=file_path)\n</code></pre></p>"},{"location":"troubleshooting/#keyerror-when-accessing-results","title":"\"KeyError\" when accessing results","text":"<p>Check the key exists before accessing: <pre><code>if 'census_data' in results:\n    census_data = results['census_data']\nelse:\n    print(\"No census data available\")\n</code></pre></p>"},{"location":"troubleshooting/#debug-mode","title":"Debug Mode","text":"<p>Enable detailed logging:</p> <pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# Now run your analysis\nresults = run_socialmapper(...)\n</code></pre>"},{"location":"troubleshooting/#getting-help","title":"Getting Help","text":"<p>If issues persist:</p> <ol> <li>Check the FAQ</li> <li>Review examples</li> <li>Search GitHub issues</li> <li>Open a new issue with:</li> <li>Error message</li> <li>Code that causes the error</li> <li>Python and SocialMapper versions</li> <li>Operating system</li> </ol>"},{"location":"features/address-geocoding/","title":"\ud83d\udccd Address Geocoding in SocialMapper","text":""},{"location":"features/address-geocoding/#overview","title":"Overview","text":"<p>Address geocoding is a core feature in SocialMapper that converts human-readable addresses into geographic coordinates (latitude/longitude). This enables you to analyze custom locations beyond what's available in OpenStreetMap, such as:</p> <ul> <li>Your organization's facilities</li> <li>Client locations</li> <li>Community resources not in OSM</li> <li>Historical addresses</li> <li>Survey respondent locations</li> </ul>"},{"location":"features/address-geocoding/#how-it-works-with-socialmapper","title":"How It Works with SocialMapper","text":"<p>The geocoding system seamlessly integrates into SocialMapper's analysis workflow:</p> <ol> <li>Input addresses via CSV file or API</li> <li>Convert to coordinates using multiple geocoding providers</li> <li>Generate isochrones around each location</li> <li>Analyze demographics within travel time areas</li> <li>Export results with full geographic context</li> </ol>"},{"location":"features/address-geocoding/#example-workflow","title":"Example Workflow","text":"<pre><code>from socialmapper import run_socialmapper\n\n# Analyze accessibility from your custom locations\nresults = run_socialmapper(\n    addresses_path=\"my_facilities.csv\",  # Your addresses\n    travel_time=15,                      # 15-minute isochrones\n    census_variables=[\"total_population\", \"median_income\"],\n    export_maps=True\n)\n</code></pre>"},{"location":"features/address-geocoding/#key-features","title":"Key Features","text":""},{"location":"features/address-geocoding/#multiple-provider-support","title":"\ud83d\udd04 Multiple Provider Support","text":"<ul> <li>OpenStreetMap Nominatim - Free, global coverage</li> <li>US Census Geocoder - High accuracy for US addresses</li> <li>Extensible to add Google Maps, HERE, Mapbox</li> </ul>"},{"location":"features/address-geocoding/#high-performance","title":"\u26a1 High Performance","text":"<ul> <li>Intelligent caching - 96% storage reduction with Parquet</li> <li>Batch processing - Handle thousands of addresses efficiently</li> <li>Automatic fallback - Try multiple providers for best results</li> </ul>"},{"location":"features/address-geocoding/#quality-assurance","title":"\ud83c\udfaf Quality Assurance","text":"<ul> <li>Quality scoring - EXACT, INTERPOLATED, CENTROID, APPROXIMATE</li> <li>Validation - Ensure coordinates are within expected bounds</li> <li>Geographic enrichment - Add state, county, tract, block group</li> </ul>"},{"location":"features/address-geocoding/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"features/address-geocoding/#basic-usage","title":"Basic Usage","text":"<pre><code>from socialmapper.geocoding import geocode_address\n\n# Simple address geocoding\nresult = geocode_address(\"123 Main St, Anytown, USA\")\nif result.success:\n    print(f\"Location: {result.latitude}, {result.longitude}\")\n    print(f\"Quality: {result.quality.value}\")\n</code></pre>"},{"location":"features/address-geocoding/#batch-processing","title":"Batch Processing","text":"<pre><code>from socialmapper.geocoding import geocode_addresses\n\n# Geocode multiple addresses\naddresses = [\n    \"123 Main St, City, State\",\n    \"456 Oak Ave, Town, State\",\n    \"789 Elm Blvd, Village, State\"\n]\n\nresults = geocode_addresses(addresses, progress=True)\nsuccessful = [r for r in results if r.success]\nprint(f\"Geocoded {len(successful)} of {len(addresses)} addresses\")\n</code></pre>"},{"location":"features/address-geocoding/#csv-file-input","title":"CSV File Input","text":"<p>Create a CSV file with your addresses: <pre><code>name,address,city,state,zip\nMain Library,123 Main St,Springfield,IL,62701\nBranch Library,456 Oak Ave,Springfield,IL,62702\nCommunity Center,789 Elm St,Springfield,IL,62703\n</code></pre></p> <p>Then use with SocialMapper: <pre><code>socialmapper analyze --addresses-file my_locations.csv --travel-time 15\n</code></pre></p>"},{"location":"features/address-geocoding/#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":"<p>The geocoding system follows a modular design:</p> <pre><code>socialmapper/geocoding/\n\u251c\u2500\u2500 __init__.py           # Public API\n\u251c\u2500\u2500 engine.py             # Core orchestration\n\u251c\u2500\u2500 providers.py          # Provider implementations\n\u2514\u2500\u2500 cache.py             # Caching system\n</code></pre>"},{"location":"features/address-geocoding/#key-components","title":"Key Components","text":"<ol> <li>AddressGeocodingEngine - Orchestrates the geocoding process</li> <li>GeocodingProviders - Implement specific geocoding services</li> <li>AddressCache - High-performance caching layer</li> <li>Quality Validation - Ensures result accuracy</li> </ol>"},{"location":"features/address-geocoding/#configuration","title":"\u2699\ufe0f Configuration","text":""},{"location":"features/address-geocoding/#basic-configuration","title":"Basic Configuration","text":"<pre><code>from socialmapper.geocoding import GeocodingConfig, AddressProvider\n\nconfig = GeocodingConfig(\n    primary_provider=AddressProvider.NOMINATIM,\n    fallback_providers=[AddressProvider.CENSUS],\n    enable_cache=True,\n    min_quality_threshold=\"INTERPOLATED\"\n)\n</code></pre>"},{"location":"features/address-geocoding/#advanced-options","title":"Advanced Options","text":"<pre><code>config = GeocodingConfig(\n    # Performance\n    timeout_seconds=10,\n    max_retries=3,\n    batch_size=100,\n\n    # Quality\n    min_quality_threshold=\"EXACT\",\n    require_country_match=True,\n\n    # Caching\n    cache_ttl_hours=168,  # 1 week\n    cache_max_size=10000\n)\n</code></pre>"},{"location":"features/address-geocoding/#quality-levels","title":"\ud83c\udfaf Quality Levels","text":"Quality Description Use Case EXACT Rooftop/exact match Precise analysis INTERPOLATED Street-level Neighborhood studies CENTROID ZIP/city center Regional analysis APPROXIMATE Low precision Exploratory work"},{"location":"features/address-geocoding/#integration-examples","title":"\ud83d\udcca Integration Examples","text":""},{"location":"features/address-geocoding/#with-travel-time-analysis","title":"With Travel Time Analysis","text":"<pre><code># Geocode addresses and analyze accessibility\nfrom socialmapper import run_socialmapper\n\nresults = run_socialmapper(\n    addresses_path=\"health_clinics.csv\",\n    travel_time=20,\n    travel_mode=\"drive\",\n    census_variables=[\"total_population\", \"percent_uninsured\"]\n)\n\n# Results include full demographic analysis for each clinic's service area\n</code></pre>"},{"location":"features/address-geocoding/#with-custom-poi-data","title":"With Custom POI Data","text":"<pre><code>from socialmapper.geocoding import addresses_to_poi_format\n\n# Convert addresses to POI format\naddresses = [\n    {\"name\": \"Clinic A\", \"address\": \"123 Main St, City, State\"},\n    {\"name\": \"Clinic B\", \"address\": \"456 Oak Ave, Town, State\"}\n]\n\npoi_data = addresses_to_poi_format(addresses)\n\n# Use with standard SocialMapper workflow\nfrom socialmapper import run_socialmapper\nresults = run_socialmapper(\n    custom_coords_data=poi_data,\n    travel_time=15\n)\n</code></pre>"},{"location":"features/address-geocoding/#caching-system","title":"\ud83d\udcbe Caching System","text":"<p>The geocoding cache dramatically improves performance:</p> <ul> <li>Persistent storage - Results saved between sessions</li> <li>Automatic deduplication - Same address never geocoded twice</li> <li>TTL expiration - Configurable cache lifetime</li> <li>Compact format - Parquet files use 96% less space than JSON</li> </ul>"},{"location":"features/address-geocoding/#cache-location","title":"Cache Location","text":"<pre><code>cache/geocoding/\n\u2514\u2500\u2500 address_cache.parquet\n</code></pre>"},{"location":"features/address-geocoding/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"features/address-geocoding/#common-issues","title":"Common Issues","text":"<p>\"No results found\" - Check address format and spelling - Try including more details (city, state, ZIP) - Verify internet connection</p> <p>\"Quality below threshold\" - Lower the quality threshold for exploratory analysis - Add more address details for better matches - Try a different provider</p> <p>\"Rate limit exceeded\" - Enable caching to reduce API calls - Reduce batch size - Add delays between requests</p>"},{"location":"features/address-geocoding/#debug-mode","title":"Debug Mode","text":"<pre><code>import logging\nlogging.getLogger('socialmapper.geocoding').setLevel(logging.DEBUG)\n\n# Now geocoding will show detailed progress\nresult = geocode_address(\"123 Main St\")\n</code></pre>"},{"location":"features/address-geocoding/#best-practices","title":"\ud83d\udccb Best Practices","text":"<ol> <li>Always use caching - Reduces API calls and improves speed</li> <li>Batch similar addresses - Group by city/state for efficiency</li> <li>Set appropriate quality thresholds - EXACT for precise analysis, CENTROID for regional</li> <li>Include full addresses - More details = better results</li> <li>Handle failures gracefully - Some addresses may not geocode</li> </ol>"},{"location":"features/address-geocoding/#complete-example","title":"\ud83c\udf93 Complete Example","text":"<p>Here's a full workflow using address geocoding:</p> <pre><code>from socialmapper import run_socialmapper\nfrom socialmapper.geocoding import GeocodingConfig, AddressProvider\n\n# Configure geocoding\ngeocoding_config = GeocodingConfig(\n    primary_provider=AddressProvider.CENSUS,  # Best for US addresses\n    enable_cache=True,\n    min_quality_threshold=\"INTERPOLATED\"\n)\n\n# Run analysis on your facilities\nresults = run_socialmapper(\n    addresses_path=\"our_facilities.csv\",\n    travel_time=15,\n    travel_mode=\"walk\",\n    census_variables=[\n        \"total_population\",\n        \"median_age\", \n        \"percent_poverty\",\n        \"percent_without_vehicle\"\n    ],\n    geocoding_config=geocoding_config,\n    export_csv=True,\n    export_maps=True\n)\n\n# Examine results\nprint(f\"Successfully geocoded {results['geocoding_stats']['success_count']} addresses\")\nprint(f\"Population within walking distance: {results['total_population']:,}\")\n</code></pre>"},{"location":"features/address-geocoding/#future-enhancements","title":"\ud83d\udd2e Future Enhancements","text":"<ul> <li>Google Maps and HERE provider support</li> <li>International address formats</li> <li>Fuzzy matching for misspelled addresses</li> <li>Address standardization and validation</li> <li>Async processing for large batches</li> </ul> <p>The address geocoding system in SocialMapper provides reliable, cached, and quality-assured location lookup to enable demographic analysis of any custom location.</p>"},{"location":"features/network-analysis/","title":"OSMnx 2.0+ Features Summary for SocialMapper","text":"<p>Date: June 7, 2025 OSMnx Version Tested: 2.0.3 Python Version: 3.13.3  </p>"},{"location":"features/network-analysis/#key-improvements-in-osmnx-20","title":"\ud83d\ude80 Key Improvements in OSMnx 2.0+","text":""},{"location":"features/network-analysis/#1-performance-memory-efficiency","title":"1. Performance &amp; Memory Efficiency","text":"<ul> <li>\u2705 Faster graph creation: Network for Corvallis, OR created in ~1 second</li> <li>\u2705 Improved memory management: Better handling of large datasets</li> <li>\u2705 Enhanced caching: More efficient network requests and data reuse</li> <li>\u2705 Optimized algorithms: Better computational efficiency across the board</li> </ul>"},{"location":"features/network-analysis/#2-enhanced-geometries-module","title":"2. Enhanced Geometries Module","text":"<ul> <li>\u2705 Multiple geometry types: Downloaded 102 POIs, 18,752 buildings, 98 parks efficiently</li> <li>\u2705 Better error handling: More robust data retrieval from OpenStreetMap</li> <li>\u2705 Improved integration: Better compatibility with GeoPandas/Shapely 2.0</li> <li>\u2705 Faster downloads: Cached results and optimized queries</li> </ul>"},{"location":"features/network-analysis/#3-advanced-network-analysis","title":"3. Advanced Network Analysis","text":"<ul> <li>\u2705 Multiple network types: Walk, drive, bike networks with better type handling</li> <li>\u2705 Centrality calculations: Betweenness and closeness centrality analysis</li> <li>\u2705 Street orientation analysis: Tools for urban form analysis</li> <li>\u2705 Large networks: Processed 15K+ nodes efficiently</li> </ul>"},{"location":"features/network-analysis/#4-enhanced-routing-features","title":"4. Enhanced Routing Features","text":"<ul> <li>\u2705 Multiple routing algorithms: Shortest path, fastest path, Dijkstra</li> <li>\u2705 Travel time integration: Easy addition of speed and travel time attributes</li> <li>\u2705 Sub-millisecond routing: Very fast path calculations</li> <li>\u2705 Multiple weight options: Length, time, or custom weights</li> </ul>"},{"location":"features/network-analysis/#5-spatial-analysis-isochrones","title":"5. Spatial Analysis &amp; Isochrones","text":"<ul> <li>\u2705 Accessibility analysis: 15-minute walking isochrones from POIs</li> <li>\u2705 Network coverage: Calculate reachable portions of street networks</li> <li>\u2705 Multi-modal analysis: Different transport modes supported</li> <li>\u2705 Geographic accuracy: Precise spatial calculations</li> </ul>"},{"location":"features/network-analysis/#6-enhanced-visualization","title":"6. Enhanced Visualization","text":"<ul> <li>\u2705 Modern styling: Beautiful figure-ground network visualizations</li> <li>\u2705 Customizable plots: Control over colors, styles, and layouts</li> <li>\u2705 High-quality outputs: Vector and raster format support</li> <li>\u2705 Interactive capabilities: Better integration with mapping libraries</li> </ul>"},{"location":"features/network-analysis/#7-type-annotations-error-handling","title":"7. Type Annotations &amp; Error Handling","text":"<ul> <li>\u2705 Full type hints: Better IDE support and code quality</li> <li>\u2705 Improved validation: Better input checking and error messages</li> <li>\u2705 Consistent API: Streamlined function names and parameters</li> <li>\u2705 Better debugging: Enhanced error reporting and logging</li> </ul>"},{"location":"features/network-analysis/#benefits-for-socialmapper-v050","title":"\ud83c\udfd8\ufe0f Benefits for SocialMapper v0.5.0","text":""},{"location":"features/network-analysis/#performance-improvements","title":"Performance Improvements","text":"Metric Improvement POI Discovery Faster OpenStreetMap queries with better caching Network Creation ~1 second for medium-sized cities Memory Usage More efficient handling of large datasets Batch Processing Better reliability for multiple locations"},{"location":"features/network-analysis/#enhanced-accuracy","title":"Enhanced Accuracy","text":"<ul> <li>Intersection Consolidation: Better handling of complex intersections</li> <li>Network Simplification: More accurate representation of street networks  </li> <li>Geometric Precision: Improved spatial calculations and projections</li> <li>Travel Time Calculation: More accurate accessibility analysis</li> </ul>"},{"location":"features/network-analysis/#new-capabilities","title":"New Capabilities","text":"<ul> <li>Building Footprints: Access to detailed urban morphology data</li> <li>Multi-modal Networks: Walk, drive, bike network analysis</li> <li>Advanced Centrality: Network analysis for community connectivity</li> <li>Enhanced Routing: Multiple pathfinding algorithms</li> </ul>"},{"location":"features/network-analysis/#integration-with-socialmapper","title":"\ud83d\udee0\ufe0f Integration with SocialMapper","text":""},{"location":"features/network-analysis/#immediate-benefits","title":"Immediate Benefits","text":"<ol> <li>Faster POI Discovery: Reduced time for finding community resources</li> <li>Better Demographics Mapping: More accurate intersection handling</li> <li>Enhanced Visualization: Better maps and network representations</li> <li>Improved Reliability: Better error handling for production use</li> </ol>"},{"location":"features/network-analysis/#future-opportunities","title":"Future Opportunities","text":"<ol> <li>Multi-modal Analysis: Walking, driving, cycling accessibility</li> <li>Building-level Analysis: Demographics at building footprint level</li> <li>Network Centrality: Identify key community connection points</li> <li>Advanced Isochrones: More sophisticated accessibility modeling</li> </ol>"},{"location":"features/network-analysis/#performance-metrics-from-demo","title":"\u26a1 Performance Metrics from Demo","text":"Operation Time Details Graph Creation 1.01s Corvallis drive network (1,862 nodes, 4,911 edges) Geometry Download &lt;1s each POIs, buildings, parks Betweenness Centrality 2.43s 15K+ node pedestrian network Routing &lt;0.002s Multiple algorithms Visualization &lt;5s High-quality network plot"},{"location":"features/network-analysis/#key-features-for-community-analysis","title":"\ud83c\udfaf Key Features for Community Analysis","text":""},{"location":"features/network-analysis/#what-socialmapper-gains","title":"What SocialMapper Gains","text":"<ul> <li>Speed: 2-5x faster data processing</li> <li>Scale: Handle larger cities and regions</li> <li>Accuracy: Better geometric and network precision</li> <li>Features: Access to building footprints, multi-modal networks</li> <li>Reliability: Production-ready error handling</li> </ul>"},{"location":"features/network-analysis/#research-planning-applications","title":"Research &amp; Planning Applications","text":"<ul> <li>Urban Form Analysis: Street pattern and orientation studies</li> <li>Accessibility Modeling: Multi-modal community resource access</li> <li>Network Analysis: Identify critical infrastructure connections</li> <li>Demographics Mapping: Building-level population analysis</li> </ul>"},{"location":"features/network-analysis/#next-steps","title":"\ud83d\ude80 Next Steps","text":"<ol> <li>Integration: Incorporate OSMnx 2.0+ features into SocialMapper core</li> <li>Testing: Validate performance improvements across different city sizes</li> <li>Features: Explore building footprint integration for demographics</li> <li>Documentation: Update guides with new capabilities</li> </ol> <p>Conclusion: OSMnx 2.0+ represents a major leap forward in geospatial network analysis, providing SocialMapper with cutting-edge capabilities for community mapping and demographic analysis. The combination of performance improvements, new features, and better reliability makes this upgrade essential for modern community analytics. </p>"},{"location":"getting-started/","title":"Getting Started with SocialMapper","text":"<p>Welcome to SocialMapper! This section will help you get up and running quickly with community demographic analysis.</p>"},{"location":"getting-started/#quick-navigation","title":"Quick Navigation","text":""},{"location":"getting-started/#installation","title":"\ud83d\ude80 Installation","text":"<p>Learn how to install SocialMapper on your system.</p>"},{"location":"getting-started/#quick-start-guide","title":"\u26a1 Quick Start Guide","text":"<p>Create your first community analysis in minutes.</p>"},{"location":"getting-started/#choose-your-path","title":"Choose Your Path","text":""},{"location":"getting-started/#im-new-to-programming","title":"I'm New to Programming","text":"<p>Start here if you're new to Python:</p> <ol> <li>Follow the Installation Guide for setup help</li> <li>Try the Quick Start Guide for your first analysis</li> <li>Use the command line interface - no coding required!</li> <li>Explore the examples</li> </ol>"},{"location":"getting-started/#im-a-python-developer","title":"I'm a Python Developer","text":"<p>Jump right in if you're comfortable with Python:</p> <ol> <li><code>pip install socialmapper</code> - Quick installation</li> <li>Check the API Reference for detailed usage</li> <li>Review examples</li> <li>Explore advanced features like address geocoding</li> </ol>"},{"location":"getting-started/#im-a-researcheranalyst","title":"I'm a Researcher/Analyst","text":"<p>Focus on analysis capabilities:</p> <ol> <li>Review common use cases to understand applications</li> <li>Learn about demographic variables</li> <li>Understand travel time analysis</li> <li>Master exporting results</li> </ol>"},{"location":"getting-started/#what-youll-learn","title":"What You'll Learn","text":"<p>By the end of this section, you'll be able to:</p> <ul> <li>\u2705 Install and configure SocialMapper</li> <li>\u2705 Run your first analysis  </li> <li>\u2705 Find places and analyze accessibility</li> <li>\u2705 Work with census demographics</li> <li>\u2705 Export results for reports</li> </ul>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+ (we'll help you install it)</li> <li>Internet connection for data downloads</li> <li>No GIS experience needed!</li> </ul>"},{"location":"getting-started/#getting-help","title":"Getting Help","text":"<ul> <li>\ud83d\udcd6 Check the FAQ for common questions</li> <li>\ud83d\udd27 See Troubleshooting for issues</li> <li>\ud83d\udca1 Review examples</li> <li>\ud83d\udc1b Report bugs on GitHub</li> </ul> <p>Ready to begin? Start with Installation \u2192</p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide covers multiple ways to install SocialMapper depending on your needs and experience level.</p>"},{"location":"getting-started/installation/#quick-installation","title":"Quick Installation","text":"pip (Recommended)uv (Modern &amp; Fast)conda <pre><code>pip install socialmapper\n</code></pre> <pre><code># Install uv if you don't have it\npip install uv\n\n# Install SocialMapper\nuv add socialmapper\n</code></pre> <pre><code># Add conda-forge channel if not already added\nconda config --add channels conda-forge\n\n# Install SocialMapper\nconda install socialmapper\n</code></pre>"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":""},{"location":"getting-started/installation/#python-version","title":"Python Version","text":"<ul> <li>Python 3.11+ (minimum required)</li> <li>Python 3.12 (recommended for best performance)</li> <li>Python 3.13 (latest, fully supported)</li> </ul>"},{"location":"getting-started/installation/#operating-systems","title":"Operating Systems","text":"<ul> <li>\u2705 Windows 10/11</li> <li>\u2705 macOS 10.15+ (Intel and Apple Silicon)</li> <li>\u2705 Linux (Ubuntu 20.04+, CentOS 8+, and others)</li> </ul>"},{"location":"getting-started/installation/#hardware-recommendations","title":"Hardware Recommendations","text":"<ul> <li>RAM: 4GB minimum, 8GB+ recommended</li> <li>Storage: 1GB free space (for cache and outputs)</li> <li>Internet: Required for data downloads</li> </ul>"},{"location":"getting-started/installation/#installation-options","title":"Installation Options","text":""},{"location":"getting-started/installation/#option-1-standard-installation","title":"Option 1: Standard Installation","text":"<p>For most users, the standard installation provides all core features:</p> <pre><code>pip install socialmapper\n</code></pre>"},{"location":"getting-started/installation/#option-2-development-installation-with-enhanced-features","title":"Option 2: Development Installation with Enhanced Features","text":"<p>For development work and extended functionality:</p> <pre><code>pip install socialmapper[dev]\n</code></pre> <p>This includes additional dependencies for: - \ud83d\udd27 Development tools (testing, linting, formatting) - \ud83d\udcca Enhanced analysis capabilities - \ud83c\udfa8 Rich terminal UI features</p>"},{"location":"getting-started/installation/#option-3-development-installation","title":"Option 3: Development Installation","text":"<p>For contributors and developers:</p> <pre><code># Clone the repository\ngit clone https://github.com/mihiarc/socialmapper.git\ncd socialmapper\n\n# Install in development mode with all dependencies\npip install -e .[dev]\n</code></pre>"},{"location":"getting-started/installation/#option-4-minimal-installation","title":"Option 4: Minimal Installation","text":"<p>Note: The <code>[minimal]</code> extra is not currently available. The standard installation already provides a lightweight experience.</p>"},{"location":"getting-started/installation/#dependency-management","title":"Dependency Management","text":""},{"location":"getting-started/installation/#using-uv-recommended","title":"Using uv (Recommended)","text":"<p>According to a memory from a past conversation, you should use 'uv' as the package management tool for installing and managing Python dependencies in this project instead of pip.</p> <pre><code># Install uv\npip install uv\n\n# Create a new project with SocialMapper\nuv init my-socialmapper-project\ncd my-socialmapper-project\nuv add socialmapper\n\n# Or add to existing project\nuv add socialmapper\n</code></pre>"},{"location":"getting-started/installation/#using-pip-with-virtual-environments","title":"Using pip with virtual environments","text":"<pre><code># Create virtual environment\npython -m venv socialmapper-env\n\n# Activate (Windows)\nsocialmapper-env\\Scripts\\activate\n\n# Activate (macOS/Linux)\nsource socialmapper-env/bin/activate\n\n# Install SocialMapper\npip install socialmapper\n</code></pre>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<p>Test your installation with these commands:</p> <pre><code># Check version\npython -c \"import socialmapper; print(socialmapper.__version__)\"\n\n# Run help command\nsocialmapper --help\n\n# Quick test (requires internet)\npython -c \"from socialmapper import run_socialmapper; print('\u2705 Installation successful!')\"\n</code></pre>"},{"location":"getting-started/installation/#optional-api-keys","title":"Optional: API Keys","text":"<p>While SocialMapper works without API keys, some features are enhanced with them:</p>"},{"location":"getting-started/installation/#census-bureau-api-key-recommended","title":"Census Bureau API Key (Recommended)","text":"<ul> <li>Benefit: Faster census data downloads</li> <li>Get key: Census API Registration</li> <li>Setup: <code>export CENSUS_API_KEY=\"your_key_here\"</code></li> </ul>"},{"location":"getting-started/installation/#google-maps-api-key-optional","title":"Google Maps API Key (Optional)","text":"<ul> <li>Benefit: Enhanced geocoding accuracy</li> <li>Get key: Google Cloud Console</li> <li>Setup: <code>export GOOGLE_MAPS_API_KEY=\"your_key_here\"</code></li> </ul>"},{"location":"getting-started/installation/#common-installation-issues","title":"Common Installation Issues","text":""},{"location":"getting-started/installation/#issue-no-module-named-socialmapper","title":"Issue: \"No module named 'socialmapper'\"","text":"<p>Solution: <pre><code># Ensure you're in the right environment\nwhich python\npip list | grep socialmapper\n\n# Reinstall if needed\npip uninstall socialmapper\npip install socialmapper\n</code></pre></p>"},{"location":"getting-started/installation/#issue-dependency-conflicts","title":"Issue: Dependency conflicts","text":"<p>Solution: Use a fresh virtual environment: <pre><code>python -m venv fresh-env\nsource fresh-env/bin/activate  # or fresh-env\\Scripts\\activate on Windows\npip install socialmapper\n</code></pre></p>"},{"location":"getting-started/installation/#issue-networkssl-errors","title":"Issue: Network/SSL errors","text":"<p>Solution: Update certificates and try again: <pre><code># macOS\n/Applications/Python\\ 3.x/Install\\ Certificates.command\n\n# Or use trusted hosts\npip install --trusted-host pypi.org --trusted-host pypi.python.org socialmapper\n</code></pre></p>"},{"location":"getting-started/installation/#issue-permission-errors-linuxmacos","title":"Issue: Permission errors (Linux/macOS)","text":"<p>Solution: Use user installation: <pre><code>pip install --user socialmapper\n</code></pre></p>"},{"location":"getting-started/installation/#issue-missing-system-dependencies-linux","title":"Issue: Missing system dependencies (Linux)","text":"<p>Solution: Install system packages: <pre><code># Ubuntu/Debian\nsudo apt-get update\nsudo apt-get install python3-dev python3-pip build-essential\n\n# CentOS/RHEL\nsudo yum install python3-devel python3-pip gcc\n</code></pre></p>"},{"location":"getting-started/installation/#platform-specific-notes","title":"Platform-Specific Notes","text":""},{"location":"getting-started/installation/#windows","title":"Windows","text":"<ul> <li>Use Command Prompt or PowerShell (avoid Git Bash for installation)</li> <li>Consider Windows Subsystem for Linux (WSL) for a Linux-like experience</li> <li>Visual Studio Build Tools may be needed for some dependencies</li> </ul>"},{"location":"getting-started/installation/#macos","title":"macOS","text":"<ul> <li>Xcode Command Line Tools required: <code>xcode-select --install</code></li> <li>Homebrew recommended for Python management: <code>brew install python</code></li> <li>Apple Silicon (M1/M2): All dependencies are compatible</li> </ul>"},{"location":"getting-started/installation/#linux","title":"Linux","text":"<ul> <li>Most distributions include Python, but you may need <code>python3-pip</code></li> <li>GDAL and spatial libraries are included in the package</li> <li>Build tools (<code>gcc</code>, <code>make</code>) may be required</li> </ul>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>After successful installation:</p> <ol> <li>\ud83d\udcd6 Read the Quick Start Guide</li> <li>\ud83c\udfaf Explore the Examples</li> <li>\ud83d\udcbb Learn about Finding Places</li> <li>\ud83d\udd27 Get a Census API key (optional)</li> </ol>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>\ud83d\udcda Check this documentation</li> <li>\ud83d\udd0d Search GitHub Issues</li> <li>\ud83d\udc1b Report new issues with:</li> <li>Your Python version (<code>python --version</code>)</li> <li>Your OS and version</li> <li>Complete error messages</li> <li>Installation method used</li> </ol> <p>Ready to start? Continue to the Quick Start Guide! </p>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>Get up and running with SocialMapper in minutes! This guide will walk you through your first analysis.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11 or higher installed</li> <li>Internet connection for downloading data</li> <li>(Optional) Census API key for enhanced data</li> </ul>"},{"location":"getting-started/quick-start/#installation","title":"Installation","text":"<pre><code>pip install socialmapper\n</code></pre>"},{"location":"getting-started/quick-start/#your-first-analysis","title":"Your First Analysis","text":"<p>Let's analyze library accessibility in a community:</p>"},{"location":"getting-started/quick-start/#1-basic-command-line-usage","title":"1. Basic Command Line Usage","text":"<pre><code>socialmapper analyze --state \"North Carolina\" --county \"Wake County\" \\\n  --place-type \"library\" --travel-time 15\n</code></pre>"},{"location":"getting-started/quick-start/#2-python-script","title":"2. Python Script","text":"<p>Create a file <code>my_first_analysis.py</code>:</p> <pre><code>from socialmapper import run_socialmapper\n\n# Analyze library accessibility\nresults = run_socialmapper(\n    state=\"North Carolina\",\n    county=\"Wake County\",\n    place_type=\"library\",\n    travel_time=15,\n    census_variables=[\"total_population\", \"median_household_income\"],\n    export_csv=True\n)\n\n# Display results\nprint(f\"Found {len(results['poi_data'])} libraries\")\nprint(f\"Analyzed {len(results['census_data'])} census block groups\")\n</code></pre> <p>Run it: <pre><code>python my_first_analysis.py\n</code></pre></p>"},{"location":"getting-started/quick-start/#understanding-the-results","title":"Understanding the Results","text":"<p>After running the analysis, you'll get:</p> <ol> <li>POI Data - Information about each library found</li> <li>Census Data - Demographics of areas within travel time</li> <li>CSV Files - Detailed data exported to <code>output/csv/</code></li> <li>Maps (optional) - Visualizations in <code>output/maps/</code></li> </ol>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":""},{"location":"getting-started/quick-start/#try-different-poi-types","title":"Try Different POI Types","text":"<pre><code># Schools\nresults = run_socialmapper(\n    state=\"California\",\n    county=\"Los Angeles County\",\n    place_type=\"school\",\n    travel_time=10\n)\n\n# Healthcare facilities\nresults = run_socialmapper(\n    state=\"Texas\",\n    county=\"Harris County\",\n    place_type=\"hospital\",\n    travel_time=20\n)\n</code></pre>"},{"location":"getting-started/quick-start/#use-custom-locations","title":"Use Custom Locations","text":"<p>Create a CSV file <code>my_locations.csv</code>: <pre><code>name,latitude,longitude\nCommunity Center,35.7796,-78.6382\nCity Park,35.7821,-78.6589\n</code></pre></p> <p>Then analyze: <pre><code>results = run_socialmapper(\n    custom_coords_path=\"my_locations.csv\",\n    travel_time=15,\n    census_variables=[\"total_population\"]\n)\n</code></pre></p>"},{"location":"getting-started/quick-start/#add-more-census-variables","title":"Add More Census Variables","text":"<pre><code># Detailed demographic analysis\ncensus_vars = [\n    \"total_population\",\n    \"median_age\",\n    \"median_household_income\",\n    \"percent_poverty\",\n    \"percent_without_vehicle\"\n]\n\nresults = run_socialmapper(\n    state=\"New York\",\n    county=\"New York County\",\n    place_type=\"park\",\n    travel_time=10,\n    census_variables=census_vars\n)\n</code></pre>"},{"location":"getting-started/quick-start/#common-patterns","title":"Common Patterns","text":""},{"location":"getting-started/quick-start/#batch-analysis","title":"Batch Analysis","text":"<pre><code># Analyze multiple POI types\npoi_types = ['library', 'school', 'hospital', 'park']\n\nfor poi_type in poi_types:\n    print(f\"\\nAnalyzing {poi_type}s...\")\n    results = run_socialmapper(\n        state=\"Washington\",\n        county=\"King County\",\n        place_type=poi_type,\n        travel_time=15\n    )\n    print(f\"Found {len(results['poi_data'])} {poi_type}s\")\n</code></pre>"},{"location":"getting-started/quick-start/#different-travel-times","title":"Different Travel Times","text":"<pre><code># Compare accessibility at different time intervals\nfor minutes in [5, 10, 15, 20, 30]:\n    results = run_socialmapper(\n        state=\"Colorado\",\n        county=\"Denver County\",\n        place_type=\"grocery_store\",\n        travel_time=minutes\n    )\n    total_pop = sum(r['total_population'] for r in results['census_data'])\n    print(f\"{minutes} minutes: {total_pop:,} people\")\n</code></pre>"},{"location":"getting-started/quick-start/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quick-start/#no-results-found","title":"No Results Found?","text":"<ul> <li>Check spelling of state/county names</li> <li>Try a different POI type</li> <li>Ensure internet connection is active</li> </ul>"},{"location":"getting-started/quick-start/#slow-performance","title":"Slow Performance?","text":"<ul> <li>First runs build caches (normal)</li> <li>Reduce number of census variables</li> <li>Use smaller geographic areas</li> </ul>"},{"location":"getting-started/quick-start/#memory-issues","title":"Memory Issues?","text":"<ul> <li>Process one county at a time</li> <li>Limit census variables</li> <li>Close other applications</li> </ul>"},{"location":"getting-started/quick-start/#learn-more","title":"Learn More","text":"<ul> <li>Examples Directory - Complete working examples</li> <li>API Reference - Detailed function reference</li> <li>Command Line Guide - All CLI options</li> <li>User Guide - Understanding the features</li> </ul> <p>Ready for more? Check out our tutorials for step-by-step guides!</p>"},{"location":"user-guide/","title":"User Guide","text":"<p>This guide covers everything you need to know to use SocialMapper effectively.</p>"},{"location":"user-guide/#guide-overview","title":"Guide Overview","text":""},{"location":"user-guide/#finding-places","title":"Finding Places","text":"<p>How to search for libraries, schools, hospitals, and other community resources.</p>"},{"location":"user-guide/#travel-time-analysis","title":"Travel Time Analysis","text":"<p>Creating isochrones and understanding different travel modes.</p>"},{"location":"user-guide/#working-with-demographics","title":"Working with Demographics","text":"<p>Using Census variables to analyze population characteristics.</p>"},{"location":"user-guide/#using-custom-locations","title":"Using Custom Locations","text":"<p>Analyzing your own addresses and facilities.</p>"},{"location":"user-guide/#exporting-results","title":"Exporting Results","text":"<p>Saving your analysis as CSV files, maps, and reports.</p>"},{"location":"user-guide/#command-line-usage","title":"Command Line Usage","text":"<p>Using SocialMapper from the terminal.</p>"},{"location":"user-guide/#quick-reference","title":"Quick Reference","text":""},{"location":"user-guide/#common-tasks","title":"Common Tasks","text":"<p>Analyze library access: <pre><code>run_socialmapper(\n    state=\"California\",\n    county=\"Los Angeles County\",\n    place_type=\"library\",\n    travel_time=15\n)\n</code></pre></p> <p>Use custom locations: <pre><code>run_socialmapper(\n    custom_coords_path=\"my_locations.csv\",\n    travel_time=20,\n    census_variables=[\"total_population\"]\n)\n</code></pre></p> <p>Export maps: <pre><code>run_socialmapper(\n    state=\"Texas\",\n    county=\"Harris County\",\n    place_type=\"school\",\n    export_maps=True\n)\n</code></pre></p>"},{"location":"user-guide/#common-questions","title":"Common Questions","text":"<ul> <li>How do I find POI types? \u2192 See Finding Places</li> <li>What census variables are available? \u2192 See Demographics</li> <li>How do I use my own addresses? \u2192 See Custom Locations</li> <li>Can I analyze multiple locations? \u2192 Yes! See Batch Analysis</li> </ul>"},{"location":"user-guide/#need-help","title":"Need Help?","text":"<ul> <li>Check the FAQ</li> <li>View example code</li> <li>Report issues on GitHub</li> </ul>"},{"location":"user-guide/cli-usage/","title":"Command Line Usage","text":"<p>SocialMapper provides a command-line interface for running analyses without writing Python code.</p>"},{"location":"user-guide/cli-usage/#basic-syntax","title":"Basic Syntax","text":"<pre><code>socialmapper [options]\n</code></pre>"},{"location":"user-guide/cli-usage/#input-methods","title":"Input Methods","text":""},{"location":"user-guide/cli-usage/#poi-search","title":"POI Search","text":"<p>Find and analyze points of interest from OpenStreetMap:</p> <pre><code>socialmapper --poi --state \"Texas\" --county \"Harris County\" \\\n  --poi-type \"amenity\" --poi-name \"library\" --travel-time 15\n</code></pre>"},{"location":"user-guide/cli-usage/#custom-locations","title":"Custom Locations","text":"<p>Analyze your own locations from a CSV file:</p> <pre><code>socialmapper --custom-coords my_locations.csv --travel-time 15\n</code></pre>"},{"location":"user-guide/cli-usage/#address-geocoding","title":"Address Geocoding","text":"<p>Convert addresses to coordinates and analyze:</p> <pre><code>socialmapper --addresses --address-file addresses.csv \\\n  --travel-time 20 --geocoding-provider census\n</code></pre>"},{"location":"user-guide/cli-usage/#common-options","title":"Common Options","text":""},{"location":"user-guide/cli-usage/#travel-time","title":"Travel Time","text":"<pre><code># Set travel time (1-120 minutes)\nsocialmapper --poi --state \"California\" --county \"Los Angeles County\" \\\n  --place-type \"hospital\" --travel-time 20\n</code></pre>"},{"location":"user-guide/cli-usage/#census-variables","title":"Census Variables","text":"<pre><code># Add demographic variables\nsocialmapper --custom-coords locations.csv \\\n  --census-variables total_population median_age median_income\n</code></pre>"},{"location":"user-guide/cli-usage/#geographic-level","title":"Geographic Level","text":"<pre><code># Use ZIP codes instead of block groups\nsocialmapper --custom-coords locations.csv \\\n  --geographic-level zcta\n</code></pre>"},{"location":"user-guide/cli-usage/#export-options","title":"Export Options","text":"<pre><code># Export CSV and maps\nsocialmapper --custom-coords locations.csv \\\n  --export-csv --export-maps\n</code></pre>"},{"location":"user-guide/cli-usage/#poi-search-parameters","title":"POI Search Parameters","text":"<p>When using <code>--poi</code>, specify:</p> <ul> <li><code>--state</code> - State name or abbreviation</li> <li><code>--county</code> - County name (include \"County\")</li> <li><code>--poi-type</code> - OpenStreetMap type (e.g., \"amenity\")</li> <li><code>--poi-name</code> - Specific name (e.g., \"library\")</li> </ul> <p>Or use simplified: - <code>--place-type</code> - Common place type (e.g., \"library\", \"school\")</p>"},{"location":"user-guide/cli-usage/#examples","title":"Examples","text":"<pre><code># Find libraries\nsocialmapper --poi --state \"Illinois\" --county \"Cook County\" \\\n  --place-type \"library\" --travel-time 15\n\n# Find all amenities named \"hospital\"\nsocialmapper --poi --state \"Florida\" --county \"Miami-Dade County\" \\\n  --poi-type \"amenity\" --poi-name \"hospital\" --travel-time 20\n</code></pre>"},{"location":"user-guide/cli-usage/#custom-coordinates","title":"Custom Coordinates","text":"<p>Required CSV format: <pre><code>name,latitude,longitude\nLocation 1,35.7796,-78.6382\nLocation 2,35.8934,-78.8637\n</code></pre></p> <p>Usage: <pre><code>socialmapper --custom-coords my_locations.csv \\\n  --travel-time 15 --export-csv\n</code></pre></p>"},{"location":"user-guide/cli-usage/#address-geocoding_1","title":"Address Geocoding","text":"<p>For address-based analysis:</p> <pre><code># Basic address geocoding\nsocialmapper --addresses --address-file addresses.csv\n\n# With specific provider\nsocialmapper --addresses --address-file addresses.csv \\\n  --geocoding-provider census\n\n# With quality threshold\nsocialmapper --addresses --address-file addresses.csv \\\n  --geocoding-quality exact\n</code></pre>"},{"location":"user-guide/cli-usage/#output-control","title":"Output Control","text":""},{"location":"user-guide/cli-usage/#output-directory","title":"Output Directory","text":"<pre><code># Custom output location\nsocialmapper --custom-coords locations.csv \\\n  --output-dir my_results\n</code></pre>"},{"location":"user-guide/cli-usage/#export-formats","title":"Export Formats","text":"<pre><code># CSV only (default)\nsocialmapper --custom-coords locations.csv --export-csv\n\n# Add maps\nsocialmapper --custom-coords locations.csv \\\n  --export-csv --export-maps\n\n# Add isochrones\nsocialmapper --custom-coords locations.csv \\\n  --export-csv --export-isochrones\n</code></pre>"},{"location":"user-guide/cli-usage/#advanced-options","title":"Advanced Options","text":""},{"location":"user-guide/cli-usage/#census-api-key","title":"Census API Key","text":"<pre><code># Provide API key\nsocialmapper --custom-coords locations.csv \\\n  --api-key YOUR_CENSUS_API_KEY\n\n# Or set environment variable\nexport CENSUS_API_KEY=YOUR_KEY\nsocialmapper --custom-coords locations.csv\n</code></pre>"},{"location":"user-guide/cli-usage/#quiet-mode","title":"Quiet Mode","text":"<pre><code># Reduce output verbosity\nsocialmapper --custom-coords locations.csv --quiet\n</code></pre>"},{"location":"user-guide/cli-usage/#version-information","title":"Version Information","text":"<pre><code># Check version\nsocialmapper --version\n</code></pre>"},{"location":"user-guide/cli-usage/#complete-examples","title":"Complete Examples","text":""},{"location":"user-guide/cli-usage/#urban-library-analysis","title":"Urban Library Analysis","text":"<pre><code>socialmapper --poi \\\n  --state \"New York\" \\\n  --county \"New York County\" \\\n  --place-type \"library\" \\\n  --travel-time 15 \\\n  --census-variables total_population median_income \\\n  --export-csv \\\n  --export-maps\n</code></pre>"},{"location":"user-guide/cli-usage/#rural-healthcare-access","title":"Rural Healthcare Access","text":"<pre><code>socialmapper --poi \\\n  --state \"Montana\" \\\n  --county \"Yellowstone County\" \\\n  --place-type \"hospital\" \\\n  --travel-time 45 \\\n  --geographic-level zcta \\\n  --census-variables total_population percent_poverty \\\n  --export-csv\n</code></pre>"},{"location":"user-guide/cli-usage/#custom-facility-analysis","title":"Custom Facility Analysis","text":"<pre><code>socialmapper --custom-coords facilities.csv \\\n  --travel-time 20 \\\n  --census-variables total_population median_age percent_without_vehicle \\\n  --export-csv \\\n  --export-maps \\\n  --output-dir facility_analysis\n</code></pre>"},{"location":"user-guide/cli-usage/#getting-help","title":"Getting Help","text":"<pre><code># Show all options\nsocialmapper --help\n\n# Show version\nsocialmapper --version\n</code></pre>"},{"location":"user-guide/cli-usage/#tips","title":"Tips","text":"<ol> <li>Use quotes around multi-word values: <code>--state \"New York\"</code></li> <li>Include \"County\" in county names: <code>--county \"Los Angeles County\"</code></li> <li>Check spelling of place names and types</li> <li>Start simple with fewer options, then add more</li> <li>Use --quiet for scripting and automation</li> </ol>"},{"location":"user-guide/cli-usage/#next-steps","title":"Next Steps","text":"<ul> <li>Explore available census variables</li> <li>Learn about travel time options</li> <li>Understand output formats</li> </ul>"},{"location":"user-guide/custom-locations/","title":"Using Custom Locations","text":"<p>SocialMapper lets you analyze accessibility from your own locations beyond what's available in OpenStreetMap. This is useful for analyzing your organization's facilities, specific addresses, or any custom points of interest.</p>"},{"location":"user-guide/custom-locations/#csv-file-format","title":"CSV File Format","text":"<p>Create a CSV file with your locations. The basic format requires: - <code>name</code> - Location name - <code>latitude</code> - Decimal latitude - <code>longitude</code> - Decimal longitude</p>"},{"location":"user-guide/custom-locations/#example-csv","title":"Example CSV","text":"<pre><code>name,latitude,longitude\nMain Office,35.7796,-78.6382\nBranch Office,35.8934,-78.8637\nCommunity Center,35.7321,-78.5512\n</code></pre>"},{"location":"user-guide/custom-locations/#basic-usage","title":"Basic Usage","text":""},{"location":"user-guide/custom-locations/#python-api","title":"Python API","text":"<pre><code>from socialmapper import run_socialmapper\n\n# Analyze custom locations\nresults = run_socialmapper(\n    custom_coords_path=\"my_locations.csv\",\n    travel_time=15,\n    census_variables=[\"total_population\", \"median_household_income\"]\n)\n</code></pre>"},{"location":"user-guide/custom-locations/#command-line","title":"Command Line","text":"<pre><code>socialmapper --custom-coords my_locations.csv --travel-time 15\n</code></pre>"},{"location":"user-guide/custom-locations/#working-with-results","title":"Working with Results","text":"<p>The results dictionary includes: - <code>poi_data</code> - Your input locations with added geographic context - <code>census_data</code> - Demographics for areas within travel time - Output files in the <code>output/</code> directory</p> <pre><code># Check results\nprint(f\"Analyzed {len(results['poi_data'])} locations\")\nprint(f\"Found {len(results['census_data'])} census block groups\")\n</code></pre>"},{"location":"user-guide/custom-locations/#travel-time-options","title":"Travel Time Options","text":"<p>Adjust the travel time to change the analysis area:</p> <pre><code># 5-minute walk\nresults = run_socialmapper(\n    custom_coords_path=\"locations.csv\",\n    travel_time=5\n)\n\n# 20-minute drive \nresults = run_socialmapper(\n    custom_coords_path=\"locations.csv\", \n    travel_time=20\n)\n</code></pre>"},{"location":"user-guide/custom-locations/#census-variables","title":"Census Variables","text":"<p>Add more demographic variables to your analysis:</p> <pre><code>results = run_socialmapper(\n    custom_coords_path=\"locations.csv\",\n    travel_time=15,\n    census_variables=[\n        \"total_population\",\n        \"median_household_income\",\n        \"median_age\",\n        \"percent_poverty\"\n    ]\n)\n</code></pre> <p>See demographic variables for the full list.</p>"},{"location":"user-guide/custom-locations/#export-options","title":"Export Options","text":""},{"location":"user-guide/custom-locations/#save-results-as-csv","title":"Save Results as CSV","text":"<pre><code>results = run_socialmapper(\n    custom_coords_path=\"locations.csv\",\n    travel_time=15,\n    export_csv=True  # Default\n)\n# Results saved to output/csv/\n</code></pre>"},{"location":"user-guide/custom-locations/#generate-maps","title":"Generate Maps","text":"<pre><code>results = run_socialmapper(\n    custom_coords_path=\"locations.csv\",\n    travel_time=15,\n    export_maps=True\n)\n# Maps saved to output/maps/\n</code></pre>"},{"location":"user-guide/custom-locations/#tips-and-best-practices","title":"Tips and Best Practices","text":""},{"location":"user-guide/custom-locations/#data-preparation","title":"Data Preparation","text":"<ol> <li>Verify coordinates - Ensure latitude/longitude are correct</li> <li>Use decimal degrees - e.g., 35.7796, -78.6382</li> <li>Check coordinate order - Latitude first, then longitude</li> <li>Name locations clearly - Use descriptive names</li> </ol>"},{"location":"user-guide/custom-locations/#performance","title":"Performance","text":"<ol> <li>Start small - Test with a few locations first</li> <li>Use appropriate travel times - Larger areas take longer</li> <li>Limit census variables - Only request what you need</li> </ol>"},{"location":"user-guide/custom-locations/#common-issues","title":"Common Issues","text":"<p>\"File not found\" - Check the file path - Use absolute paths if needed</p> <p>\"Invalid coordinates\" - Verify latitude is between -90 and 90 - Verify longitude is between -180 and 180 - Check for swapped coordinates</p> <p>\"No census data\" - Ensure locations are in the United States - Check coordinate accuracy</p>"},{"location":"user-guide/custom-locations/#batch-analysis","title":"Batch Analysis","text":"<p>To analyze multiple locations at once, simply include all locations in your CSV file:</p> <pre><code>name,latitude,longitude\nStore 1,35.7796,-78.6382\nStore 2,35.8934,-78.8637\nStore 3,35.7321,-78.5512\nStore 4,35.9102,-78.7234\n</code></pre> <p>SocialMapper will analyze all locations in a single run:</p> <pre><code># Analyze all locations at once\nresults = run_socialmapper(\n    custom_coords_path=\"all_stores.csv\",\n    travel_time=15\n)\n\nprint(f\"Analyzed {len(results['poi_data'])} locations\")\n</code></pre> <p>For separate analysis of each location:</p> <pre><code>import pandas as pd\n\n# Load locations\nlocations = pd.read_csv(\"stores.csv\")\n\n# Analyze each separately\nfor _, location in locations.iterrows():\n    # Create single-location CSV or use data directly\n    result = run_socialmapper(\n        custom_coords_path=create_temp_csv(location),\n        travel_time=15\n    )\n    print(f\"{location['name']}: {sum(r['total_population'] for r in result['census_data']):,} people\")\n</code></pre>"},{"location":"user-guide/custom-locations/#example-use-cases","title":"Example Use Cases","text":""},{"location":"user-guide/custom-locations/#facility-analysis","title":"Facility Analysis","text":"<p>Analyze accessibility to your organization's locations:</p> <pre><code># Load facility locations\nresults = run_socialmapper(\n    custom_coords_path=\"our_facilities.csv\",\n    travel_time=15,\n    census_variables=[\"total_population\", \"median_income\"]\n)\n\n# Review population reach\ntotal_pop = sum(row.get(\"total_population\", 0) for row in results[\"census_data\"])\nprint(f\"Total population within 15 minutes: {total_pop:,}\")\n</code></pre>"},{"location":"user-guide/custom-locations/#site-comparison","title":"Site Comparison","text":"<p>Compare potential new locations:</p> <pre><code># Analyze each candidate site\nfor site_file in [\"site_a.csv\", \"site_b.csv\", \"site_c.csv\"]:\n    results = run_socialmapper(\n        custom_coords_path=site_file,\n        travel_time=10,\n        census_variables=[\"total_population\"]\n    )\n    print(f\"{site_file}: Population reach = {sum(r['total_population'] for r in results['census_data']):,}\")\n</code></pre>"},{"location":"user-guide/custom-locations/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about travel time analysis</li> <li>Add more demographic variables</li> <li>Export your results in different formats</li> </ul>"},{"location":"user-guide/demographics/","title":"Working with Demographics","text":"<p>SocialMapper integrates US Census data to help you understand the population characteristics within travel time areas.</p>"},{"location":"user-guide/demographics/#available-census-variables","title":"Available Census Variables","text":""},{"location":"user-guide/demographics/#basic-demographics","title":"Basic Demographics","text":"<pre><code># Common demographic variables\ncensus_variables = [\n    \"total_population\",        # Total population count\n    \"median_age\",             # Median age\n    \"median_household_income\", # Median household income\n    \"percent_poverty\",        # Percentage below poverty line\n    \"percent_without_vehicle\" # Percentage of households without vehicles\n]\n</code></pre>"},{"location":"user-guide/demographics/#using-variables","title":"Using Variables","text":"<pre><code>from socialmapper import run_socialmapper\n\nresults = run_socialmapper(\n    state=\"North Carolina\",\n    county=\"Wake County\", \n    place_type=\"library\",\n    travel_time=15,\n    census_variables=[\"total_population\", \"median_income\"]\n)\n</code></pre>"},{"location":"user-guide/demographics/#common-variable-names","title":"Common Variable Names","text":"<p>SocialMapper accepts user-friendly names that map to Census codes:</p> Friendly Name Description Census Code <code>total_population</code> Total population B01003_001E <code>median_age</code> Median age B01002_001E <code>median_household_income</code> Median household income B19013_001E <code>median_income</code> Same as above B19013_001E <code>percent_poverty</code> % below poverty line (calculated) <code>percent_without_vehicle</code> % households no vehicle (calculated)"},{"location":"user-guide/demographics/#working-with-results","title":"Working with Results","text":"<p>Census data is returned in the <code>census_data</code> list:</p> <pre><code># Access census data\nfor block_group in results['census_data']:\n    population = block_group.get('total_population', 0)\n    income = block_group.get('median_household_income', 0)\n    print(f\"Block group {block_group['GEOID']}: Pop={population}, Income=${income}\")\n</code></pre>"},{"location":"user-guide/demographics/#calculating-totals","title":"Calculating Totals","text":"<p>Sum values across all block groups:</p> <pre><code># Total population within travel time\ntotal_pop = sum(\n    row.get('total_population', 0) \n    for row in results['census_data']\n)\n\nprint(f\"Total population: {total_pop:,}\")\n\n# Average median income (weighted by population)\ntotal_income = 0\ntotal_pop_for_income = 0\n\nfor row in results['census_data']:\n    pop = row.get('total_population', 0)\n    income = row.get('median_household_income', 0)\n    if income &gt; 0:  # Exclude missing data\n        total_income += income * pop\n        total_pop_for_income += pop\n\navg_income = total_income / total_pop_for_income if total_pop_for_income &gt; 0 else 0\nprint(f\"Average median income: ${avg_income:,.0f}\")\n</code></pre>"},{"location":"user-guide/demographics/#command-line-usage","title":"Command Line Usage","text":"<pre><code># Specify multiple variables\nsocialmapper --poi --state \"Texas\" --county \"Harris County\" \\\n  --place-type \"school\" --travel-time 10 \\\n  --census-variables total_population median_age percent_poverty\n</code></pre>"},{"location":"user-guide/demographics/#geographic-levels","title":"Geographic Levels","text":"<p>SocialMapper supports two geographic levels:</p>"},{"location":"user-guide/demographics/#block-groups-default","title":"Block Groups (Default)","text":"<ul> <li>Smaller geographic units</li> <li>More precise demographics</li> <li>Better for urban analysis</li> </ul> <pre><code>results = run_socialmapper(\n    custom_coords_path=\"locations.csv\",\n    geographic_level=\"block-group\",  # Default\n    census_variables=[\"total_population\"]\n)\n</code></pre>"},{"location":"user-guide/demographics/#zip-code-tabulation-areas-zcta","title":"ZIP Code Tabulation Areas (ZCTA)","text":"<ul> <li>Larger geographic units</li> <li>Approximate ZIP code boundaries</li> <li>Better for regional analysis</li> </ul> <pre><code>results = run_socialmapper(\n    custom_coords_path=\"locations.csv\",\n    geographic_level=\"zcta\",\n    census_variables=[\"total_population\"]\n)\n</code></pre>"},{"location":"user-guide/demographics/#handling-missing-data","title":"Handling Missing Data","text":"<p>Census data may be missing for some areas:</p> <pre><code># Safe data access\nfor row in results['census_data']:\n    # Use .get() with default value\n    population = row.get('total_population', 0)\n\n    # Check for None values\n    income = row.get('median_household_income')\n    if income is not None and income &gt; 0:\n        print(f\"Valid income: ${income}\")\n</code></pre>"},{"location":"user-guide/demographics/#performance-tips","title":"Performance Tips","text":"<ol> <li>Request only needed variables - Each variable adds processing time</li> <li>Start with basic variables - total_population is fastest</li> <li>Use block groups for local analysis - More accurate for small areas</li> <li>Use ZCTA for regional analysis - Faster for large areas</li> </ol>"},{"location":"user-guide/demographics/#example-applications","title":"Example Applications","text":""},{"location":"user-guide/demographics/#demographic-profile","title":"Demographic Profile","text":"<pre><code># Create demographic profile of library service areas\nresults = run_socialmapper(\n    state=\"California\",\n    county=\"San Diego County\",\n    place_type=\"library\",\n    travel_time=15,\n    census_variables=[\n        \"total_population\",\n        \"median_age\",\n        \"median_household_income\",\n        \"percent_poverty\"\n    ]\n)\n\n# Summarize demographics\ntotal_pop = sum(r.get('total_population', 0) for r in results['census_data'])\navg_age = sum(r.get('median_age', 0) * r.get('total_population', 0) \n              for r in results['census_data']) / total_pop\n\nprint(f\"Population within 15 min of libraries: {total_pop:,}\")\nprint(f\"Average median age: {avg_age:.1f}\")\n</code></pre>"},{"location":"user-guide/demographics/#equity-analysis","title":"Equity Analysis","text":"<pre><code># Analyze access for vulnerable populations\nresults = run_socialmapper(\n    custom_coords_path=\"health_clinics.csv\",\n    travel_time=20,\n    census_variables=[\n        \"total_population\",\n        \"percent_poverty\",\n        \"percent_without_vehicle\"\n    ]\n)\n\n# Calculate vulnerable population\nvulnerable_pop = 0\nfor row in results['census_data']:\n    pop = row.get('total_population', 0)\n    poverty_rate = row.get('percent_poverty', 0) / 100\n    vulnerable_pop += pop * poverty_rate\n\nprint(f\"Population in poverty within reach: {vulnerable_pop:,.0f}\")\n</code></pre>"},{"location":"user-guide/demographics/#census-data-notes","title":"Census Data Notes","text":"<ul> <li>Data from American Community Survey (ACS)</li> <li>Usually 1-2 years old</li> <li>Some rural areas may have limited data</li> <li>Income values are in dollars</li> <li>Percentages are 0-100, not decimals</li> </ul>"},{"location":"user-guide/demographics/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about exporting results</li> <li>Explore travel time options</li> <li>Find different place types</li> </ul>"},{"location":"user-guide/exporting-results/","title":"Exporting Results","text":"<p>SocialMapper can export analysis results in multiple formats for use in reports, further analysis, or visualization in other tools.</p>"},{"location":"user-guide/exporting-results/#output-directory-structure","title":"Output Directory Structure","text":"<p>By default, results are saved to the <code>output/</code> directory:</p> <pre><code>output/\n\u251c\u2500\u2500 csv/          # CSV data files\n\u251c\u2500\u2500 maps/         # Map images (if enabled)\n\u2514\u2500\u2500 isochrones/   # Isochrone data (if enabled)\n</code></pre>"},{"location":"user-guide/exporting-results/#csv-export-default","title":"CSV Export (Default)","text":"<p>CSV export is enabled by default and creates detailed data files.</p>"},{"location":"user-guide/exporting-results/#basic-usage","title":"Basic Usage","text":"<pre><code>from socialmapper import run_socialmapper\n\n# CSV export is automatic\nresults = run_socialmapper(\n    state=\"Ohio\",\n    county=\"Franklin County\",\n    place_type=\"library\",\n    travel_time=15,\n    export_csv=True  # Default\n)\n</code></pre>"},{"location":"user-guide/exporting-results/#output-files","title":"Output Files","text":"<p>For POI analysis, you'll get: - <code>{location}_{type}_{time}min_census_data.csv</code> - Census demographics - Location details and metadata</p> <p>Example: <code>columbus_amenity_library_15min_census_data.csv</code></p>"},{"location":"user-guide/exporting-results/#csv-contents","title":"CSV Contents","text":"<p>The census data CSV includes: - <code>GEOID</code> - Census block group identifier - All requested census variables - Geographic identifiers (state, county, tract)</p>"},{"location":"user-guide/exporting-results/#map-export","title":"Map Export","text":"<p>Generate static map images showing isochrones and demographics.</p>"},{"location":"user-guide/exporting-results/#enable-map-export","title":"Enable Map Export","text":"<pre><code>results = run_socialmapper(\n    custom_coords_path=\"locations.csv\",\n    travel_time=15,\n    census_variables=[\"total_population\"],\n    export_maps=True  # Generate maps\n)\n</code></pre>"},{"location":"user-guide/exporting-results/#map-types","title":"Map Types","text":"<p>SocialMapper creates: 1. Isochrone maps - Shows travel time areas 2. Demographic maps - Visualizes census data (one per variable)</p>"},{"location":"user-guide/exporting-results/#command-line","title":"Command Line","text":"<pre><code>socialmapper --custom-coords locations.csv --travel-time 15 \\\n  --export-csv --export-maps\n</code></pre>"},{"location":"user-guide/exporting-results/#isochrone-export","title":"Isochrone Export","text":"<p>Export the actual isochrone geometries for use in GIS software.</p> <pre><code>results = run_socialmapper(\n    custom_coords_path=\"locations.csv\",\n    travel_time=15,\n    export_isochrones=True\n)\n# Creates output/isochrones/*.parquet files\n</code></pre>"},{"location":"user-guide/exporting-results/#custom-output-directory","title":"Custom Output Directory","text":"<p>Change where files are saved:</p> <pre><code>results = run_socialmapper(\n    custom_coords_path=\"locations.csv\",\n    travel_time=15,\n    output_dir=\"my_analysis_results\"\n)\n# Files saved to my_analysis_results/csv/, etc.\n</code></pre>"},{"location":"user-guide/exporting-results/#working-with-exported-data","title":"Working with Exported Data","text":""},{"location":"user-guide/exporting-results/#load-csv-in-python","title":"Load CSV in Python","text":"<pre><code>import pandas as pd\n\n# Load exported census data\ndf = pd.read_csv(\"output/csv/library_15min_census_data.csv\")\n\n# Analyze\ntotal_pop = df['total_population'].sum()\nprint(f\"Total population: {total_pop:,}\")\n</code></pre>"},{"location":"user-guide/exporting-results/#load-in-excel","title":"Load in Excel","text":"<ol> <li>Open Excel</li> <li>Data \u2192 From Text/CSV</li> <li>Select the CSV file</li> <li>Review and load</li> </ol>"},{"location":"user-guide/exporting-results/#use-in-gis-software","title":"Use in GIS Software","text":"<p>The isochrone parquet files can be loaded in: - QGIS (with parquet plugin) - ArcGIS Pro - Python with GeoPandas</p> <pre><code>import geopandas as gpd\n\n# Load isochrone\nisochrone = gpd.read_parquet(\"output/isochrones/isochrone15_location.parquet\")\n</code></pre>"},{"location":"user-guide/exporting-results/#file-naming-convention","title":"File Naming Convention","text":"<p>Files are named systematically:</p> <p>Census Data CSV: <code>{location}_{poi_type}_{poi_name}_{travel_time}min_census_data.csv</code></p> <p>Maps: <code>{location}_{poi_type}_{poi_name}_{travel_time}min_{variable}_map.png</code></p> <p>Isochrones: <code>isochrone{time}_{location}.parquet</code></p>"},{"location":"user-guide/exporting-results/#tips-for-using-exports","title":"Tips for Using Exports","text":""},{"location":"user-guide/exporting-results/#for-reports","title":"For Reports","text":"<ol> <li>Use CSV files for data tables</li> <li>Include map images for visualization</li> <li>Calculate summary statistics from raw data</li> </ol>"},{"location":"user-guide/exporting-results/#for-further-analysis","title":"For Further Analysis","text":"<ol> <li>Load CSVs into pandas/R</li> <li>Join with other datasets using GEOID</li> <li>Create custom visualizations</li> </ol>"},{"location":"user-guide/exporting-results/#for-gis","title":"For GIS","text":"<ol> <li>Use isochrone exports</li> <li>Join census data by GEOID</li> <li>Create custom map layouts</li> </ol>"},{"location":"user-guide/exporting-results/#example-complete-export","title":"Example: Complete Export","text":"<pre><code># Full export example\nresults = run_socialmapper(\n    state=\"Washington\",\n    county=\"King County\",\n    place_type=\"hospital\",\n    travel_time=20,\n    census_variables=[\n        \"total_population\",\n        \"median_age\",\n        \"percent_poverty\"\n    ],\n    export_csv=True,\n    export_maps=True,\n    export_isochrones=True,\n    output_dir=\"hospital_analysis\"\n)\n\nprint(\"Export complete!\")\nprint(\"Files saved to:\")\nprint(\"- hospital_analysis/csv/\")\nprint(\"- hospital_analysis/maps/\") \nprint(\"- hospital_analysis/isochrones/\")\n</code></pre>"},{"location":"user-guide/exporting-results/#limitations","title":"Limitations","text":"<ul> <li>Maps are static PNG images</li> <li>Large areas may produce large files</li> <li>Map generation takes additional time</li> </ul>"},{"location":"user-guide/exporting-results/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about command line usage</li> <li>Explore custom locations</li> <li>Understand census variables</li> </ul>"},{"location":"user-guide/finding-places/","title":"Finding Places","text":"<p>SocialMapper can find various types of community resources using OpenStreetMap data. This guide shows you how to search for different places.</p>"},{"location":"user-guide/finding-places/#common-place-types","title":"Common Place Types","text":""},{"location":"user-guide/finding-places/#essential-services","title":"Essential Services","text":"<p>Libraries <pre><code>run_socialmapper(\n    state=\"Illinois\",\n    county=\"Cook County\",\n    place_type=\"library\",\n    travel_time=15\n)\n</code></pre></p> <p>Schools <pre><code>run_socialmapper(\n    state=\"Texas\",\n    county=\"Harris County\",\n    place_type=\"school\",\n    travel_time=10\n)\n</code></pre></p> <p>Hospitals <pre><code>run_socialmapper(\n    state=\"California\",\n    county=\"Los Angeles County\",\n    place_type=\"hospital\",\n    travel_time=20\n)\n</code></pre></p>"},{"location":"user-guide/finding-places/#community-resources","title":"Community Resources","text":"<p>Parks <pre><code>run_socialmapper(\n    state=\"Colorado\",\n    county=\"Denver County\",\n    place_type=\"park\",\n    travel_time=15\n)\n</code></pre></p> <p>Grocery Stores <pre><code>run_socialmapper(\n    state=\"Ohio\",\n    county=\"Franklin County\",\n    place_type=\"supermarket\",\n    travel_time=10\n)\n</code></pre></p> <p>Community Centers <pre><code>run_socialmapper(\n    state=\"Washington\",\n    county=\"King County\",\n    place_type=\"community_centre\",\n    travel_time=15\n)\n</code></pre></p>"},{"location":"user-guide/finding-places/#openstreetmap-tags","title":"OpenStreetMap Tags","text":"<p>SocialMapper uses OpenStreetMap tags to find places. Common tags include:</p>"},{"location":"user-guide/finding-places/#amenity-tags","title":"Amenity Tags","text":"<ul> <li><code>library</code> - Public libraries</li> <li><code>school</code> - Schools (all levels)</li> <li><code>hospital</code> - Hospitals</li> <li><code>clinic</code> - Medical clinics</li> <li><code>pharmacy</code> - Pharmacies</li> <li><code>bank</code> - Banks</li> <li><code>post_office</code> - Post offices</li> <li><code>police</code> - Police stations</li> <li><code>fire_station</code> - Fire stations</li> <li><code>community_centre</code> - Community centers</li> </ul>"},{"location":"user-guide/finding-places/#shop-tags","title":"Shop Tags","text":"<ul> <li><code>supermarket</code> - Grocery stores</li> <li><code>convenience</code> - Convenience stores</li> <li><code>bakery</code> - Bakeries</li> <li><code>butcher</code> - Butcher shops</li> </ul>"},{"location":"user-guide/finding-places/#leisure-tags","title":"Leisure Tags","text":"<ul> <li><code>park</code> - Parks</li> <li><code>playground</code> - Playgrounds</li> <li><code>sports_centre</code> - Sports facilities</li> <li><code>swimming_pool</code> - Public pools</li> </ul>"},{"location":"user-guide/finding-places/#advanced-searches","title":"Advanced Searches","text":""},{"location":"user-guide/finding-places/#using-poi-type-and-name","title":"Using POI Type and Name","text":"<p>For more specific searches, combine type and name:</p> <pre><code># Find all Whole Foods locations\nrun_socialmapper(\n    state=\"California\",\n    county=\"Orange County\",\n    poi_type=\"shop\",\n    poi_name=\"supermarket\",\n    travel_time=15\n)\n</code></pre>"},{"location":"user-guide/finding-places/#multiple-counties","title":"Multiple Counties","text":"<p>Analyze multiple counties at once:</p> <pre><code># Analyze libraries across a metro area\nfor county in [\"Cook County\", \"DuPage County\", \"Lake County\"]:\n    results = run_socialmapper(\n        state=\"Illinois\",\n        county=county,\n        place_type=\"library\",\n        travel_time=15\n    )\n</code></pre>"},{"location":"user-guide/finding-places/#tips-for-finding-places","title":"Tips for Finding Places","text":"<ol> <li>Use singular forms - <code>library</code> not <code>libraries</code></li> <li>Check OpenStreetMap - Visit openstreetmap.org to verify place names</li> <li>Try variations - Some places might be tagged differently</li> <li>Be specific - Use exact county names with \"County\" suffix</li> </ol>"},{"location":"user-guide/finding-places/#command-line-examples","title":"Command Line Examples","text":"<p>Find libraries: <pre><code>socialmapper analyze --state \"New York\" --county \"New York County\" \\\n  --place-type \"library\" --travel-time 15\n</code></pre></p> <p>Find hospitals with custom output: <pre><code>socialmapper analyze --state \"Florida\" --county \"Miami-Dade County\" \\\n  --place-type \"hospital\" --travel-time 20 --export-csv --export-maps\n</code></pre></p>"},{"location":"user-guide/finding-places/#troubleshooting","title":"Troubleshooting","text":"<p>No places found? - Verify the county name is correct - Check if the place type exists in that area - Try a broader search area - Ensure internet connection is active</p> <p>Too many results? - Use poi_name to filter further - Reduce the geographic area - Export to CSV and filter in Excel</p>"},{"location":"user-guide/finding-places/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about analyzing travel times</li> <li>Add demographic analysis</li> <li>Use your own locations</li> </ul>"},{"location":"user-guide/travel-time/","title":"Travel Time Analysis","text":"<p>Travel time analysis is at the heart of SocialMapper. It creates isochrones - areas reachable within a specific time - to understand accessibility.</p>"},{"location":"user-guide/travel-time/#what-are-isochrones","title":"What are Isochrones?","text":"<p>Isochrones are geographic areas showing all locations reachable within a given travel time from a starting point. For example, a 15-minute isochrone shows everywhere you can reach in 15 minutes.</p>"},{"location":"user-guide/travel-time/#setting-travel-time","title":"Setting Travel Time","text":""},{"location":"user-guide/travel-time/#basic-usage","title":"Basic Usage","text":"<pre><code>from socialmapper import run_socialmapper\n\n# 15-minute analysis (default)\nresults = run_socialmapper(\n    state=\"Texas\",\n    county=\"Harris County\",\n    place_type=\"library\",\n    travel_time=15\n)\n</code></pre>"},{"location":"user-guide/travel-time/#different-time-intervals","title":"Different Time Intervals","text":"<pre><code># 5-minute walk (tight urban area)\nresults = run_socialmapper(\n    custom_coords_path=\"locations.csv\",\n    travel_time=5\n)\n\n# 30-minute drive (suburban/rural)\nresults = run_socialmapper(\n    custom_coords_path=\"locations.csv\", \n    travel_time=30\n)\n</code></pre>"},{"location":"user-guide/travel-time/#command-line","title":"Command Line","text":"<pre><code># Set travel time\nsocialmapper --poi --state \"California\" --county \"Los Angeles County\" \\\n  --place-type \"hospital\" --travel-time 20\n</code></pre>"},{"location":"user-guide/travel-time/#travel-time-ranges","title":"Travel Time Ranges","text":"<p>SocialMapper supports travel times from 1 to 120 minutes:</p> <ul> <li>1-5 minutes: Very local, walkable neighborhoods</li> <li>10-15 minutes: Standard urban accessibility</li> <li>20-30 minutes: Suburban reach</li> <li>45-60 minutes: Regional analysis</li> <li>60+ minutes: Large area coverage</li> </ul>"},{"location":"user-guide/travel-time/#how-it-works","title":"How It Works","text":"<ol> <li>Starting Points: Your POIs or custom locations</li> <li>Road Network: Uses OpenStreetMap road data</li> <li>Travel Calculation: Follows actual roads, not straight lines</li> <li>Area Generation: Creates polygon showing reachable area</li> <li>Census Integration: Finds all census blocks within the area</li> </ol>"},{"location":"user-guide/travel-time/#understanding-results","title":"Understanding Results","text":"<p>The travel time analysis affects what census data you receive:</p> <pre><code># Smaller area = fewer census blocks\nresults_5min = run_socialmapper(\n    custom_coords_path=\"store.csv\",\n    travel_time=5\n)\n\n# Larger area = more census blocks\nresults_20min = run_socialmapper(\n    custom_coords_path=\"store.csv\",\n    travel_time=20\n)\n\nprint(f\"5-min blocks: {len(results_5min['census_data'])}\")\nprint(f\"20-min blocks: {len(results_20min['census_data'])}\")\n</code></pre>"},{"location":"user-guide/travel-time/#practical-examples","title":"Practical Examples","text":""},{"location":"user-guide/travel-time/#compare-different-times","title":"Compare Different Times","text":"<pre><code># Analyze population reach at different intervals\nfor minutes in [5, 10, 15, 20, 30]:\n    results = run_socialmapper(\n        state=\"Illinois\",\n        county=\"Cook County\",\n        place_type=\"grocery_store\",\n        travel_time=minutes\n    )\n\n    total_pop = sum(\n        row.get('total_population', 0) \n        for row in results['census_data']\n    )\n\n    print(f\"{minutes} minutes: {total_pop:,} people\")\n</code></pre>"},{"location":"user-guide/travel-time/#service-area-planning","title":"Service Area Planning","text":"<pre><code># Find optimal service time\nresults_10 = run_socialmapper(\n    custom_coords_path=\"new_clinic.csv\",\n    travel_time=10,\n    census_variables=[\"total_population\", \"percent_poverty\"]\n)\n\nresults_20 = run_socialmapper(\n    custom_coords_path=\"new_clinic.csv\",\n    travel_time=20,\n    census_variables=[\"total_population\", \"percent_poverty\"]\n)\n\n# Compare coverage\npop_10 = sum(r['total_population'] for r in results_10['census_data'])\npop_20 = sum(r['total_population'] for r in results_20['census_data'])\n\nprint(f\"10-min reach: {pop_10:,} people\")\nprint(f\"20-min reach: {pop_20:,} people\")\nprint(f\"Additional reach: {pop_20 - pop_10:,} people\")\n</code></pre>"},{"location":"user-guide/travel-time/#performance-considerations","title":"Performance Considerations","text":"<p>Larger travel times require more processing:</p> <ul> <li>5-10 minutes: Fast processing</li> <li>15-20 minutes: Moderate processing time</li> <li>30+ minutes: May take longer, especially in dense areas</li> </ul> <p>Tips for better performance: 1. Start with smaller travel times for testing 2. Use fewer census variables 3. Analyze fewer locations at once 4. Enable caching (default)</p>"},{"location":"user-guide/travel-time/#common-use-cases","title":"Common Use Cases","text":""},{"location":"user-guide/travel-time/#walking-distance-5-15-minutes","title":"Walking Distance (5-15 minutes)","text":"<ul> <li>Neighborhood services</li> <li>Local parks</li> <li>Elementary schools</li> <li>Corner stores</li> </ul>"},{"location":"user-guide/travel-time/#short-drive-15-30-minutes","title":"Short Drive (15-30 minutes)","text":"<ul> <li>Shopping centers</li> <li>High schools</li> <li>Medical clinics</li> <li>Restaurants</li> </ul>"},{"location":"user-guide/travel-time/#longer-trips-30-60-minutes","title":"Longer Trips (30-60 minutes)","text":"<ul> <li>Regional hospitals</li> <li>Airports</li> <li>Specialty services</li> <li>Employment centers</li> </ul>"},{"location":"user-guide/travel-time/#limitations","title":"Limitations","text":"<ul> <li>Assumes normal traffic conditions</li> <li>Uses estimated travel speeds</li> <li>Doesn't account for:</li> <li>Traffic congestion</li> <li>Public transit</li> <li>Barriers (rivers, highways)</li> <li>Seasonal conditions</li> </ul>"},{"location":"user-guide/travel-time/#next-steps","title":"Next Steps","text":"<ul> <li>Choose appropriate census variables</li> <li>Learn to export results</li> <li>Understand finding places</li> </ul>"}]}